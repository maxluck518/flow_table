cscope 15 $HOME/Desktop/FlowTable/flow_table/test -q 0000004304 0000299471
	@commands.c

1 
	~"comm™ds.h
"

3 
	$Inô
(
Comm™d
 *
íåy
,
FlowE¡ry
 
TabÀInf‹
[5]){

4 
íåy
->
›
 = 
n›
;

5 
íåy
->
id
 = 
tb_m©ch_QöQ
;

6 
i
 = 0;

7 
i
 = 0;i<10;i++){

8 
íåy
->
key
[
i
] = 0x00000000;

9 
íåy
->
mask
[
i
] = 0x00000000;

10 
íåy
->
vÆue
[
i
] = 0x00000000;

12 
íåy
->
key_wrôe_num
 = 0;

13 
íåy
->
mask_wrôe_num
 = 0;

14 
íåy
->
vÆue_wrôe_num
 = 0;

15 
	`TabÀInf‹Inô
(
TabÀInf‹
);

16 
	}
}

17 
	$TabÀInf‹Inô
(
FlowE¡ry
 
TabÀInf‹
[5]){

18 
TabÀInf‹
[0].
key_num
 = 2;

19 
TabÀInf‹
[0].
key_Àn
[0] = 16;

20 
TabÀInf‹
[0].
key_Àn
[1] = 8;

21 
TabÀInf‹
[0].
mask_num
 = 2;

22 
TabÀInf‹
[0].
mask_Àn
[0] = 16;

23 
TabÀInf‹
[0].
mask_Àn
[1] = 8;

24 
TabÀInf‹
[0].
vÆue_num
 = 1;

25 
TabÀInf‹
[0].
vÆue_Àn
[0] = 2;

27 
TabÀInf‹
[1].
key_num
 = 2;

28 
TabÀInf‹
[1].
key_Àn
[0] = 16;

29 
TabÀInf‹
[1].
key_Àn
[1] = 16;

30 
TabÀInf‹
[1].
mask_num
 = 2;

31 
TabÀInf‹
[1].
mask_Àn
[0] = 16;

32 
TabÀInf‹
[1].
mask_Àn
[1] = 16;

33 
TabÀInf‹
[1].
vÆue_num
 = 1;

34 
TabÀInf‹
[1].
vÆue_Àn
[0] = 3;

36 
TabÀInf‹
[2].
key_num
 = 1;

37 
TabÀInf‹
[2].
key_Àn
[0] = 32;

38 
TabÀInf‹
[2].
vÆue_num
 = 4;

39 
TabÀInf‹
[2].
mask_num
 = 1;

40 
TabÀInf‹
[2].
mask_Àn
[0] = 32;

41 
TabÀInf‹
[2].
vÆue_Àn
[0] = 4;

42 
TabÀInf‹
[2].
vÆue_Àn
[1] = 48;

43 
TabÀInf‹
[2].
vÆue_Àn
[2] = 48;

44 
TabÀInf‹
[2].
vÆue_Àn
[3] = 16;

46 
TabÀInf‹
[3].
key_num
 = 1;

47 
TabÀInf‹
[3].
key_Àn
[0] = 48;

48 
TabÀInf‹
[3].
mask_num
 = 1;

49 
TabÀInf‹
[3].
mask_Àn
[0] = 48;

50 
TabÀInf‹
[3].
vÆue_num
 = 4;

51 
TabÀInf‹
[3].
vÆue_Àn
[0] = 3;

52 
TabÀInf‹
[3].
vÆue_Àn
[1] = 2;

53 
TabÀInf‹
[3].
vÆue_Àn
[2] = 12;

54 
TabÀInf‹
[3].
vÆue_Àn
[3] = 12;

56 
TabÀInf‹
[4].
key_num
 = 1;

57 
TabÀInf‹
[4].
key_Àn
[0] = 48;

58 
TabÀInf‹
[4].
mask_num
 = 1;

59 
TabÀInf‹
[4].
mask_Àn
[0] = 48;

60 
TabÀInf‹
[4].
vÆue_num
 = 4;

61 
TabÀInf‹
[4].
vÆue_Àn
[0] = 3;

62 
TabÀInf‹
[4].
vÆue_Àn
[1] = 2;

63 
TabÀInf‹
[4].
vÆue_Àn
[2] = 12;

64 
TabÀInf‹
[4].
vÆue_Àn
[3] = 12;

65 
	}
}

66 
uöt8_t
 
	$Ch¨ToHex
(
ch
){

67 
uöt8_t
 
hex
;

68 if(
ch
 > 96 && ch < 103)

69 
hex
 = 
ch
 - 87;

70 if(
ch
 >64 && ch < 71)

71 
hex
 = 
ch
 - 55;

72 if(
ch
 >47 && ch <74)

73 
hex
 = 
ch
 - 48;

75 
hex
 = 0x10;

76  
hex
;

77 
	}
}

78 
	$AddE¡ry
(* 
com
[10],
Comm™d
 *
íåy
,
FlowE¡ry
 
TabÀInf‹
[5]){

79 
i
;

80 
i
 = 0;i<3;i++)

81 if(
	`°rcmp
(
com
[0],
O≥øti⁄Name
[
i
]) == 0){

82 
i
){

83 0: 
íåy
->
›
 = 
n›
; ;

84 1: 
íåy
->
›
 = 
èbÀ_öô
; ;

85 2: 
íåy
->
›
 = 
èbÀ_add
; ;

86 3: 
íåy
->
›
 = 
èbÀ_dñ
; ;

90 
i
 = 0;i<5;i++)

91 if(
	`°rcmp
(
com
[1],
TabÀName
[
i
]) == 0){

92 
i
){

93 0 : 
íåy
->
id
 = 
tb_m©ch_QöQ
; ;

94 1 : 
íåy
->
id
 = 
tb_m©ch_Domaö
; ;

95 2 : 
íåy
->
id
 = 
tb_m©ch_L3
; ;

96 3 : 
íåy
->
id
 = 
tb_m©ch_µpL2
; ;

97 4 : 
íåy
->
id
 = 
tb_m©ch_extL2
; ;

102 
˙t
 = 0;

103 
off£t
 = 0;

104 
i
 = ()
	`°æí
(
com
[2])-1;i >= 0;i--) {

105 
íåy
->
¥i‹ôy
 +(
	`Ch¨ToHex
(
com
[2][
i
]Ë<< 
˙t
);

106 
˙t
 += 4;

109 
˙t
 = 0;

110 
off£t
 = 0;

111 
key_°¨t
 = 3;

112 
key_íd
 = 2 + 
TabÀInf‹
[
íåy
->
id
].
key_num
;

113 
key_id
 = 
key_íd
;

115 
key_id
 >
key_°¨t
){

116 
i
 = ()
	`°æí
(
com
[
key_id
]) - 1;i >= 0;i--) {

117 
íåy
->
key
[
off£t
] +
	`Ch¨ToHex
(
com
[
key_id
][
i
]Ë<< 
˙t
;

118 
˙t
 += 4;

119 if(
˙t
 == 32){

120 
off£t
 += 1;

121 
˙t
 = 0;

124 
key_id
 --;

127 
˙t
 = 0;

128 
off£t
 = 0;

129 
mask_°¨t
 = 
key_íd
 + 1;

130 
mask_íd
 = 
mask_°¨t
 + 
TabÀInf‹
[
íåy
->
id
].
mask_num
 - 1;

131 
mask_id
 = 
mask_íd
;

132 
mask_id
 >
mask_°¨t
){

133 
i
 = ()
	`°æí
(
com
[
mask_id
]) - 1;i >= 0;i--) {

134 
íåy
->
mask
[
off£t
] +
	`Ch¨ToHex
(
com
[
mask_id
][
i
]Ë<< 
˙t
;

135 
˙t
 += 4;

136 if(
˙t
 == 32){

137 
off£t
 += 1;

138 
˙t
 = 0;

141 
mask_id
 --;

144 
˙t
 = 0;

145 
off£t
 = 0;

146 
vÆue_°¨t
 = 
mask_íd
 + 1;

147 
vÆue_íd
 = 
vÆue_°¨t
 + 
TabÀInf‹
[
íåy
->
id
].
vÆue_num
 - 1;

148 
vÆue_id
 = 
vÆue_íd
;

149 
vÆue_Àn
 = 0;

150 
vÆue_id
 >
vÆue_°¨t
){

151 
vÆue_Àn
 = 
TabÀInf‹
[
íåy
->
id
].vÆue_Àn[
vÆue_id
 - 
vÆue_°¨t
];

152 
i
 = ()
	`°æí
(
com
[
vÆue_id
]) - 1;i >= 0;i--) {

153 
íåy
->
vÆue
[
off£t
] +
	`Ch¨ToHex
(
com
[
vÆue_id
][
i
]Ë<< 
˙t
;

154 if(
vÆue_Àn
 < 4){

155 
˙t
 +=
vÆue_Àn
;

156 
vÆue_Àn
 = 0;

159 
˙t
 += 4;

160 
vÆue_Àn
 -=4;

163 if(
˙t
 >= 32){

164 
off£t
 += 1;

165 
˙t
 = 0;

168 
vÆue_id
 --;

170 
tmp
 = 0;

171 
i
 = 0;i<
TabÀInf‹
[
íåy
->
id
].
key_num
;i++){

172 
tmp
 +
TabÀInf‹
[
íåy
->
id
].
key_Àn
[
i
];

174 if(
tmp
%32 == 0)

175 
íåy
->
key_wrôe_num
 = 
tmp
/32;

177 
íåy
->
key_wrôe_num
 = 
tmp
/32 + 1;

179 
íåy
->
mask_wrôe_num
 =É¡ry->
key_wrôe_num
;

181 
tmp
 = 0;

182 
i
 = 0;i<
TabÀInf‹
[
íåy
->
id
].
vÆue_num
;i++){

183 
tmp
 +
TabÀInf‹
[
íåy
->
id
].
vÆue_Àn
[
i
];

185 if(
tmp
%32 == 0)

186 
íåy
->
vÆue_wrôe_num
 = 
tmp
/32;

188 
íåy
->
vÆue_wrôe_num
 = 
tmp
/32 + 1;

189 
	`¥ötf
("%d\t",
íåy
->
key_wrôe_num
);

190 
	`¥ötf
("%d\t",
íåy
->
mask_wrôe_num
);

191 
	`¥ötf
("%d\n",
íåy
->
vÆue_wrôe_num
);

194 
	}
}

196 
	$show
(
Comm™d
 *
íåy
){

197 
i
;

198 
	`¥ötf
("op:\n");

199 
	`¥ötf
("%x\n",
íåy
->
›
);

200 
	`¥ötf
("id:\n");

201 
	`¥ötf
("%x\n",
íåy
->
id
);

202 
	`¥ötf
("priority:\n");

203 
	`¥ötf
("%x\n",
íåy
->
¥i‹ôy
);

204 
	`¥ötf
("key:\n");

205 
i
 = 0;i<10;i++){

206 
	`¥ötf
("%x\n",
íåy
->
key
[
i
]);

208 
	`¥ötf
("mask:\n");

209 
i
 = 0;i<10;i++){

210 
	`¥ötf
("%x\n",
íåy
->
mask
[
i
]);

212 
	`¥ötf
("value:\n");

213 
i
 = 0;i<10;i++){

214 
	`¥ötf
("%x\n",
íåy
->
vÆue
[
i
]);

216 
	}
}

218 
	$RódComm™dFûe
(** c⁄° 
buff
, c⁄° 
•ec
, c⁄° * c⁄° 
fûíame
)

220 
FILE
 *
Â
 = 
	`f›í
(
fûíame
, "r");

221 i‡(
Â
 =
NULL
)

223 
	`¥ötf
("FaûÅÿ›í fûê%s. \n", 
fûíame
);

227 
löe
[
MAX_LINE_LEN
 + 2];

228 
˙t
 = 0;

229 (
˙t
 < 
•ec
Ë&& !
	`„of
(
Â
))

231 
löe
[0] = 0;

232 i‡(
	`fgës
(
löe
, 
MAX_LINE_LEN
 + 2, 
Â
Ë=
NULL
) ;

233 i‡(
löe
[0] == 0) ;

234 
buff
[
˙t
] = (*)
	`mÆloc
(
MAX_LINE_LEN
 + 2);

235 
	`°∫˝y
(
buff
[
˙t
], 
löe
, 
MAX_LINE_LEN
 + 2 - 1);

236 
buff
[
˙t
][
MAX_LINE_LEN
 + 1] = 0;

237 
˙t
++;

240 
	`¥ötf
("O≥¿fûê%†OK.\n", 
fûíame
);

241 
	`¥ötf
("Thîê¨ê%dÜöe†ö fûê%s.\n", 
˙t
, 
fûíame
);

242 
	`f˛o£
(
Â
);

244  
˙t
;

245 
	}
}

248 
	$ModifyComm™ds
(* 
com
,
tos
){

249 
Àn
 = ()
	`°æí
(
com
);

250 
i
 = 0;

251 
i
 = 0;i<
Àn
;i++){

252 if(
com
[
tos
] == ' ' ||com[tos] == '\n'){

256 
com
[
i
] = com[
tos
++];

258 if(
i
 !
Àn
 )

259 
com
++[
i
] = '\0';

260 
	}
}

291 
	$Tøns„rComm™ds
(*
Comm™ds
[
MAX_DEPTH
],
löe_num
,*
out
[MAX_DEPTH][10]){

292 
i
;

293 
m
;

294 
k
 = 0;

295 
	`mem£t
(
out
,0,(*)*10);

296 
i
 = 0;ò< 
löe_num
;i++){

297 
k
 = 0;

298 * 
buf
 = 
Comm™ds
[
i
];

299 
	`¥ötf
("%s",
buf
);

300 (
out
[
i
][
k
] = 
	`°πok
(
buf
,"|")Ë!
NULL
){

301 
k
 ++;

302 
buf
 = 
NULL
;

304 
m
 = 
k
;m<10;m++){

305 
out
[
i
][
m
] = "NULL";

307 
m
 = 0;m<
k
;m++){

308 
˙t
 = 0;

309 
out
[
i
][
m
][
˙t
] == ' '){

310 
˙t
 ++;

312 
	`ModifyComm™ds
(
out
[
i
][
m
],
˙t
);

316 
	}
}

	@commands.h

1 #i‚de‡
_COMMANDS_H


2 
	#_COMMANDS_H


	)

3 
	~"defö©i⁄.h
"

5 
	sComm™d
{

6 
èbÀ_›î©i⁄
 
	m›
;

7 
oÂ_exp_tb_m©ch_ty≥
 
	mid
;

8 
FlowE¡ry
 
	mTabÀInf‹
[5];

9 
uöt32_t
 
	mkey
[10];

10 
uöt32_t
 
	mmask
[10];

11 
uöt32_t
 
	mvÆue
[10];

12 
uöt16_t
 
	m¥i‹ôy
;

13 
	mkey_wrôe_num
;

14 
	mmask_wrôe_num
;

15 
	mvÆue_wrôe_num
;

16 }
	tComm™d
;

18 
Inô
(
Comm™d
 *
íåy
,
FlowE¡ry
 
TabÀInf‹
[5]);

19 
TabÀInf‹Inô
(
FlowE¡ry
 
TabÀInf‹
[5]);

20 
uöt8_t
 
Ch¨ToHex
(
ch
);

21 
AddE¡ry
(* 
com
[10],
Comm™d
 *
íåy
,
FlowE¡ry
 
TabÀInf‹
[5]);

22 
show
(
Comm™d
 *
íåy
);

24 
RódComm™dFûe
(** c⁄° 
buff
, c⁄° 
•ec
, c⁄° * c⁄° 
fûíame
);

27 
ModifyComm™ds
(* 
com
,
tos
);

29 
Tøns„rComm™ds
(*
Comm™ds
[
MAX_DEPTH
],
löe_num
,*
out
[MAX_DEPTH][10]);

	@defination.h

1 #i‚de‡
_DEFINATION_H


2 
	#_DEFINATION_H


	)

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

6 
	~<°döt.h
>

7 
	~<°rög.h
>

8 
	#TABLE_DEPTH
 511

	)

9 
	#MAX_LINE_LEN
 5500

	)

10 
	#MAX_DEPTH
 500

	)

12 
	eoÂ_exp_tb_m©ch_ty≥
 {

13 
	mtb_m©ch_QöQ
 = 0,

14 
	mtb_m©ch_Domaö
 = 1,

15 
	mtb_m©ch_L3
 = 2,

16 
	mtb_m©ch_µpL2
 = 3,

17 
	mtb_m©ch_extL2
 = 4,

20 
	eèbÀ_›î©i⁄
{

21 
	mn›
 = 0,

22 
	mèbÀ_öô
 = 1,

23 
	mèbÀ_add
 = 2,

24 
	mèbÀ_dñ
 = 3,

27 
	sÊow_íåy_Àn
{

28 
	mkey_num
;

29 
	mkey_Àn
[5];

30 
	mmask_num
;

31 
	mmask_Àn
[5];

32 
	mvÆue_num
;

33 
	mvÆue_Àn
[5];

34 }
	tFlowE¡ry
;

36 * 
	gTabÀName
[5] = {"qinq","domain","L3","pppL2","extL2"};

37 * 
	gO≥øti⁄Name
[3] = {"nop","table_add","table_del"};

38 
uöt32_t
 
	gTabÀAddr
[5] = {0x43d40000,0x43d00000,0x43d20000,0x43d30000,0x43d10000};

	@lib/common/nf2.h

35 #i‚de‡
_NF2_H


36 
	#_NF2_H
 1

	)

38 
	#NF2_DEV_NAME
 "nf2"

	)

41 
	~<löux/sockios.h
>

44 #i‚de‡
MAX_IFACE


45 
	#MAX_IFACE
 4

	)

56 
	#CPCI_REG_ID
 0x000

	)

57 
	#CPCI_REG_BOARD_ID
 0x004

	)

58 
	#CPCI_REG_CTRL
 0x008

	)

59 
	#CPCI_REG_RESET
 0x00c

	)

60 
	#CPCI_REG_ERROR
 0x010

	)

61 
	#CPCI_REG_DUMMY
 0x020

	)

62 
	#CPCI_REG_INTERRUPT_MASK
 0x040

	)

63 
	#CPCI_REG_INTERRUPT_STATUS
 0x044

	)

64 
	#CPCI_REG_PROG_DATA
 0x100

	)

65 
	#CPCI_REG_PROG_STATUS
 0x104

	)

66 
	#CPCI_REG_PROG_CTRL
 0x108

	)

67 
	#CPCI_REG_DMA_I_ADDR
 0x140

	)

68 
	#CPCI_REG_DMA_E_ADDR
 0x144

	)

69 
	#CPCI_REG_DMA_I_SIZE
 0x148

	)

70 
	#CPCI_REG_DMA_E_SIZE
 0x14c

	)

71 
	#CPCI_REG_DMA_I_CTRL
 0x150

	)

72 
	#CPCI_REG_DMA_E_CTRL
 0x154

	)

73 
	#CPCI_REG_DMA_QUEUE_STATUS
 0x158

	)

74 
	#CPCI_REG_DMA_MAX_XFER_TIME
 0x180

	)

75 
	#CPCI_REG_DMA_MAX_RETRIES
 0x184

	)

76 
	#CPCI_REG_CNET_MAX_XFER_TIME
 0x188

	)

77 
	#CPCI_REG_DMA_I_PKT_CNT
 0x400

	)

78 
	#CPCI_REG_DMA_E_PKT_CNT
 0x404

	)

79 
	#CPCI_REG_CPCI_REG_RD_CNT
 0x408

	)

80 
	#CPCI_REG_CPCI_REG_WR_CNT
 0x40c

	)

81 
	#CPCI_REG_CNET_REG_RD_CNT
 0x410

	)

82 
	#CPCI_REG_CNET_REG_WR_CNT
 0x414

	)

84 
	#CPCI_REG_N_CLK_COUNT
 0x500

	)

85 
	#CPCI_REG_P_MAX
 0x504

	)

86 
	#CPCI_REG_N_EXP
 0x508

	)

87 
	#CPCI_REG_P_CLK_CTR
 0x510

	)

88 
	#CPCI_REG_RESET_CTR
 0x520

	)

93 
	#CNET_REG_BASE
 0x400000

	)

100 
	#SRAM_SIZE
 0x200000

	)

102 
	#SRAM_1_BASE
 0x800000

	)

103 
	#SRAM_1_MAX
 0x9FFFFF

	)

105 
	#SRAM_2_BASE
 0xC00000

	)

106 
	#SRAM_2_MAX
 0xDFFFFF

	)

111 
	#NF2_DEVICE_ID
 0x0400000

	)

112 
	#NF2_REVISION
 0x0400004

	)

113 
	#NF2_DEVICE_STR
 0x0400008

	)

117 
	#CNET_REG_ID
 (
CNET_REG_BASE
 + 0x000)

	)

118 
	#CNET_REG_CTRL
 (
CNET_REG_BASE
 + 0x004)

	)

119 
	#CNET_REG_RESET
 (
CNET_REG_BASE
 + 0x008)

	)

120 
	#CNET_REG_ERROR
 (
CNET_REG_BASE
 + 0x00C)

	)

121 
	#CNET_REG_ENABLE
 (
CNET_REG_BASE
 + 0x010)

	)

122 
	#CNET_REG_WR_SRAM1_EOP
 (
CNET_REG_BASE
 + 0x0F0)

	)

123 
	#CNET_REG_RD_SRAM1_EOP
 (
CNET_REG_BASE
 + 0x0F4)

	)

124 
	#CNET_REG_WR_SRAM2_EOP
 (
CNET_REG_BASE
 + 0x0F8)

	)

125 
	#CNET_REG_RD_SRAM2_EOP
 (
CNET_REG_BASE
 + 0x0FC)

	)

126 
	#CNET_REG_MF_STATUS_0
 (
CNET_REG_BASE
 + 0x100)

	)

127 
	#CNET_REG_MF_TX_PKTS_SENT_0
 (
CNET_REG_BASE
 + 0x104)

	)

128 
	#CNET_REG_MF_RX_PKTS_RCVD_0
 (
CNET_REG_BASE
 + 0x108)

	)

129 
	#CNET_REG_MF_RX_PKTS_LOST_0
 (
CNET_REG_BASE
 + 0x10C)

	)

130 
	#CNET_REG_MAC_CONFIG_0
 (
CNET_REG_BASE
 + 0x110)

	)

131 
	#CNET_REG_MF_STATUS_1
 (
CNET_REG_BASE
 + 0x140)

	)

132 
	#CNET_REG_MF_TX_PKTS_SENT_1
 (
CNET_REG_BASE
 + 0x144)

	)

133 
	#CNET_REG_MF_RX_PKTS_RCVD_1
 (
CNET_REG_BASE
 + 0x148)

	)

134 
	#CNET_REG_MF_RX_PKTS_LOST_1
 (
CNET_REG_BASE
 + 0x14C)

	)

135 
	#CNET_REG_MAC_CONFIG_1
 (
CNET_REG_BASE
 + 0x150)

	)

136 
	#CNET_REG_MF_STATUS_2
 (
CNET_REG_BASE
 + 0x180)

	)

137 
	#CNET_REG_MF_TX_PKTS_SENT_2
 (
CNET_REG_BASE
 + 0x184)

	)

138 
	#CNET_REG_MF_RX_PKTS_RCVD_2
 (
CNET_REG_BASE
 + 0x188)

	)

139 
	#CNET_REG_MF_RX_PKTS_LOST_2
 (
CNET_REG_BASE
 + 0x18C)

	)

140 
	#CNET_REG_MAC_CONFIG_2
 (
CNET_REG_BASE
 + 0x190)

	)

141 
	#CNET_REG_MF_STATUS_3
 (
CNET_REG_BASE
 + 0x1C0)

	)

142 
	#CNET_REG_MF_TX_PKTS_SENT_3
 (
CNET_REG_BASE
 + 0x1C4)

	)

143 
	#CNET_REG_MF_RX_PKTS_RCVD_3
 (
CNET_REG_BASE
 + 0x1C8)

	)

144 
	#CNET_REG_MF_RX_PKTS_LOST_3
 (
CNET_REG_BASE
 + 0x1CC)

	)

145 
	#CNET_REG_MAC_CONFIG_3
 (
CNET_REG_BASE
 + 0x1D0)

	)

146 
	#CNET_REG_RXQ_NUM_PKTS_0
 (
CNET_REG_BASE
 + 0x200)

	)

147 
	#CNET_REG_RXQ_POINTERS_0
 (
CNET_REG_BASE
 + 0x204)

	)

148 
	#CNET_REG_RXQ_NUM_PKTS_1
 (
CNET_REG_BASE
 + 0x240)

	)

149 
	#CNET_REG_RXQ_POINTERS_1
 (
CNET_REG_BASE
 + 0x244)

	)

150 
	#CNET_REG_RXQ_NUM_PKTS_2
 (
CNET_REG_BASE
 + 0x280)

	)

151 
	#CNET_REG_RXQ_POINTERS_2
 (
CNET_REG_BASE
 + 0x284)

	)

152 
	#CNET_REG_RXQ_NUM_PKTS_3
 (
CNET_REG_BASE
 + 0x2C0)

	)

153 
	#CNET_REG_RXQ_POINTERS_3
 (
CNET_REG_BASE
 + 0x2C4)

	)

155 
	#CNET_REG_MF_RX_PKTS_LOST_BAD_FCS_0
 (
CNET_REG_BASE
 + 0x114)

	)

156 
	#CNET_REG_MF_RX_PKTS_LOST_FULL_FIFO_0
 (
CNET_REG_BASE
+0x118)

	)

157 
	#CNET_REG_MF_RX_GOOD_PKTS_RCVD_0
 (
CNET_REG_BASE
+0x11C)

	)

158 
	#CNET_REG_MF_RX_GOOD_BYTES_RCVD_0
 (
CNET_REG_BASE
+0x120)

	)

159 
	#CNET_REG_MF_TX_BYTES_SENT_0
 (
CNET_REG_BASE
+0x124)

	)

160 
	#CNET_REG_MF_RX_PKTS_LOST_BAD_FCS_1
 (
CNET_REG_BASE
+0x154)

	)

161 
	#CNET_REG_MF_RX_PKTS_LOST_FULL_FIFO_1
 (
CNET_REG_BASE
+0x158)

	)

162 
	#CNET_REG_MF_RX_GOOD_PKTS_RCVD_1
 (
CNET_REG_BASE
+0x15C)

	)

163 
	#CNET_REG_MF_RX_GOOD_BYTES_RCVD_1
 (
CNET_REG_BASE
+0x160)

	)

164 
	#CNET_REG_MF_TX_BYTES_SENT_1
 (
CNET_REG_BASE
+0x164)

	)

165 
	#CNET_REG_MF_RX_PKTS_LOST_BAD_FCS_2
 (
CNET_REG_BASE
+0x194)

	)

166 
	#CNET_REG_MF_RX_PKTS_LOST_FULL_FIFO_2
 (
CNET_REG_BASE
+0x198)

	)

167 
	#CNET_REG_MF_RX_GOOD_PKTS_RCVD_2
 (
CNET_REG_BASE
+0x19C)

	)

168 
	#CNET_REG_MF_RX_GOOD_BYTES_RCVD_2
 (
CNET_REG_BASE
+0x1A0)

	)

169 
	#CNET_REG_MF_TX_BYTES_SENT_2
 (
CNET_REG_BASE
+0x1A4)

	)

170 
	#CNET_REG_MF_RX_PKTS_LOST_BAD_FCS_3
 (
CNET_REG_BASE
+0x1D4)

	)

171 
	#CNET_REG_MF_RX_PKTS_LOST_FULL_FIFO_3
 (
CNET_REG_BASE
+0x1D8)

	)

172 
	#CNET_REG_MF_RX_GOOD_PKTS_RCVD_3
 (
CNET_REG_BASE
+0x1DC)

	)

173 
	#CNET_REG_MF_RX_GOOD_BYTES_RCVD_3
 (
CNET_REG_BASE
+0x1E0)

	)

174 
	#CNET_REG_MF_TX_BYTES_SENT_3
 (
CNET_REG_BASE
+0x1E4)

	)

176 
	#CNET_MAC_CLK_CHK_CTRL
 (
CNET_REG_BASE
 + 0xF00)

	)

177 
	#CNET_MAC_CLK_CHK_CNT_VALUE
 (
CNET_REG_BASE
 + 0xF04)

	)

181 
	#PHY_REG_BASE
 0x600000

	)

183 
	#PHY_REG_CMD
 (
PHY_REG_BASE
)

	)

184 
	#PHY_REG_STATUS
 (
PHY_REG_BASE
)

	)

191 
	#ID_VERSION
 0x00FFFFFF

	)

192 
	#ID_REVISION
 0xFF000000

	)

195 
	#BOARD_ID
 0x00000F00

	)

196 
	#BOARD_ID_CONTROL
 0x00000001

	)

199 
	#CTRL_CNET_RESET
 0x00000100

	)

200 
	#CTRL_LED
 0x00000001

	)

203 
	#RESET_CPCI
 0x00000001

	)

206 
	#ERR_CNET_READ_TIMEOUT
 0x02000000

	)

207 
	#ERR_CNET_ERROR
 0x01000000

	)

208 
	#ERR_PROG_BUF_OVERFLOW
 0x00020000

	)

209 
	#ERR_PROG_ERROR
 0x00010000

	)

210 
	#ERR_DMA_TIMEOUT
 0x00000400

	)

211 
	#ERR_DMA_RETRY_CNT_EXPIRED
 0x00000200

	)

212 
	#ERR_DMA_BUF_OVERFLOW
 0x00000100

	)

213 
	#ERR_DMA_RD_SIZE_ERROR
 0x00000040

	)

214 
	#ERR_DMA_WR_SIZE_ERROR
 0x00000020

	)

215 
	#ERR_DMA_RD_ADDR_ERROR
 0x00000010

	)

216 
	#ERR_DMA_WR_ADDR_ERROR
 0x00000008

	)

217 
	#ERR_DMA_RD_MAC_ERROR
 0x00000004

	)

218 
	#ERR_DMA_WR_MAC_ERROR
 0x00000002

	)

219 
	#ERR_DMA_FATAL_ERROR
 0x00000001

	)

221 
	#ERR_DMA_SETUP_ERROR
 ( 
ERR_DMA_WR_MAC_ERROR
 | \

222 
ERR_DMA_RD_MAC_ERROR
 | \

223 
ERR_DMA_WR_ADDR_ERROR
 | \

224 
ERR_DMA_RD_ADDR_ERROR
 | \

225 
ERR_DMA_WR_SIZE_ERROR
 | \

226 
ERR_DMA_RD_SIZE_ERROR
 )

	)

230 
	#INT_DMA_RX_COMPLETE
 0x80000000

	)

231 
	#INT_DMA_TX_COMPLETE
 0x40000000

	)

232 
	#INT_PHY_INTERRUPT
 0x20000000

	)

233 
	#INT_DMA_QUEUE_STATUS_CHANGE
 0x00000200

	)

234 
	#INT_PKT_AVAIL
 0x00000100

	)

235 
	#INT_CNET_ERROR
 0x00000020

	)

236 
	#INT_CNET_READ_TIMEOUT
 0x00000010

	)

237 
	#INT_PROG_ERROR
 0x00000008

	)

238 
	#INT_DMA_TRANSFER_ERROR
 0x00000004

	)

239 
	#INT_DMA_SETUP_ERROR
 0x00000002

	)

240 
	#INT_DMA_FATAL_ERROR
 0x00000001

	)

242 
	#INT_UNKNOWN
 ~(
INT_DMA_RX_COMPLETE
 | \

243 
INT_DMA_TX_COMPLETE
 | \

244 
INT_PHY_INTERRUPT
 | \

245 
INT_DMA_QUEUE_STATUS_CHANGE
 | \

246 
INT_PKT_AVAIL
 | \

247 
INT_CNET_ERROR
 | \

248 
INT_CNET_READ_TIMEOUT
 | \

249 
INT_PROG_ERROR
 | \

250 
INT_DMA_TRANSFER_ERROR
 | \

251 
INT_DMA_SETUP_ERROR
 | \

252 
INT_DMA_FATAL_ERROR
)

	)

255 
	#PROG_INIT
 0x00010000

	)

256 
	#PROG_DONE
 0x00000100

	)

257 
	#PROG_FIFO_EMPTY
 0x00000002

	)

258 
	#PROG_IN_PROGRESS
 0x00000001

	)

261 
	#PROG_CTRL_RESET
 0x00000001

	)

264 
	#DMA_CTRL_MAC
 0x00000300

	)

265 
	#DMA_CTRL_OWNER
 0x00000001

	)

272 
	#CNET_RESET_MAC
 0x0000000F

	)

273 
	#CNET_RESET_MAC_3
 0x00000008

	)

274 
	#CNET_RESET_MAC_2
 0x00000004

	)

275 
	#CNET_RESET_MAC_1
 0x00000002

	)

276 
	#CNET_RESET_MAC_0
 0x00000001

	)

279 
	#CNET_ERROR_TX_UNDERRUN_MAC
 0x000000F0

	)

280 
	#CNET_ERROR_TX_UNDERRUN_MAC_3
 0x00000080

	)

281 
	#CNET_ERROR_TX_UNDERRUN_MAC_2
 0x00000040

	)

282 
	#CNET_ERROR_TX_UNDERRUN_MAC_1
 0x00000020

	)

283 
	#CNET_ERROR_TX_UNDERRUN_MAC_0
 0x00000010

	)

284 
	#CNET_ERROR_TX_OVERRUN_MAC
 0x0000000F

	)

285 
	#CNET_ERROR_TX_OVERRUN_MAC_3
 0x00000008

	)

286 
	#CNET_ERROR_TX_OVERRUN_MAC_2
 0x00000004

	)

287 
	#CNET_ERROR_TX_OVERRUN_MAC_1
 0x00000002

	)

288 
	#CNET_ERROR_TX_OVERRUN_MAC_0
 0x00000001

	)

291 
	#CNET_ENABLE_RX_FIFO
 0x0000F000

	)

292 
	#CNET_ENABLE_RX_FIFO_3
 0x00008000

	)

293 
	#CNET_ENABLE_RX_FIFO_2
 0x00004000

	)

294 
	#CNET_ENABLE_RX_FIFO_1
 0x00002000

	)

295 
	#CNET_ENABLE_RX_FIFO_0
 0x00001000

	)

296 
	#CNET_ENABLE_TX_MAC
 0x00000F00

	)

297 
	#CNET_ENABLE_TX_MAC_3
 0x00000800

	)

298 
	#CNET_ENABLE_TX_MAC_2
 0x00000400

	)

299 
	#CNET_ENABLE_TX_MAC_1
 0x00000200

	)

300 
	#CNET_ENABLE_TX_MAC_0
 0x00000100

	)

301 
	#CNET_ENABLE_DEBUG_TRISTATE
 0x00000004

	)

302 
	#CNET_ENABLE_INGRESS_ARBITER
 0x00000002

	)

303 
	#CNET_ENABLE_RX_DMA
 0x00000001

	)

306 
	#CNET_MF_STATUS_RX_FIFO_EMPTY
 0x02000000

	)

307 
	#CNET_MF_STATUS_RX_PKT_AVAIL
 0x01000000

	)

308 
	#CNET_MF_STATUS_RX_NUM_PKTS
 0x00FF0000

	)

309 
	#CNET_MF_STATUS_TX_FIFO_FULL
 0x00000200

	)

310 
	#CNET_MF_STATUS_TX_FIFO_NO_MAX_PKT
 0x00000100

	)

311 
	#CNET_MF_STATUS_TX_NUM_PKTS
 0x000000FF

	)

314 
	#CNET_MAC_CFG_FULL_DUPLEX
 0x00000020

	)

315 
	#CNET_MAC_CFG_TX_FCS_SUPPLIED
 0x00000010

	)

316 
	#CNET_MAC_CFG_RX_WANT_FCS
 0x00000008

	)

317 
	#CNET_MAC_CFG_JUMBO_ENABLE
 0x00000004

	)

319 
	#CNET_MAC_CFG_SPEED
 0x00000002

	)

320 
	#CNET_MAC_CFG_1000_MBPS
 0x00000002

	)

321 
	#CNET_MAC_CFG_100_MBPS
 0x00000001

	)

322 
	#CNET_MAC_CFG_10_MBPS
 0x00000000

	)

324 
	#CNET_RXQ_WR_PTR
 0x00FF0000

	)

325 
	#CNET_RXQ_RD_PTR
 0x000000FF

	)

329 
	#PHY_RD_WR
 0x80000000

	)

330 
	#PHY_PHY
 0x03000000

	)

331 
	#PHY_ADDR
 0x001F0000

	)

332 
	#PHY_DATA
 0x0000FFFF

	)

334 
	#PHY_DONE
 0x80000000

	)

335 
	#PHY_DONE_CNT
 0x001F0000

	)

339 
	#NF2_GET_VERSION
(
x
Ë(x & 0xFFFFFF)

	)

340 
	#NF2_GET_REVISION
(
x
Ë((x & 0xFF000000Ë>> 24)

	)

342 
	#NF2_GET_BOARD_ID
(
x
Ë((x & 
BOARD_ID
Ë>> 8)

	)

343 
	#NF2_GET_CONTROL
(
x
Ë(x & 
BOARD_ID_CONTROL
)

	)

345 
	#NF2_GET_CNET_RESET
(
x
Ë((x & 
CTRL_CNET_RESET
Ë>> 8)

	)

346 
	#NF2_GET_LED
(
x
Ë(x & 
CTRL_LED
)

	)

348 
	#NF2_GET_RESET
(
x
Ë(x & 
RESET_CPCI
)

	)

350 
	#NF2_GET_CNET_READ_TIMEOUT
(
x
Ë((x & 
ERR_CNET_READ_TIMEOUT
Ë>> 25)

	)

351 
	#NF2_GET_CNET_ERROR
(
x
Ë((x & 
ERR_CNET_ERROR
Ë>> 24)

	)

352 
	#NF2_GET_PROG_BUF_OVERFLOW
(
x
Ë((x & 
ERR_PROG_BUF_OVERFLOW
Ë>> 12)

	)

353 
	#NF2_GET_PROG_ERROR
(
x
Ë((x & 
ERR_PROG_ERROR
Ë>> 11)

	)

354 
	#NF2_GET_DMA_TIMEOUT
(
x
Ë((x & 
ERR_DMA_TIMEOUT
Ë>> 10)

	)

355 
	#NF2_GET_DMA_RETRY_CNT_EXPIRED
(
x
) \

356 ((
x
 & 
ERR_DMA_RETRY_CNT_EXPIRED
Ë>> 9)

	)

357 
	#NF2_GET_DMA_BUF_OVERFLOW
(
x
Ë((x & 
ERR_DMA_BUF_OVERFLOW
Ë>> 8)

	)

358 
	#NF2_GET_DMA_RD_SIZE_ERROR
(
x
Ë((x & 
ERR_DMA_RD_SIZE_ERROR
Ë>> 6)

	)

359 
	#NF2_GET_DMA_WR_SIZE_ERROR
(
x
Ë((x & 
ERR_DMA_WR_SIZE_ERROR
Ë>> 5)

	)

360 
	#NF2_GET_DMA_RD_ADDR_ERROR
(
x
Ë((x & 
ERR_DMA_RD_ADDR_ERROR
Ë>> 4)

	)

361 
	#NF2_GET_DMA_WR_ADDR_ERROR
(
x
Ë((x & 
ERR_DMA_WR_ADDR_ERROR
Ë>> 3)

	)

362 
	#NF2_GET_DMA_RD_MAC_ERROR
(
x
Ë((x & 
ERR_DMA_RD_MAC_ERROR
Ë>> 2)

	)

363 
	#NF2_GET_DMA_WR_MAC_ERROR
(
x
Ë((x & 
ERR_DMA_WR_MAC_ERROR
Ë>> 1)

	)

364 
	#NF2_GET_DMA_FATAL_ERROR
(
x
Ë(x & 
ERR_DMA_FATAL_ERROR
)

	)

366 
	#NF2_GET_INT_DMA_TX_COMPLETE
(
x
Ë((x & 
INT_DMA_TX_COMPLETE
Ë>> 31)

	)

367 
	#NF2_GET_INT_DMA_RX_COMPLETE
(
x
Ë((x & 
INT_DMA_RX_COMPLETE
Ë>> 30)

	)

368 
	#NF2_GET_INT_PHY_INTERRUPT
(
x
Ë((x & 
INT_PHY_INTERRUPT
Ë>> 29)

	)

369 
	#NF2_GET_INT_PKT_AVAIL
(
x
Ë((x & 
INT_PKT_AVAIL
Ë>> 8)

	)

370 
	#NF2_GET_INT_CNET_ERROR
(
x
Ë((x & 
INT_CNET_ERROR
Ë>> 5)

	)

371 
	#NF2_GET_INT_CNET_READ_TIMEOUT
(
x
) \

372 ((
x
 & 
INT_CNET_READ_TIMEOUT
Ë>> 4)

	)

373 
	#NF2_GET_INT_PROG_ERROR
(
x
Ë((x & 
INT_PROG_ERROR
Ë>> 3)

	)

374 
	#NF2_GET_INT_DMA_TRANSFER_ERROR
(
x
) \

375 ((
x
 & 
INT_DMA_TRANSFER_ERROR
Ë>> 2)

	)

376 
	#NF2_GET_INT_DMA_SETUP_ERROR
(
x
Ë((x & 
INT_DMA_SETUP_ERROR
Ë>> 1)

	)

377 
	#NF2_GET_INT_DMA_FATAL_ERROR
(
x
Ë(x & 
INT_DMA_FATAL_ERROR
)

	)

379 
	#NF2_GET_PROG_INIT
(
x
Ë((x & 
PROG_INIT
Ë>> 16)

	)

380 
	#NF2_GET_PROG_DONE
(
x
Ë((x & 
PROG_DONE
Ë>> 8)

	)

381 
	#NF2_GET_PROG_FIFO_EMPTY
(
x
Ë((x & 
PROG_FIFO_EMPTY
Ë>> 1)

	)

382 
	#NF2_GET_PROG_IN_PROGRESS
(
x
Ë(x & 
PROG_IN_PROGRESS
)

	)

384 
	#NF2_GET_DMA_CTRL_MAC
(
x
Ë((x & 
DMA_CTRL_MAC
Ë>> 8)

	)

385 
	#NF2_GET_DMA_CTRL_OWNER
(
x
Ë(x & 
DMA_CTRL_OWNER
)

	)

387 
	#NF2_SET_DMA_CTRL_MAC
(
x
Ë(x << 8)

	)

391 
	#NF2_GET_CNET_VERSION
(
x
Ë((x & 0xFFFF0000Ë>> 16)

	)

392 
	#NF2_GET_CNET_DEVICE_ID
(
x
Ë(x & 0xFFFF)

	)

394 
	#NF2_GET_CNET_RESET_MAC
(
x
Ë(x & 
CNET_RESET_MAC
)

	)

396 
	#NF2_GET_CNET_ERROR_TX_UNDERRUN_MAC
(
x
) \

397 ((
x
 & 
CNET_ERROR_TX_UNDERRUN_MAC
Ë>> 4)

	)

398 
	#NF2_GET_CNET_ERROR_TX_OVERRUN_MAC
(
x
) \

399 (
x
 & 
CNET_ERROR_TX_OVERRUN_MAC
)

	)

401 
	#NF2_GET_CNET_ENABLE_RX_FIFO
(
x
Ë((x & 
CNET_ENABLE_RX_FIFO
Ë>> 12)

	)

402 
	#NF2_GET_CNET_ENABLE_TX_MAC
(
x
Ë((x & 
CNET_ENABLE_TX_MAC
Ë>> 8)

	)

403 
	#NF2_GET_CNET_ENABLE_DEBUG_TRISTATE
(
x
) \

404 ((
x
 & 
CNET_ENABLE_DEBUG_TRISTATE
Ë>> 2)

	)

405 
	#NF2_GET_CNET_ENABLE_INGRESS_ARBITER
(
x
) \

406 ((
x
 & 
CNET_ENABLE_INGRESS_ARBITER
Ë>> 1)

	)

407 
	#NF2_GET_CNET_ENABLE_RX_DMA
(
x
Ë(x & 
CNET_ENABLE_RX_DMA
)

	)

409 
	#NF2_GET_CNET_MF_STATUS_RX_FIFO_EMPTY
(
x
) \

410 ((
x
 & 
CNET_MF_STATUS_RX_FIFO_EMPTY
Ë>> 25)

	)

411 
	#NF2_GET_CNET_MF_STATUS_RX_PKT_AVAIL
(
x
) \

412 ((
x
 & 
CNET_MF_STATUS_RX_PKT_AVAIL
Ë>> 24)

	)

413 
	#NF2_GET_CNET_MF_STATUS_RX_NUM_PKTS
(
x
) \

414 ((
x
 & 
CNET_MF_STATUS_RX_NUM_PKTS
Ë>> 16)

	)

415 
	#NF2_GET_CNET_MF_STATUS_TX_FIFO_FULL
(
x
) \

416 ((
x
 & 
CNET_MF_STATUS_TX_FIFO_FULL
Ë>> 9)

	)

417 
	#NF2_GET_CNET_MF_STATUS_TX_FIFO_NO_MAX_PKT
(
x
) \

418 ((
x
 & 
CNET_MF_STATUS_TX_FIFO_NO_MAX_PKT
Ë>> 8)

	)

419 
	#NF2_GET_CNET_MF_STATUS_TX_NUM_PKTS
(
x
) \

420 (
x
 & 
CNET_MF_STATUS_TX_NUM_PKTS
)

	)

422 
	#NF2_GET_CNET_MAC_CFG_FULL_DUPLEX
(
x
) \

423 ((
x
 & 
CNET_MAC_CFG_FULL_DUPLEX
Ë>> 5)

	)

424 
	#NF2_GET_CNET_MAC_CFG_TX_FCS_SUPPLIED
(
x
) \

425 ((
x
 & 
CNET_MAC_CFG_TX_FCS_SUPPLIED
Ë>> 4)

	)

426 
	#NF2_GET_CNET_MAC_CFG_RX_WANT_FCS
(
x
) \

427 ((
x
 & 
CNET_MAC_CFG_RX_WANT_FCS
Ë>> 3)

	)

428 
	#NF2_GET_CNET_MAC_CFG_JUMBO_ENABLE
(
x
) \

429 ((
x
 & 
CNET_MAC_CFG_JUMBO_ENABLE
Ë>> 2)

	)

430 
	#NF2_GET_CNET_MAC_CFG_SPEED
(
x
) \

431 (
x
 & 
CNET_MAC_CFG_SPEED
)

	)

433 
	#NF2_GET_CNET_RXQ_WR_PTR
(
x
Ë((x & 
CNET_RXQ_WR_PTR
Ë>> 16)

	)

434 
	#NF2_GET_CNET_RXQ_RD_PTR
(
x
Ë(x & 
CNET_RXQ_RD_PTR
)

	)

438 
	#NF2_SET_PHY_IS_READ
(
x
Ë(x << 31)

	)

439 
	#NF2_SET_PHY_SELECT
(
x
Ë(x << 24)

	)

440 
	#NF2_SET_PHY_ADDR
(
x
Ë(x << 16)

	)

441 
	#NF2_SET_PHY_DATA
(
x
Ë(x)

	)

443 
	#NF2_GET_PHY_DATA
(
x
Ë(x & 
PHY_DATA
)

	)

444 
	#NF2_GET_PHY_DONE
(
x
Ë((x & 
PHY_DONE
Ë>> 31)

	)

445 
	#NF2_GET_PHY_DONE_CNT
(
x
Ë((x & 
PHY_DONE_CNT
Ë>> 16)

	)

451 
	#SIOCREGREAD
 
SIOCDEVPRIVATE


	)

452 
	#SIOCREGWRITE
 (
SIOCDEVPRIVATE
 + 1)

	)

456 
	#MDIO_0_BASE
 0x0440000

	)

457 
	#MDIO_0_PHY_ID_LO_REG
 0x0440008

	)

458 
	#MDIO_0_PHY_ID_HI_REG
 0x044000C

	)

459 
	#MDIO_0_AUX_STATUS
 0x0440064

	)

460 
	#MDIO_0_INTR_STATUS
 0x0440068

	)

461 
	#MDIO_0_INTR_MASK
 0x044006c

	)

465 
	#ADDRESS_DELTA
 0x80

	)

469 
	#INTR_LINK_STATUS_POS
 0x2

	)

470 
	#AUX_LINK_STATUS_POS
 0x4

	)

476 
	snf2ªg
 {

477 
	mªg
;

478 
	mvÆ
;

	@lib/common/nf2util.c

35 
	~<°dio.h
>

36 
	~<°dlib.h
>

37 
	~<uni°d.h
>

38 
	~<sys/mm™.h
>

39 
	~<sys/°©.h
>

40 
	~<f˙é.h
>

41 
	~<°döt.h
>

42 
	~<°rög.h
>

44 
	~<sys/ty≥s.h
>

45 
	~<sys/°©.h
>

46 
	~<sys/sockë.h
>

47 
	~<sys/io˘l.h
>

49 
	~<√t/if.h
>

51 
	~<¨∑/öë.h
>

52 
	~"nf2.h
"

53 
	~"nf2utû.h
"

55 
	~"ªg_deföes.h
"

56 
	$ªadReg
(
nf2devi˚
 *
nf2
, 
ªg
, *
vÆ
)

59 
fd
;

60 
i
, 
löíum
, 
cou¡
=0;

61 * 
m≠_ba£
;

62 
PHYADDR
, 
Àngth
;

63 
vÆ_°r
[4];

64 
ãmp_vÆ
;

66 
∑gesize
 = 
	`gë∑gesize
();

69 
PHYADDR
 = 
ªg
;

71 
Àngth
 = 1;

75 
fd
 = 
	`›í
("/dev/mem", 
O_RDWR
|
O_SYNC
);

76 if(
fd
 == -1)

78 
	`¥ötf
("open /dev/mem failed\n");

87 
m≠_ba£
 = 
	`mm≠
(
NULL
, 
∑gesize
, 
PROT_READ
|
PROT_WRITE
, 
MAP_SHARED
, 
fd
, 
PHYADDR
 & 0xfffff000);

88 if(
m≠_ba£
 =
MAP_FAILED
) {

89 
	`≥º‹
("mmap");

98 
pgoff£t
 = 
PHYADDR
 & 0x00000fff;

101 
Àngth
>4) {

102 
löíum
=4;

103 
Àngth
-=4;

104 
	`¥ötf
("%08X: ", (
PHYADDR
 + 
cou¡
));

105 
i
=0;i<4*
löíum
;i=i+4) {

106 
	`¥ötf
("%02X%02X%02X%02X ", ()
m≠_ba£
[
pgoff£t
 + 
cou¡
 + 
i
+3],

107 ()
m≠_ba£
[
pgoff£t
 + 
cou¡
 + 
i
+2],

108 ()
m≠_ba£
[
pgoff£t
 + 
cou¡
 + 
i
+1],

109 ()
m≠_ba£
[
pgoff£t
 + 
cou¡
 + 
i
]

112 
	`¥ötf
("\n");

113 
cou¡
+=16;

129 
c0
,
c1
,
c2
,
c3
;

130 
	`¥ötf
("IN READ : VÆuê© 0x%08X: 0x%02X%02X%02X%02X\n", 
PHYADDR
,

131 ()
m≠_ba£
[
pgoff£t
 + 3],

132 ()
m≠_ba£
[
pgoff£t
 + 2],

133 ()
m≠_ba£
[
pgoff£t
 + 1],

134 ()
m≠_ba£
[
pgoff£t
]

136 
c0
 = ()
m≠_ba£
[
pgoff£t
];

137 
c1
 = ()
m≠_ba£
[
pgoff£t
 + 1];

138 
c2
 = ()
m≠_ba£
[
pgoff£t
 + 2];

139 
c3
 = ()
m≠_ba£
[
pgoff£t
 + 3];

140 *
vÆ
 = 
c3
*0x1000000 + 
c2
*0x10000 + 
c1
*0x100 + 
c0
;

141 
	`¥ötf
("c0 i†%x , c1 i†%x , c2 i†%x , c3 i†%x \n",
c0
,
c1
,
c2
,
c3
);

142 
	`¥ötf
("vÆ i†%x\n", *
vÆ
);

147 
	`˛o£
(
fd
);

150 
	`munm≠
(
m≠_ba£
, 
∑gesize
);

153 
	}
}

154 
	$check_iÁ˚
(
nf2devi˚
 *
nf2
)

156 
°©
 
buf
;

157 
fûíame
[
PATHLEN
];

162 i‡(
	`°æí
(
nf2
->
devi˚_«me
Ë> 
IFNAMSIZ
)

164 
	`Ârötf
(
°dîr
, "I¡îÁ˚Çamêi†toÿl⁄g: %s\n", 
nf2
->
devi˚_«me
);

169 
	`°r˝y
(
fûíame
, "/sys/class/net/");

170 
	`°rˇt
(
fûíame
, 
nf2
->
devi˚_«me
);

171 i‡(
	`°©
(
fûíame
, &
buf
) == 0)

173 
	`Ârötf
(
°dîr
, "FoundÇë devi˚: %s\n", 
nf2
->
devi˚_«me
);

174 
nf2
->
√t_iÁ˚
 = 1;

179 
	`°r˝y
(
fûíame
, "/dev/");

180 
	`°rˇt
(
fûíame
, 
nf2
->
devi˚_«me
);

181 i‡(
	`°©
(
fûíame
, &
buf
) == 0)

183 
	`Ârötf
(
°dîr
, "Found dev devi˚: %s\n", 
nf2
->
devi˚_«me
);

184 
nf2
->
√t_iÁ˚
 = 0;

188 
	`Ârötf
(
°dîr
, "C™'àföd devi˚: %s\n", 
nf2
->
devi˚_«me
);

190 
	}
}

195 
	$›íDes¸ùt‹
(
nf2devi˚
 *
nf2
)

197 
i‰eq
 ifreq;

198 
fûíame
[
PATHLEN
];

199 
sockaddr_ö
 
addªss
;

200 
i
;

201 
sockaddr_ö
 *
sö
 = (sockaddr_ö *Ë&
i‰eq
.
i‰_addr
;

202 
found
 = 0;

204 i‡(
nf2
->
√t_iÁ˚
)

207 
nf2
->
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

208 i‡(
nf2
->
fd
 == -1)

210 
	`≥º‹
("socket: creating socket");

217 i‡(
	`gëeuid
() == 0)

219 
	`°∫˝y
(
i‰eq
.
i‰_i‰n
.
i‰n_«me
, 
nf2
->
devi˚_«me
, 
IFNAMSIZ
);

220 i‡(
	`£tsock›t
(
nf2
->
fd
, 
SOL_SOCKET
, 
SO_BINDTODEVICE
,

221 (*)&
i‰eq
, (ifreq)) < 0) {

222 
	`≥º‹
("setsockopt: setting SO_BINDTODEVICE");

231 
	`°r˝y
(
fûíame
, "/dev/");

232 
	`°rˇt
(
fûíame
, 
nf2
->
devi˚_«me
);

233 
nf2
->
fd
 = 
	`fûío
(
	`f›í
(
fûíame
, "w+"));

234 i‡(
nf2
->
fd
 == -1)

236 
	`≥º‹
("fileno: creating descriptor");

242 
	}
}

244 
	$wrôeReg
(
nf2devi˚
 *
nf2
, 
ªg
, 
vÆ
)

246 
fd
;

248 
ch¨_Àn
;

249 * 
m≠_ba£
;

250 
PHYADDR
;

251 
√wvÆ
;

252 
∑gesize
 = 
	`gë∑gesize
();

256 
PHYADDR
 = 
ªg
;

257 
	`¥ötf
("WRITE PHYADDR = 0x%08X\n",
PHYADDR
);

258 
√wvÆ
 = 
vÆ
;

260 
fd
 = 
	`›í
("/dev/mem", 
O_RDWR
|
O_SYNC
);

261 if(
fd
 == -1)

263 
	`¥ötf
("open /dev/mem failed\n");

267 
m≠_ba£
 = 
	`mm≠
(
NULL
, 
∑gesize
, 
PROT_READ
|
PROT_WRITE
, 
MAP_SHARED
, 
fd
, 
PHYADDR
 & 0xfffff000);

268 if(
m≠_ba£
 =
MAP_FAILED
) {

269 
	`≥º‹
("mmap");

274 
pgoff£t
 = 
PHYADDR
 & 0x00000fff;

275 
c0
,
c1
,
c2
,
c3
;

277 
c0
 = 
√wvÆ
 & 0x000000ff;

278 
c1
 = (
√wvÆ
 & 0x0000ff00) / 0x100;

279 
c2
 = (
√wvÆ
 & 0x00ff0000) / 0x10000;

280 
c3
 = (
√wvÆ
 & 0xff000000) / 0x1000000;

281 
	`¥ötf
("c0 i†%x , c1 i†%x , c2 i†%x , c3 i†%x \n",
c0
,
c1
,
c2
,
c3
);

287 
m≠_ba£
[
pgoff£t
] = 
√wvÆ
;

294 
	`¥ötf
("IN WRITE : VÆuê© 0x%08X: 0x%08X\n", 
PHYADDR
,

295 ()
m≠_ba£
[
pgoff£t
]

297 
	`˛o£
(
fd
);

298 
	`munm≠
(
m≠_ba£
, 
∑gesize
);

300 
	}
}

306 
	$˛o£Des¸ùt‹
(
nf2devi˚
 *
nf2
)

308 
i‰eq
 ifreq;

309 
fûíame
[
PATHLEN
];

311 i‡(
nf2
->
√t_iÁ˚
)

313 
	`˛o£
(
nf2
->
fd
);

317 
	`˛o£
(
nf2
->
fd
);

321 
	}
}

	@lib/common/nf2util.h

35 #i‚de‡
_NF2UTIL_H


36 
	#_NF2UTIL_H
 1

	)

38 
	#PATHLEN
 80

	)

39 
	#DEVICE_STR_LEN
 100

	)

40 
	#DEVICE_INFO_STR_LEN
 1024

	)

41 
	#DEVICE_ADDRESS
 0x43d30000

	)

42 
	#MAX_IPADDR_LEN
 32

	)

44 
	#PROJ_UNKNOWN
 "Unknown"

	)

46 
	#VERSION_ANY
 -1

	)

51 
	snf2devi˚
 {

52 *
	mdevi˚_«me
;

53 
	mfd
;

54 
	m√t_iÁ˚
;

55 
	m£rvî_ù_addr
[
MAX_IPADDR_LEN
];

56 
	m£rvî_p‹t_num
;

62 
ªadReg
(
nf2devi˚
 *
nf2
, 
ªg
, *
vÆ
);

63 
wrôeReg
(
nf2devi˚
 *
nf2
, 
ªg
, 
vÆ
);

64 
check_iÁ˚
(
nf2devi˚
 *
nf2
);

65 
›íDes¸ùt‹
(
nf2devi˚
 *
nf2
);

66 
˛o£Des¸ùt‹
(
nf2devi˚
 *
nf2
);

67 
nf2_ªad_öfo
(
nf2devi˚
 *
nf2
);

68 
¥ötHñlo
 (
nf2devi˚
 *
nf2
, *
vÆ
);

69 
gëCPCIVîsi⁄
(
nf2devi˚
 *
nf2
);

70 
gëCPCIRevsi⁄
(
nf2devi˚
 *
nf2
);

71 
gëDevi˚CPCIVîsi⁄
(
nf2devi˚
 *
nf2
);

72 
gëDevi˚CPCIRevsi⁄
(
nf2devi˚
 *
nf2
);

73 
gëDevi˚ID
(
nf2devi˚
 *
nf2
);

74 
gëDevi˚Maj‹
(
nf2devi˚
 *
nf2
);

75 
gëDevi˚Mö‹
(
nf2devi˚
 *
nf2
);

76 
gëDevi˚Revisi⁄
(
nf2devi˚
 *
nf2
);

77 
gëDevi˚IDModuÀVîsi⁄
(
nf2devi˚
 *
nf2
);

78 c⁄° * 
gëProjDú
(
nf2devi˚
 *
nf2
);

79 c⁄° * 
gëProjName
(
nf2devi˚
 *
nf2
);

80 c⁄° * 
gëProjDesc
(
nf2devi˚
 *
nf2
);

81 c⁄° * 
gëDevi˚InfoSå
(
nf2devi˚
 *
nf2
);

82 
isVúãxProgømmed
(
nf2devi˚
 *
nf2
);

83 
checkVúãxBôfûe
(
nf2devi˚
 *
nf2
, *
¥ojDú
,

84 
möVîMaj‹
, 
möVîMö‹
, 
möVîRev
,

85 
maxVîMaj‹
, 
maxVîMö‹
, 
maxVîRev
);

86 c⁄° *
gëVúãxBôfûeEº
();

	@lib/common/nf2util_proxy_common.c

39 
	~"../ªg_lib/ªg_¥oxy.h
"

40 
	~"../comm⁄/ªg_deföes.h
"

41 
	~<°rög.h
>

43 
	#MD5_LEN
 4

	)

44 
	#MAX_STR_LEN
 1024

	)

45 
	#MAX_DEV_LEN
 16

	)

46 
	#MAX_VER_LEN
 32

	)

48 
¥ïDevi˚Info
(
nf2devi˚
 *
nf2
);

49 
ªadSå
(
nf2devi˚
 *
nf2
, 
ªgSèπ
, 
Àn
, *
d°
);

52 
	g˝ci_vîsi⁄
 = -1;

53 
	g˝ci_ªvisi⁄
 = -1;

54 
	gnf2_dev_id_moduÀ_vîsi⁄
 = -1;

55 
	gnf2devi˚_id
 = -1;

56 
	gnf2_vîsi⁄
 = -1;

57 
	gnf2_˝ci_vîsi⁄
 = -1;

58 
	gnf2_˝ci_ªvisi⁄
 = -1;

59 
	ghave_vîsi⁄_öfo
 = 0;

60 
	gvúãx_¥ogømmed
 = 0;

61 
	gnf2_¥oj_«me_v1
[
DEV_ID_PROJ_NAME_BYTE_LEN_V1
] = "";

62 
	gnf2_¥oj_dú
[
DEV_ID_PROJ_DIR_BYTE_LEN
] = "";

63 
	gnf2_¥oj_«me
[
DEV_ID_PROJ_NAME_BYTE_LEN
] = "";

64 
	gnf2_¥oj_desc
[
DEV_ID_PROJ_DESC_BYTE_LEN
] = "";

66 
	gnf2devi˚_öfo
[
DEVICE_INFO_STR_LEN
] = "";

67 
	gnf2_vîsi⁄_îr
[
DEVICE_INFO_STR_LEN
] = "";

69 
nf2devi˚
 
	g¥ev_dev
;

72 
	gnf2_devi˚_id
 = -1;

73 
	gnf2_ªvisi⁄
 = -1;

74 
	gnf2_devi˚_°r
[
DEVICE_STR_LEN
] = "";

78 
	$ªad_öfo
(
nf2devi˚
 *
nf2
)

80 
i
;

83 
	`ªadReg
(
nf2
, 
NF2_DEVICE_ID
, &
nf2_devi˚_id
);

84 
	`ªadReg
(
nf2
, 
NF2_REVISION
, &
nf2_ªvisi⁄
);

87 
i
 = 0; i < (
DEVICE_STR_LEN
 / 4) - 2; i++)

89 
	`ªadReg
(
nf2
, 
NF2_DEVICE_STR
 + 
i
 * 4, (*)(
nf2_devi˚_°r
 + i * 4));

92 *(*)(
nf2_devi˚_°r
 + 
i
 * 4Ë
	`¡ohl
(*(*)(nf2_device_str + i * 4));

94 
nf2_devi˚_°r
[
DEVICE_STR_LEN
 - 1] = '\0';

95 
	}
}

100 
	$nf2_ªad_öfo
(
nf2devi˚
 *
nf2
)

102 
i
;

103 
md5_good_v1
 = 1;

104 
md5_good_v2
 = 1;

105 
md5
[
MD5_LEN
];

106 
˝ci_id
;

107 
nf2_˝ci_id
;

110 
¥ev_dev
 = *
nf2
;

113 
	`ªadReg
(
nf2
, 
CPCI_ID_REG
, &
˝ci_id
);

114 
˝ci_vîsi⁄
 = 
˝ci_id
 & 0xffffff;

115 
˝ci_ªvisi⁄
 = 
˝ci_id
 >> 24;

116 
have_vîsi⁄_öfo
 = 1;

119 
vúãx_¥ogømmed
 = 
	`isVúãxProgømmed
(
nf2
);

122 
nf2_dev_id_moduÀ_vîsi⁄
 = -1;

123 
nf2devi˚_id
 = -1;

124 
nf2_vîsi⁄
 = -1;

125 
nf2_˝ci_vîsi⁄
 = -1;

126 
nf2_˝ci_ªvisi⁄
 = -1;

127 
nf2_¥oj_«me_v1
[0] = '\0';

128 
nf2_¥oj_dú
[0] = '\0';

129 
nf2_¥oj_«me
[0] = '\0';

130 
nf2_¥oj_desc
[0] = '\0';

133 
i
 = 0; i < 
MD5_LEN
; i++) {

134 
	`ªadReg
(
nf2
, 
DEV_ID_MD5_0_REG
 + 
i
 * 4, &
md5
[i]);

137 
md5_good_v1
 &
md5
[0] =
DEV_ID_MD5_VALUE_V1_0
;

138 
md5_good_v1
 &
md5
[1] =
DEV_ID_MD5_VALUE_V1_1
;

139 
md5_good_v1
 &
md5
[2] =
DEV_ID_MD5_VALUE_V1_2
;

140 
md5_good_v1
 &
md5
[3] =
DEV_ID_MD5_VALUE_V1_3
;

142 
md5_good_v2
 &
md5
[0] =
DEV_ID_MD5_VALUE_V2_0
;

143 
md5_good_v2
 &
md5
[1] =
DEV_ID_MD5_VALUE_V2_1
;

144 
md5_good_v2
 &
md5
[2] =
DEV_ID_MD5_VALUE_V2_2
;

145 
md5_good_v2
 &
md5
[3] =
DEV_ID_MD5_VALUE_V2_3
;

148 i‡(
md5_good_v1
 || 
md5_good_v2
) {

150 
	`ªadReg
(
nf2
, 
DEV_ID_DEVICE_ID_REG
, &
nf2devi˚_id
);

151 
	`ªadReg
(
nf2
, 
DEV_ID_VERSION_REG
, &
nf2_vîsi⁄
);

152 
	`ªadReg
(
nf2
, 
DEV_ID_CPCI_ID_REG
, &
nf2_˝ci_id
);

153 
nf2_˝ci_vîsi⁄
 = 
nf2_˝ci_id
 & 0xffffff;

154 
nf2_˝ci_ªvisi⁄
 = 
nf2_˝ci_id
 >> 24;

157 i‡(
md5_good_v1
) {

158 
nf2_dev_id_moduÀ_vîsi⁄
 = 1;

159 
	`ªadSå
(
nf2
, 
DEV_ID_PROJ_DIR_0_REG
, 
DEV_ID_PROJ_NAME_BYTE_LEN_V1
, 
nf2_¥oj_«me_v1
);

162 i‡(
md5_good_v2
) {

163 
nf2_dev_id_moduÀ_vîsi⁄
 = 2;

164 
	`ªadSå
(
nf2
, 
DEV_ID_PROJ_DIR_0_REG
, 
DEV_ID_PROJ_DIR_BYTE_LEN
, 
nf2_¥oj_dú
);

165 
	`ªadSå
(
nf2
, 
DEV_ID_PROJ_NAME_0_REG
, 
DEV_ID_PROJ_NAME_BYTE_LEN
, 
nf2_¥oj_«me
);

166 
	`ªadSå
(
nf2
, 
DEV_ID_PROJ_DESC_0_REG
, 
DEV_ID_PROJ_DESC_BYTE_LEN
, 
nf2_¥oj_desc
);

168 
	}
}

178 
	$ªadSå
(
nf2devi˚
 *
nf2
, 
ªgSèπ
, 
Àn
, *
d°
)

180 
i
;

183 
i
 = 0; i < 
Àn
 / 4; i++)

185 
	`ªadReg
(
nf2
, 
ªgSèπ
 + 
i
 * 4, (*)(
d°
 + i * 4));

188 *(*)(
d°
 + 
i
 * 4Ë
	`¡ohl
(*(*)(dst + i * 4));

192 
d°
[(
Àn
 / 4) * 4 - 1] = '\0';

194 
	}
}

199 
	$gëCPCIVîsi⁄
(
nf2devi˚
 *
nf2
) {

200 
	`¥ïDevi˚Info
(
nf2
);

202  
˝ci_vîsi⁄
;

203 
	}
}

208 
	$gëCPCIRevisi⁄
(
nf2devi˚
 *
nf2
) {

209 
	`¥ïDevi˚Info
(
nf2
);

211  
˝ci_ªvisi⁄
;

212 
	}
}

217 
	$gëDevi˚ID
(
nf2devi˚
 *
nf2
) {

218 
	`¥ïDevi˚Info
(
nf2
);

220  
nf2devi˚_id
;

221 
	}
}

226 
	$gëDevi˚CPCIVîsi⁄
(
nf2devi˚
 *
nf2
) {

227 
	`¥ïDevi˚Info
(
nf2
);

229  
nf2_˝ci_vîsi⁄
;

230 
	}
}

235 
	$gëDevi˚CPCIRevisi⁄
(
nf2devi˚
 *
nf2
) {

236 
	`¥ïDevi˚Info
(
nf2
);

238  
nf2_˝ci_ªvisi⁄
;

239 
	}
}

244 
	$gëDevi˚Maj‹
(
nf2devi˚
 *
nf2
) {

245 
	`¥ïDevi˚Info
(
nf2
);

247 i‡(
nf2_dev_id_moduÀ_vîsi⁄
 > 1)

248  (
nf2_vîsi⁄
 >> 16) & 0xff;

250  
nf2_vîsi⁄
;

251 
	}
}

256 
	$gëDevi˚Mö‹
(
nf2devi˚
 *
nf2
) {

257 
	`¥ïDevi˚Info
(
nf2
);

259 i‡(
nf2_dev_id_moduÀ_vîsi⁄
 > 1)

260  (
nf2_vîsi⁄
 >> 8) & 0xff;

263 
	}
}

268 
	$gëDevi˚Revisi⁄
(
nf2devi˚
 *
nf2
) {

269 
	`¥ïDevi˚Info
(
nf2
);

271 i‡(
nf2_dev_id_moduÀ_vîsi⁄
 > 1)

272  (
nf2_vîsi⁄
 >> 0) & 0xff;

275 
	}
}

280 
	$gëDevi˚IDModuÀVîsi⁄
(
nf2devi˚
 *
nf2
) {

281 
	`¥ïDevi˚Info
(
nf2
);

283  
nf2_dev_id_moduÀ_vîsi⁄
;

284 
	}
}

289 c⁄° * 
	$gëProjDú
(
nf2devi˚
 *
nf2
) {

290 
	`¥ïDevi˚Info
(
nf2
);

292 i‡(
nf2_dev_id_moduÀ_vîsi⁄
 == 2)

293  
nf2_¥oj_dú
;

295  
PROJ_UNKNOWN
;

296 
	}
}

301 c⁄° * 
	$gëProjName
(
nf2devi˚
 *
nf2
) {

302 
	`¥ïDevi˚Info
(
nf2
);

304 i‡(
nf2_dev_id_moduÀ_vîsi⁄
 == 2)

305  
nf2_¥oj_«me
;

306 i‡(
nf2_dev_id_moduÀ_vîsi⁄
 == 1)

307  
nf2_¥oj_«me_v1
;

309  
PROJ_UNKNOWN
;

310 
	}
}

315 c⁄° * 
	$gëProjDesc
(
nf2devi˚
 *
nf2
) {

316 
	`¥ïDevi˚Info
(
nf2
);

318 i‡(
nf2_dev_id_moduÀ_vîsi⁄
 == 2)

319  
nf2_¥oj_desc
;

321  
PROJ_UNKNOWN
;

322 
	}
}

327 c⁄° * 
	$gëDevi˚InfoSå
(
nf2devi˚
 *
nf2
)

329 
˝ciVîsi⁄Så
[
MAX_STR_LEN
];

330 
devi˚Vîsi⁄Så
[
MAX_STR_LEN
];

332 
	`¥ïDevi˚Info
(
nf2
);

334 
	`¢¥ötf
(
˝ciVîsi⁄Så
, 
MAX_STR_LEN
,

338 
	`gëCPCIVîsi⁄
(
nf2
), 
	`gëCPCIRevisi⁄
(nf2));

340 i‡(
vúãx_¥ogømmed
) {

341 i‡(
	`gëDevi˚IDModuÀVîsi⁄
(
nf2
) != -1) {

342 i‡(
	`gëDevi˚IDModuÀVîsi⁄
(
nf2
) == 2) {

343 
	`¢¥ötf
(
devi˚Vîsi⁄Så
, 
MAX_STR_LEN
,

353 
	`gëProjDú
(
nf2
),

354 
	`gëProjName
(
nf2
),

355 
	`gëProjDesc
(
nf2
),

356 
	`gëDevi˚ID
(
nf2
),

357 
	`gëDevi˚Maj‹
(
nf2
), 
	`gëDevi˚Mö‹
“f2), 
	`gëDevi˚Revisi⁄
(nf2),

358 
	`gëDevi˚CPCIVîsi⁄
(
nf2
), 
	`gëDevi˚CPCIRevisi⁄
(nf2)

361 i‡(
	`gëDevi˚IDModuÀVîsi⁄
(
nf2
) == 1) {

362 
	`¢¥ötf
(
devi˚Vîsi⁄Så
, 
MAX_STR_LEN
,

370 
	`gëProjName
(
nf2
),

371 
	`gëDevi˚ID
(
nf2
),

372 
	`gëDevi˚Maj‹
(
nf2
),

373 
	`gëDevi˚CPCIVîsi⁄
(
nf2
), 
	`gëDevi˚CPCIRevisi⁄
(nf2)

377 
	`¢¥ötf
(
devi˚Vîsi⁄Så
, 
MAX_STR_LEN
,

379 
	`gëDevi˚IDModuÀVîsi⁄
(
nf2
));

383 
	`¢¥ötf
(
devi˚Vîsi⁄Så
, 
MAX_STR_LEN
,

390 
	`¢¥ötf
(
devi˚Vîsi⁄Så
, 
MAX_STR_LEN
,

396 
	`¢¥ötf
(
nf2devi˚_öfo
, 
DEVICE_INFO_STR_LEN
, "%s\n%s\n",

397 
˝ciVîsi⁄Så
,

398 
devi˚Vîsi⁄Så
);

400  
nf2devi˚_öfo
;

401 
	}
}

406 
	$isVúãxProgømmed
(
nf2devi˚
 *
nf2
)

408 
¥ogSètus
;

410 
	`ªadReg
(
nf2
, 
CPCI_REPROG_STATUS_REG
, &
¥ogSètus
);

411  (
¥ogSètus
 & 0x100) != 0;

412 
	}
}

417 
	$checkVúãxBôfûe
(
nf2devi˚
 *
nf2
, *
¥ojDú
,

418 
möVîMaj‹
, 
möVîMö‹
, 
möVîRev
,

419 
maxVîMaj‹
, 
maxVîMö‹
, 
maxVîRev
) {

421 
möVî
, 
maxVî
, 
vúãxVî
;

424 
	`¥ïDevi˚Info
(
nf2
);

427 i‡(!
vúãx_¥ogømmed
) {

428 
	`•rötf
(
nf2_vîsi⁄_îr
, "Error: Virtex isÇotÖrogrammed");

433 
möVî
 = 0;

434 i‡(
möVîMaj‹
 !
VERSION_ANY
) {

435 
möVî
 +
möVîMaj‹
;

437 
möVî
 <<= 8;

438 i‡(
möVîMö‹
 !
VERSION_ANY
) {

439 
möVî
 +
möVîMö‹
;

441 
möVî
 <<= 8;

442 i‡(
möVîRev
 !
VERSION_ANY
) {

443 
möVî
 +
möVîRev
;

446 
maxVî
 = 0;

447 
maxVî
 +(
maxVîMaj‹
 !
VERSION_ANY
) ? maxVerMajor : 255;

448 
maxVî
 <<= 8;

449 
maxVî
 +(
maxVîMö‹
 !
VERSION_ANY
) ? maxVerMinor : 255;

450 
maxVî
 <<= 8;

451 
maxVî
 +(
maxVîRev
 !
VERSION_ANY
) ? maxVerRev : 255;

453 
vúãxVî
 = (
	`gëDevi˚Maj‹
(
nf2
) << 16) |

454 (
	`gëDevi˚Mö‹
(
nf2
) << 8) |

455 
	`gëDevi˚Revisi⁄
(
nf2
);

458 c⁄° *
vúãxProjDú
;

459 c⁄° *
vúãxProjName
;

460 i‡(
nf2_dev_id_moduÀ_vîsi⁄
 >= 2) {

461 
vúãxProjDú
 = 
	`gëProjDú
(
nf2
);

462 
vúãxProjName
 = 
	`gëProjName
(
nf2
);

465 
vúãxProjDú
 = 
	`gëProjName
(
nf2
);

466 
vúãxProjName
 = 
PROJ_UNKNOWN
;

469 i‡(
	`°rcmp
(
vúãxProjDú
, 
¥ojDú
) != 0) {

470 
	`•rötf
(
nf2_vîsi⁄_îr
, "Error: Incorrect bitfileÜoaded. Found '%s' (%s),Éxpecting: '%s'",

471 
vúãxProjDú
, 
vúãxProjName
, 
¥ojDú
);

476 i‡(
vúãxVî
 < 
möVî
 || vúãxVî > 
maxVî
) {

478 
hasMö
 = (
möVîMaj‹
 !
VERSION_ANY
) ||

479 (
möVîMö‹
 !
VERSION_ANY
) ||

480 (
möVîRev
 !
VERSION_ANY
);

481 
hasMax
 = (
maxVîMaj‹
 !
VERSION_ANY
) ||

482 (
maxVîMö‹
 !
VERSION_ANY
) ||

483 (
maxVîRev
 !
VERSION_ANY
);

484 
vîMaj‹EquÆ
 = ((
möVîMaj‹
 !
VERSION_ANY
) ? minVerMajor : -1) ==

485 ((
maxVîMaj‹
 !
VERSION_ANY
) ? maxVerMajor : -1);

486 
vîMö‹EquÆ
 = ((
möVîMö‹
 !
VERSION_ANY
) ? minVerMinor : -1) ==

487 ((
maxVîMö‹
 !
VERSION_ANY
) ? maxVerMinor : -1);

488 
vîRevEquÆ
 = ((
möVîRev
 !
VERSION_ANY
) ? minVerRev : -1) ==

489 ((
maxVîRev
 !
VERSION_ANY
) ? maxVerRev : -1);

490 
möMaxEquÆ
 = 
vîMaj‹EquÆ
 && 
vîMö‹EquÆ
 && 
vîRevEquÆ
;

493 
möSå
[
MAX_VER_LEN
];

494 i‡(
möVîRev
 !
VERSION_ANY
)

495 
	`•rötf
(
möSå
, "%d.%d.%d", 
möVîMaj‹
, 
möVîMö‹
, 
möVîRev
);

496 i‡(
möVîMö‹
 !
VERSION_ANY
)

497 
	`•rötf
(
möSå
, "%d.%d.x", 
möVîMaj‹
, 
möVîMö‹
);

498 i‡(
möVîMaj‹
 !
VERSION_ANY
)

499 
	`•rötf
(
möSå
, "%d.x.x", 
möVîMaj‹
);

501 
	`•rötf
(
möSå
, "x.x.x");

503 
maxSå
[
MAX_VER_LEN
];

504 i‡(
maxVîRev
 !
VERSION_ANY
)

505 
	`•rötf
(
maxSå
, "%d.%d.%d", 
maxVîMaj‹
, 
maxVîMö‹
, 
maxVîRev
);

506 i‡(
maxVîMö‹
 !
VERSION_ANY
)

507 
	`•rötf
(
maxSå
, "%d.%d.x", 
maxVîMaj‹
, 
maxVîMö‹
);

508 i‡(
maxVîMaj‹
 !
VERSION_ANY
)

509 
	`•rötf
(
maxSå
, "%d.x.x", 
maxVîMaj‹
);

511 
	`•rötf
(
maxSå
, "x.x.x");

513 
vúãxVîSå
[
MAX_VER_LEN
];

514 
	`•rötf
(
vúãxVîSå
, "%d.%d.%d",

515 
	`gëDevi˚Maj‹
(
nf2
),

516 
	`gëDevi˚Mö‹
(
nf2
),

517 
	`gëDevi˚Revisi⁄
(
nf2
));

519 i‡(
möMaxEquÆ
)

520 
	`•rötf
(
nf2_vîsi⁄_îr
,

522 
¥ojDú
, 
vúãxProjName
, 
möSå
, 
vúãxVîSå
);

523 i‡(
hasMö
 && 
hasMax
)

524 
	`•rötf
(
nf2_vîsi⁄_îr
,

526 
¥ojDú
, 
vúãxProjName
, 
möSå
, 
maxSå
, 
vúãxVîSå
);

527 i‡(
hasMö
)

528 
	`•rötf
(
nf2_vîsi⁄_îr
,

530 
¥ojDú
, 
vúãxProjName
, 
möSå
, 
vúãxVîSå
);

532 
	`•rötf
(
nf2_vîsi⁄_îr
,

534 
¥ojDú
, 
vúãxProjName
, 
maxSå
, 
vúãxVîSå
);

538 
	`•rötf
(
nf2_vîsi⁄_îr
, "GOOD");

540 
	}
}

546 c⁄° *
	$gëVúãxBôfûeEº
() {

547  
nf2_vîsi⁄_îr
;

548 
	}
}

553 
	$¥ïDevi˚Info
(
nf2devi˚
 *
nf2
) {

554 i‡(!
have_vîsi⁄_öfo
 || 
¥ev_dev
.
fd
 !
nf2
->fd) {

555 
	`nf2_ªad_öfo
(
nf2
);

557 
	}
}

562 
	$¥ötHñlo
 (
nf2devi˚
 *
nf2
, *
vÆ
)

564 
	`¥ötf
 ("Hñlÿw‹ld. Name=%†vÆ=%d\n", 
nf2
->
devi˚_«me
, *
vÆ
);

565 *
vÆ
 = 10;

566 
	}
}

	@lib/common/nft_struct.h

1 
	snf2devi˚
 {

2 *
	mdevi˚_«me
;

3 
	mfd
;

4 
	m√t_iÁ˚
;

5 
	m£rvî_ù_addr
[
MAX_IPADDR_LEN
];

6 
	m£rvî_p‹t_num
;

	@lib/common/reg_defines.h

43 #i‚de‡
_REG_DEFINES_


44 
	#_REG_DEFINES_


	)

48 
	#CPCI_ID_REG
 0x0000000

	)

49 
	#CPCI_BOARD_ID_REG
 0x0000004

	)

50 
	#CPCI_CONTROL_REG
 0x0000008

	)

51 
	#CPCI_RESET_REG
 0x000000c

	)

52 
	#CPCI_ERROR_REG
 0x0000010

	)

54 
	#CPCI_DUMMY_REG
 0x0000020

	)

56 
	#CPCI_INTERRUPT_MASK_REG
 0x0000040

	)

57 
	#CPCI_INTERRUPT_STATUS_REG
 0x0000044

	)

59 
	#CPCI_CNET_CLK_SEL_REG
 0x0000050

	)

61 
	#CPCI_REPROG_DATA_REG
 0x0000100

	)

62 
	#CPCI_REPROG_STATUS_REG
 0x0000104

	)

63 
	#CPCI_REPROG_CTRL_REG
 0x0000108

	)

65 
	#CPCI_DMA_ADDR_I_REG
 0x0000140

	)

66 
	#CPCI_DMA_ADDR_E_REG
 0x0000144

	)

67 
	#CPCI_DMA_SIZE_I_REG
 0x0000148

	)

68 
	#CPCI_DMA_SIZE_E_REG
 0x000014c

	)

69 
	#CPCI_DMA_CTRL_I_REG
 0x0000150

	)

70 
	#CPCI_DMA_CTRL_E_REG
 0x0000154

	)

71 
	#CPCI_DMA_XFER_TIME_REG
 0x0000180

	)

72 
	#CPCI_DMA_RETRIES_REG
 0x0000184

	)

74 
	#CPCI_CNET_READ_TIME_REG
 0x0000188

	)

76 
	#CPCI_DMA_INGRESS_PKT_CNT_REG
 0x0000400

	)

77 
	#CPCI_DMA_EGRESS_PKT_CNT_REG
 0x0000404

	)

78 
	#CPCI_CPCI_REG_READ_CNT_REG
 0x0000408

	)

79 
	#CPCI_CPCI_REG_WRITE_CNT_REG
 0x000040c

	)

80 
	#CPCI_CNET_REG_READ_CNT_REG
 0x0000410

	)

81 
	#CPCI_CNET_REG_WRITE_CNT_REG
 0x0000414

	)

83 
	#CPCI_CLOCK_CHECK_N_CLK_REG
 0x0000500

	)

84 
	#CPCI_CLOCK_CHECK_P_MAX_REG
 0x0000504

	)

85 
	#CPCI_CLOCK_CHECK_N_EXP_REG
 0x0000508

	)

86 
	#CPCI_PCI_CLK_COUNTER_REG
 0x0000510

	)

87 
	#CPCI_CPCI_RESET_COUNTER_REG
 0x0000520

	)

89 
	#CPCI_DMA_XFER_TIME_DEFAULT
 0x00000Á0

	)

90 
	#CPCI_DMA_RETRIES_DEFAULT
 0xffff

	)

91 
	#CPCI_CNET_READ_TIME_DEFAULT
 0x00000Á0

	)

94 
	#TX_QUEUE_DISABLE_BIT_NUM
 0

	)

95 
	#RX_QUEUE_DISABLE_BIT_NUM
 1

	)

96 
	#RESET_MAC_BIT_NUM
 2

	)

97 
	#MAC_DISABLE_TX_BIT_NUM
 3

	)

98 
	#MAC_DISABLE_RX_BIT_NUM
 4

	)

99 
	#MAC_DIS_JUMBO_TX_BIT_NUM
 5

	)

100 
	#MAC_DIS_JUMBO_RX_BIT_NUM
 6

	)

101 
	#MAC_DIS_CRC_CHECK
 7

	)

102 
	#MAC_DIS_CRC_GEN
 8

	)

110 
	#DEV_ID_NUM_REGS
 64

	)

113 
	#DEV_ID_NON_STR_REGS
 7

	)

116 
	#DEV_ID_MD5SUM_LENGTH
 128

	)

119 
	#DEV_ID_PROJ_DIR_WORD_LEN
 16

	)

122 
	#DEV_ID_PROJ_DIR_BYTE_LEN
 64

	)

125 
	#DEV_ID_PROJ_DIR_BIT_LEN
 512

	)

128 
	#DEV_ID_PROJ_NAME_WORD_LEN
 16

	)

131 
	#DEV_ID_PROJ_NAME_BYTE_LEN
 64

	)

134 
	#DEV_ID_PROJ_NAME_BIT_LEN
 512

	)

137 
	#DEV_ID_PROJ_DESC_WORD_LEN
 25

	)

140 
	#DEV_ID_PROJ_DESC_BYTE_LEN
 100

	)

143 
	#DEV_ID_PROJ_DESC_BIT_LEN
 800

	)

146 
	#DEV_ID_MD5_VALUE_V1
 0x4071736d8a603d2b4d55f62989a73c95

	)

147 
	#DEV_ID_MD5_VALUE_V1_0
 0x4071736d

	)

148 
	#DEV_ID_MD5_VALUE_V1_1
 0x8a603d2b

	)

149 
	#DEV_ID_MD5_VALUE_V1_2
 0x4d55f629

	)

150 
	#DEV_ID_MD5_VALUE_V1_3
 0x89a73c95

	)

153 
	#DEV_ID_MD5_VALUE_V2
 0x5e461f„439725c9279a22a1855f6c53

	)

154 
	#DEV_ID_MD5_VALUE_V2_0
 0x5e461f„

	)

155 
	#DEV_ID_MD5_VALUE_V2_1
 0x439725c9

	)

156 
	#DEV_ID_MD5_VALUE_V2_2
 0x279a22a1

	)

157 
	#DEV_ID_MD5_VALUE_V2_3
 0x855f6c53

	)

160 
	#DEV_ID_NUM_REGS_V1
 64

	)

163 
	#DEV_ID_NON_STR_REGS_V1
 7

	)

166 
	#DEV_ID_PROJ_NAME_WORD_LEN_V1
 25

	)

169 
	#DEV_ID_PROJ_NAME_BYTE_LEN_V1
 100

	)

172 
	#DEV_ID_PROJ_NAME_BIT_LEN_V1
 800

	)

178 
	#DEV_ID_MD5_0_REG
 0x0400000

	)

179 
	#DEV_ID_MD5_1_REG
 0x0400004

	)

180 
	#DEV_ID_MD5_2_REG
 0x0400008

	)

181 
	#DEV_ID_MD5_3_REG
 0x040000c

	)

182 
	#DEV_ID_DEVICE_ID_REG
 0x0400010

	)

183 
	#DEV_ID_VERSION_REG
 0x0400014

	)

184 
	#DEV_ID_CPCI_ID_REG
 0x0400018

	)

185 
	#DEV_ID_PROJ_DIR_0_REG
 0x040001c

	)

186 
	#DEV_ID_PROJ_DIR_1_REG
 0x0400020

	)

187 
	#DEV_ID_PROJ_DIR_2_REG
 0x0400024

	)

188 
	#DEV_ID_PROJ_DIR_3_REG
 0x0400028

	)

189 
	#DEV_ID_PROJ_DIR_4_REG
 0x040002c

	)

190 
	#DEV_ID_PROJ_DIR_5_REG
 0x0400030

	)

191 
	#DEV_ID_PROJ_DIR_6_REG
 0x0400034

	)

192 
	#DEV_ID_PROJ_DIR_7_REG
 0x0400038

	)

193 
	#DEV_ID_PROJ_DIR_8_REG
 0x040003c

	)

194 
	#DEV_ID_PROJ_DIR_9_REG
 0x0400040

	)

195 
	#DEV_ID_PROJ_DIR_10_REG
 0x0400044

	)

196 
	#DEV_ID_PROJ_DIR_11_REG
 0x0400048

	)

197 
	#DEV_ID_PROJ_DIR_12_REG
 0x040004c

	)

198 
	#DEV_ID_PROJ_DIR_13_REG
 0x0400050

	)

199 
	#DEV_ID_PROJ_DIR_14_REG
 0x0400054

	)

200 
	#DEV_ID_PROJ_DIR_15_REG
 0x0400058

	)

201 
	#DEV_ID_PROJ_NAME_0_REG
 0x040005c

	)

202 
	#DEV_ID_PROJ_NAME_1_REG
 0x0400060

	)

203 
	#DEV_ID_PROJ_NAME_2_REG
 0x0400064

	)

204 
	#DEV_ID_PROJ_NAME_3_REG
 0x0400068

	)

205 
	#DEV_ID_PROJ_NAME_4_REG
 0x040006c

	)

206 
	#DEV_ID_PROJ_NAME_5_REG
 0x0400070

	)

207 
	#DEV_ID_PROJ_NAME_6_REG
 0x0400074

	)

208 
	#DEV_ID_PROJ_NAME_7_REG
 0x0400078

	)

209 
	#DEV_ID_PROJ_NAME_8_REG
 0x040007c

	)

210 
	#DEV_ID_PROJ_NAME_9_REG
 0x0400080

	)

211 
	#DEV_ID_PROJ_NAME_10_REG
 0x0400084

	)

212 
	#DEV_ID_PROJ_NAME_11_REG
 0x0400088

	)

213 
	#DEV_ID_PROJ_NAME_12_REG
 0x040008c

	)

214 
	#DEV_ID_PROJ_NAME_13_REG
 0x0400090

	)

215 
	#DEV_ID_PROJ_NAME_14_REG
 0x0400094

	)

216 
	#DEV_ID_PROJ_NAME_15_REG
 0x0400098

	)

217 
	#DEV_ID_PROJ_DESC_0_REG
 0x040009c

	)

218 
	#DEV_ID_PROJ_DESC_1_REG
 0x04000a0

	)

219 
	#DEV_ID_PROJ_DESC_2_REG
 0x04000a4

	)

220 
	#DEV_ID_PROJ_DESC_3_REG
 0x04000a8

	)

221 
	#DEV_ID_PROJ_DESC_4_REG
 0x04000ac

	)

222 
	#DEV_ID_PROJ_DESC_5_REG
 0x04000b0

	)

223 
	#DEV_ID_PROJ_DESC_6_REG
 0x04000b4

	)

224 
	#DEV_ID_PROJ_DESC_7_REG
 0x04000b8

	)

225 
	#DEV_ID_PROJ_DESC_8_REG
 0x04000bc

	)

226 
	#DEV_ID_PROJ_DESC_9_REG
 0x04000c0

	)

227 
	#DEV_ID_PROJ_DESC_10_REG
 0x04000c4

	)

228 
	#DEV_ID_PROJ_DESC_11_REG
 0x04000c8

	)

229 
	#DEV_ID_PROJ_DESC_12_REG
 0x04000cc

	)

230 
	#DEV_ID_PROJ_DESC_13_REG
 0x04000d0

	)

231 
	#DEV_ID_PROJ_DESC_14_REG
 0x04000d4

	)

232 
	#DEV_ID_PROJ_DESC_15_REG
 0x04000d8

	)

233 
	#DEV_ID_PROJ_DESC_16_REG
 0x04000dc

	)

234 
	#DEV_ID_PROJ_DESC_17_REG
 0x04000e0

	)

235 
	#DEV_ID_PROJ_DESC_18_REG
 0x04000e4

	)

236 
	#DEV_ID_PROJ_DESC_19_REG
 0x04000e8

	)

237 
	#DEV_ID_PROJ_DESC_20_REG
 0x04000ec

	)

238 
	#DEV_ID_PROJ_DESC_21_REG
 0x04000f0

	)

239 
	#DEV_ID_PROJ_DESC_22_REG
 0x04000f4

	)

240 
	#DEV_ID_PROJ_DESC_23_REG
 0x04000f8

	)

241 
	#DEV_ID_PROJ_DESC_24_REG
 0x04000fc

	)

248 
	#SRAM_BASE_ADDR_REG
 0x1000000

	)

249 
	#SRAM_ADDR_WIDTH
 19

	)

251 
	#MAC_GRP_0_CONTROL_REG
 0x0600000

	)

252 
	#RX_QUEUE_0_NUM_PKTS_STORED_REG
 0x0600004

	)

253 
	#RX_QUEUE_0_NUM_PKTS_DROPPED_FULL_REG
 0x0600008

	)

254 
	#RX_QUEUE_0_NUM_PKTS_DROPPED_BAD_REG
 0x060000c

	)

255 
	#RX_QUEUE_0_NUM_WORDS_PUSHED_REG
 0x0600010

	)

256 
	#RX_QUEUE_0_NUM_BYTES_PUSHED_REG
 0x0600014

	)

257 
	#RX_QUEUE_0_NUM_PKTS_DEQUEUED_REG
 0x060002c

	)

258 
	#RX_QUEUE_0_NUM_PKTS_IN_QUEUE_REG
 0x0600030

	)

259 
	#TX_QUEUE_0_NUM_PKTS_IN_QUEUE_REG
 0x0600018

	)

260 
	#TX_QUEUE_0_NUM_PKTS_SENT_REG
 0x060001c

	)

261 
	#TX_QUEUE_0_NUM_WORDS_PUSHED_REG
 0x0600020

	)

262 
	#TX_QUEUE_0_NUM_BYTES_PUSHED_REG
 0x0600024

	)

263 
	#TX_QUEUE_0_NUM_PKTS_ENQUEUED_REG
 0x0600028

	)

265 
	#MAC_GRP_1_CONTROL_REG
 0x0640000

	)

266 
	#RX_QUEUE_1_NUM_PKTS_STORED_REG
 0x0640004

	)

267 
	#RX_QUEUE_1_NUM_PKTS_DROPPED_FULL_REG
 0x0640008

	)

268 
	#RX_QUEUE_1_NUM_PKTS_DROPPED_BAD_REG
 0x064000c

	)

269 
	#RX_QUEUE_1_NUM_WORDS_PUSHED_REG
 0x0640010

	)

270 
	#RX_QUEUE_1_NUM_BYTES_PUSHED_REG
 0x0640014

	)

271 
	#RX_QUEUE_1_NUM_PKTS_DEQUEUED_REG
 0x064002c

	)

272 
	#RX_QUEUE_1_NUM_PKTS_IN_QUEUE_REG
 0x0640030

	)

273 
	#TX_QUEUE_1_NUM_PKTS_IN_QUEUE_REG
 0x0640018

	)

274 
	#TX_QUEUE_1_NUM_PKTS_SENT_REG
 0x064001c

	)

275 
	#TX_QUEUE_1_NUM_WORDS_PUSHED_REG
 0x0640020

	)

276 
	#TX_QUEUE_1_NUM_BYTES_PUSHED_REG
 0x0640024

	)

277 
	#TX_QUEUE_1_NUM_PKTS_ENQUEUED_REG
 0x0640028

	)

279 
	#MAC_GRP_2_CONTROL_REG
 0x0680000

	)

280 
	#RX_QUEUE_2_NUM_PKTS_STORED_REG
 0x0680004

	)

281 
	#RX_QUEUE_2_NUM_PKTS_DROPPED_FULL_REG
 0x0680008

	)

282 
	#RX_QUEUE_2_NUM_PKTS_DROPPED_BAD_REG
 0x068000c

	)

283 
	#RX_QUEUE_2_NUM_WORDS_PUSHED_REG
 0x0680010

	)

284 
	#RX_QUEUE_2_NUM_BYTES_PUSHED_REG
 0x0680014

	)

285 
	#RX_QUEUE_2_NUM_PKTS_DEQUEUED_REG
 0x068002c

	)

286 
	#RX_QUEUE_2_NUM_PKTS_IN_QUEUE_REG
 0x0680030

	)

287 
	#TX_QUEUE_2_NUM_PKTS_IN_QUEUE_REG
 0x0680018

	)

288 
	#TX_QUEUE_2_NUM_PKTS_SENT_REG
 0x068001c

	)

289 
	#TX_QUEUE_2_NUM_WORDS_PUSHED_REG
 0x0680020

	)

290 
	#TX_QUEUE_2_NUM_BYTES_PUSHED_REG
 0x0680024

	)

291 
	#TX_QUEUE_2_NUM_PKTS_ENQUEUED_REG
 0x0680028

	)

293 
	#MAC_GRP_3_CONTROL_REG
 0x06c0000

	)

294 
	#RX_QUEUE_3_NUM_PKTS_STORED_REG
 0x06c0004

	)

295 
	#RX_QUEUE_3_NUM_PKTS_DROPPED_FULL_REG
 0x06c0008

	)

296 
	#RX_QUEUE_3_NUM_PKTS_DROPPED_BAD_REG
 0x06c000c

	)

297 
	#RX_QUEUE_3_NUM_WORDS_PUSHED_REG
 0x06c0010

	)

298 
	#RX_QUEUE_3_NUM_BYTES_PUSHED_REG
 0x06c0014

	)

299 
	#RX_QUEUE_3_NUM_PKTS_DEQUEUED_REG
 0x06c002c

	)

300 
	#RX_QUEUE_3_NUM_PKTS_IN_QUEUE_REG
 0x06c0030

	)

301 
	#TX_QUEUE_3_NUM_PKTS_IN_QUEUE_REG
 0x06c0018

	)

302 
	#TX_QUEUE_3_NUM_PKTS_SENT_REG
 0x06c001c

	)

303 
	#TX_QUEUE_3_NUM_WORDS_PUSHED_REG
 0x06c0020

	)

304 
	#TX_QUEUE_3_NUM_BYTES_PUSHED_REG
 0x06c0024

	)

305 
	#TX_QUEUE_3_NUM_PKTS_ENQUEUED_REG
 0x06c0028

	)

307 
	#CPU_REG_Q_0_WR_DATA_WORD_REG
 0x0700000

	)

308 
	#CPU_REG_Q_0_WR_CTRL_WORD_REG
 0x0700004

	)

309 
	#CPU_REG_Q_0_WR_NUM_WORDS_LEFT_REG
 0x0700008

	)

310 
	#CPU_REG_Q_0_WR_NUM_PKTS_IN_Q_REG
 0x070000c

	)

311 
	#CPU_REG_Q_0_RD_DATA_WORD_REG
 0x0700010

	)

312 
	#CPU_REG_Q_0_RD_CTRL_WORD_REG
 0x0700014

	)

313 
	#CPU_REG_Q_0_RD_NUM_WORDS_AVAIL_REG
 0x0700018

	)

314 
	#CPU_REG_Q_0_RD_NUM_PKTS_IN_Q_REG
 0x070001c

	)

315 
	#CPU_REG_Q_0_RX_NUM_PKTS_RCVD_REG
 0x0700020

	)

316 
	#CPU_REG_Q_0_TX_NUM_PKTS_SENT_REG
 0x0700024

	)

317 
	#CPU_REG_Q_0_RX_NUM_WORDS_RCVD_REG
 0x0700028

	)

318 
	#CPU_REG_Q_0_TX_NUM_WORDS_SENT_REG
 0x070002c

	)

319 
	#CPU_REG_Q_0_RX_NUM_BYTES_RCVD_REG
 0x0700030

	)

320 
	#CPU_REG_Q_0_TX_NUM_BYTES_SENT_REG
 0x0700034

	)

322 
	#CPU_REG_Q_1_WR_DATA_WORD_REG
 0x0740000

	)

323 
	#CPU_REG_Q_1_WR_CTRL_WORD_REG
 0x0740004

	)

324 
	#CPU_REG_Q_1_WR_NUM_WORDS_LEFT_REG
 0x0740008

	)

325 
	#CPU_REG_Q_1_WR_NUM_PKTS_IN_Q_REG
 0x074000c

	)

326 
	#CPU_REG_Q_1_RD_DATA_WORD_REG
 0x0740010

	)

327 
	#CPU_REG_Q_1_RD_CTRL_WORD_REG
 0x0740014

	)

328 
	#CPU_REG_Q_1_RD_NUM_WORDS_AVAIL_REG
 0x0740018

	)

329 
	#CPU_REG_Q_1_RD_NUM_PKTS_IN_Q_REG
 0x074001c

	)

330 
	#CPU_REG_Q_1_RX_NUM_PKTS_RCVD_REG
 0x0740020

	)

331 
	#CPU_REG_Q_1_TX_NUM_PKTS_SENT_REG
 0x0740024

	)

332 
	#CPU_REG_Q_1_RX_NUM_WORDS_RCVD_REG
 0x0740028

	)

333 
	#CPU_REG_Q_1_TX_NUM_WORDS_SENT_REG
 0x074002c

	)

334 
	#CPU_REG_Q_1_RX_NUM_BYTES_RCVD_REG
 0x0740030

	)

335 
	#CPU_REG_Q_1_TX_NUM_BYTES_SENT_REG
 0x0740034

	)

337 
	#CPU_REG_Q_2_WR_DATA_WORD_REG
 0x0780000

	)

338 
	#CPU_REG_Q_2_WR_CTRL_WORD_REG
 0x0780004

	)

339 
	#CPU_REG_Q_2_WR_NUM_WORDS_LEFT_REG
 0x0780008

	)

340 
	#CPU_REG_Q_2_WR_NUM_PKTS_IN_Q_REG
 0x078000c

	)

341 
	#CPU_REG_Q_2_RD_DATA_WORD_REG
 0x0780010

	)

342 
	#CPU_REG_Q_2_RD_CTRL_WORD_REG
 0x0780014

	)

343 
	#CPU_REG_Q_2_RD_NUM_WORDS_AVAIL_REG
 0x0780018

	)

344 
	#CPU_REG_Q_2_RD_NUM_PKTS_IN_Q_REG
 0x078001c

	)

345 
	#CPU_REG_Q_2_RX_NUM_PKTS_RCVD_REG
 0x0780020

	)

346 
	#CPU_REG_Q_2_TX_NUM_PKTS_SENT_REG
 0x0780024

	)

347 
	#CPU_REG_Q_2_RX_NUM_WORDS_RCVD_REG
 0x0780028

	)

348 
	#CPU_REG_Q_2_TX_NUM_WORDS_SENT_REG
 0x078002c

	)

349 
	#CPU_REG_Q_2_RX_NUM_BYTES_RCVD_REG
 0x0780030

	)

350 
	#CPU_REG_Q_2_TX_NUM_BYTES_SENT_REG
 0x0780034

	)

352 
	#CPU_REG_Q_3_WR_DATA_WORD_REG
 0x07c0000

	)

353 
	#CPU_REG_Q_3_WR_CTRL_WORD_REG
 0x07c0004

	)

354 
	#CPU_REG_Q_3_WR_NUM_WORDS_LEFT_REG
 0x07c0008

	)

355 
	#CPU_REG_Q_3_WR_NUM_PKTS_IN_Q_REG
 0x07c000c

	)

356 
	#CPU_REG_Q_3_RD_DATA_WORD_REG
 0x07c0010

	)

357 
	#CPU_REG_Q_3_RD_CTRL_WORD_REG
 0x07c0014

	)

358 
	#CPU_REG_Q_3_RD_NUM_WORDS_AVAIL_REG
 0x07c0018

	)

359 
	#CPU_REG_Q_3_RD_NUM_PKTS_IN_Q_REG
 0x07c001c

	)

360 
	#CPU_REG_Q_3_RX_NUM_PKTS_RCVD_REG
 0x07c0020

	)

361 
	#CPU_REG_Q_3_TX_NUM_PKTS_SENT_REG
 0x07c0024

	)

362 
	#CPU_REG_Q_3_RX_NUM_WORDS_RCVD_REG
 0x07c0028

	)

363 
	#CPU_REG_Q_3_TX_NUM_WORDS_SENT_REG
 0x07c002c

	)

364 
	#CPU_REG_Q_3_RX_NUM_BYTES_RCVD_REG
 0x07c0030

	)

365 
	#CPU_REG_Q_3_TX_NUM_BYTES_SENT_REG
 0x07c0034

	)

367 
	#CLK_SYN_0_COUNTER_RESET
 0x0500028

	)

368 
	#CLK_SYN_0_TX_LO_REG
 0x050002c

	)

369 
	#CLK_SYN_0_TX_HI_REG
 0x0500030

	)

370 
	#CLK_SYN_0_RX_LO_REG
 0x0500034

	)

371 
	#CLK_SYN_0_RX_HI_REG
 0x0500038

	)

372 
	#CLK_SYN_1_COUNTER_RESET
 0x050003c

	)

373 
	#CLK_SYN_1_TX_LO_REG
 0x0500040

	)

374 
	#CLK_SYN_1_TX_HI_REG
 0x0500044

	)

375 
	#CLK_SYN_1_RX_LO_REG
 0x0500048

	)

376 
	#CLK_SYN_1_RX_HI_REG
 0x050004c

	)

377 
	#CLK_SYN_2_COUNTER_RESET
 0x0500050

	)

378 
	#CLK_SYN_2_TX_LO_REG
 0x0500054

	)

379 
	#CLK_SYN_2_TX_HI_REG
 0x0500058

	)

380 
	#CLK_SYN_2_RX_LO_REG
 0x050005c

	)

381 
	#CLK_SYN_2_RX_HI_REG
 0x0500060

	)

382 
	#CLK_SYN_3_COUNTER_RESET
 0x0500064

	)

383 
	#CLK_SYN_3_TX_LO_REG
 0x0500068

	)

384 
	#CLK_SYN_3_TX_HI_REG
 0x050006c

	)

385 
	#CLK_SYN_3_RX_LO_REG
 0x0500070

	)

386 
	#CLK_SYN_3_RX_HI_REG
 0x0500074

	)

387 
	#PTP_VALID_RX_REG
 0x0500078

	)

388 
	#PTP_VALID_TX_REG
 0x050007c

	)

389 
	#PTP_ENABLE_MASK_RX_REG
 0x0500080

	)

390 
	#PTP_ENABLE_MASK_TX_REG
 0x0500084

	)

391 
	#PTP_MASK_RX_REG
 0x0500088

	)

392 
	#PTP_MASK_TX_REG
 0x050008c

	)

393 
	#DMA_TX_QUE_0_REG
 0x0480000

	)

394 
	#DMA_TX_QUE_0_LAST_1_BYTE_REG
 0x0480004

	)

395 
	#DMA_TX_QUE_0_LAST_2_BYTE_REG
 0x0480008

	)

396 
	#DMA_TX_QUE_0_LAST_3_BYTE_REG
 0x048000c

	)

397 
	#DMA_TX_QUE_0_LAST_4_BYTE_REG
 0x0480010

	)

399 
	#DMA_TX_QUE_1_REG
 0x0480040

	)

400 
	#DMA_TX_QUE_1_LAST_1_BYTE_REG
 0x0480044

	)

401 
	#DMA_TX_QUE_1_LAST_2_BYTE_REG
 0x0480048

	)

402 
	#DMA_TX_QUE_1_LAST_3_BYTE_REG
 0x048004c

	)

403 
	#DMA_TX_QUE_1_LAST_4_BYTE_REG
 0x0480050

	)

405 
	#DMA_TX_QUE_2_REG
 0x0480080

	)

406 
	#DMA_TX_QUE_2_LAST_1_BYTE_REG
 0x0480084

	)

407 
	#DMA_TX_QUE_2_LAST_2_BYTE_REG
 0x0480088

	)

408 
	#DMA_TX_QUE_2_LAST_3_BYTE_REG
 0x048008c

	)

409 
	#DMA_TX_QUE_2_LAST_4_BYTE_REG
 0x0480090

	)

411 
	#DMA_TX_QUE_3_REG
 0x04800c0

	)

412 
	#DMA_TX_QUE_3_LAST_1_BYTE_REG
 0x04800c4

	)

413 
	#DMA_TX_QUE_3_LAST_2_BYTE_REG
 0x04800c8

	)

414 
	#DMA_TX_QUE_3_LAST_3_BYTE_REG
 0x04800cc

	)

415 
	#DMA_TX_QUE_3_LAST_4_BYTE_REG
 0x04800d0

	)

417 
	#MDIO_0_CONTROL_REG
 0x0440000

	)

418 
	#MDIO_0_STATUS_REG
 0x0440004

	)

419 
	#MDIO_0_PHY_ID_0_REG
 0x0440008

	)

420 
	#MDIO_0_PHY_ID_1_REG
 0x044000c

	)

421 
	#MDIO_0_AUTONEGOTIATION_ADVERT_REG
 0x0440010

	)

422 
	#MDIO_0_AUTONEG_LINK_PARTNER_BASE_PAGE_ABILITY_REG
 0x0440014

	)

423 
	#MDIO_0_AUTONEG_EXPANSION_REG
 0x0440018

	)

424 
	#MDIO_0_AUTONEG_NEXT_PAGE_TX_REG
 0x044001c

	)

425 
	#MDIO_0_AUTONEG_LINK_PARTNER_RCVD_NEXT_PAGE_REG
 0x0440020

	)

426 
	#MDIO_0_MASTER_SLAVE_CTRL_REG
 0x0440024

	)

427 
	#MDIO_0_MASTER_SLAVE_STATUS_REG
 0x0440028

	)

428 
	#MDIO_0_PSE_CTRL_REG
 0x044002c

	)

429 
	#MDIO_0_PSE_STATUS_REG
 0x0440030

	)

430 
	#MDIO_0_MMD_ACCESS_CTRL_REG
 0x0440034

	)

431 
	#MDIO_0_MMD_ACCESS_STATUS_REG
 0x0440038

	)

432 
	#MDIO_0_EXTENDED_STATUS_REG
 0x044003c

	)

433 
	#MDIO_0_INTERRUPT_MASK_REG
 0x044006c

	)

435 
	#MDIO_1_CONTROL_REG
 0x0440080

	)

436 
	#MDIO_1_STATUS_REG
 0x0440084

	)

437 
	#MDIO_1_PHY_ID_0_REG
 0x0440088

	)

438 
	#MDIO_1_PHY_ID_1_REG
 0x044008c

	)

439 
	#MDIO_1_AUTONEGOTIATION_ADVERT_REG
 0x0440090

	)

440 
	#MDIO_1_AUTONEG_LINK_PARTNER_BASE_PAGE_ABILITY_REG
 0x0440094

	)

441 
	#MDIO_1_AUTONEG_EXPANSION_REG
 0x0440098

	)

442 
	#MDIO_1_AUTONEG_NEXT_PAGE_TX_REG
 0x044009c

	)

443 
	#MDIO_1_AUTONEG_LINK_PARTNER_RCVD_NEXT_PAGE_REG
 0x04400a0

	)

444 
	#MDIO_1_MASTER_SLAVE_CTRL_REG
 0x04400a4

	)

445 
	#MDIO_1_MASTER_SLAVE_STATUS_REG
 0x04400a8

	)

446 
	#MDIO_1_PSE_CTRL_REG
 0x04400ac

	)

447 
	#MDIO_1_PSE_STATUS_REG
 0x04400b0

	)

448 
	#MDIO_1_MMD_ACCESS_CTRL_REG
 0x04400b4

	)

449 
	#MDIO_1_MMD_ACCESS_STATUS_REG
 0x04400b8

	)

450 
	#MDIO_1_EXTENDED_STATUS_REG
 0x04400bc

	)

451 
	#MDIO_1_INTERRUPT_MASK_REG
 0x04400ec

	)

453 
	#MDIO_2_CONTROL_REG
 0x0440100

	)

454 
	#MDIO_2_STATUS_REG
 0x0440104

	)

455 
	#MDIO_2_PHY_ID_0_REG
 0x0440108

	)

456 
	#MDIO_2_PHY_ID_1_REG
 0x044010c

	)

457 
	#MDIO_2_AUTONEGOTIATION_ADVERT_REG
 0x0440110

	)

458 
	#MDIO_2_AUTONEG_LINK_PARTNER_BASE_PAGE_ABILITY_REG
 0x0440114

	)

459 
	#MDIO_2_AUTONEG_EXPANSION_REG
 0x0440118

	)

460 
	#MDIO_2_AUTONEG_NEXT_PAGE_TX_REG
 0x044011c

	)

461 
	#MDIO_2_AUTONEG_LINK_PARTNER_RCVD_NEXT_PAGE_REG
 0x0440120

	)

462 
	#MDIO_2_MASTER_SLAVE_CTRL_REG
 0x0440124

	)

463 
	#MDIO_2_MASTER_SLAVE_STATUS_REG
 0x0440128

	)

464 
	#MDIO_2_PSE_CTRL_REG
 0x044012c

	)

465 
	#MDIO_2_PSE_STATUS_REG
 0x0440130

	)

466 
	#MDIO_2_MMD_ACCESS_CTRL_REG
 0x0440134

	)

467 
	#MDIO_2_MMD_ACCESS_STATUS_REG
 0x0440138

	)

468 
	#MDIO_2_EXTENDED_STATUS_REG
 0x044013c

	)

469 
	#MDIO_2_INTERRUPT_MASK_REG
 0x044016c

	)

471 
	#MDIO_3_CONTROL_REG
 0x0440180

	)

472 
	#MDIO_3_STATUS_REG
 0x0440184

	)

473 
	#MDIO_3_PHY_ID_0_REG
 0x0440188

	)

474 
	#MDIO_3_PHY_ID_1_REG
 0x044018c

	)

475 
	#MDIO_3_AUTONEGOTIATION_ADVERT_REG
 0x0440190

	)

476 
	#MDIO_3_AUTONEG_LINK_PARTNER_BASE_PAGE_ABILITY_REG
 0x0440194

	)

477 
	#MDIO_3_AUTONEG_EXPANSION_REG
 0x0440198

	)

478 
	#MDIO_3_AUTONEG_NEXT_PAGE_TX_REG
 0x044019c

	)

479 
	#MDIO_3_AUTONEG_LINK_PARTNER_RCVD_NEXT_PAGE_REG
 0x04401a0

	)

480 
	#MDIO_3_MASTER_SLAVE_CTRL_REG
 0x04401a4

	)

481 
	#MDIO_3_MASTER_SLAVE_STATUS_REG
 0x04401a8

	)

482 
	#MDIO_3_PSE_CTRL_REG
 0x04401ac

	)

483 
	#MDIO_3_PSE_STATUS_REG
 0x04401b0

	)

484 
	#MDIO_3_MMD_ACCESS_CTRL_REG
 0x04401b4

	)

485 
	#MDIO_3_MMD_ACCESS_STATUS_REG
 0x04401b8

	)

486 
	#MDIO_3_EXTENDED_STATUS_REG
 0x04401bc

	)

487 
	#MDIO_3_INTERRUPT_MASK_REG
 0x04401ec

	)

489 
	#STAMP_COUNTER_1_REG
 0x0500000

	)

490 
	#STAMP_COUNTER_2_REG
 0x0500004

	)

491 
	#STAMP_COUNTER_3_REG
 0x0500008

	)

492 
	#STAMP_COUNTER_4_REG
 0x050000c

	)

493 
	#STAMP_COUNTER_1_2_REG_LOAD
 0x0500010

	)

494 
	#STAMP_COUNTER_3_4_REG_LOAD
 0x0500014

	)

496 
	#STAMP_COUNTER_READ_ENABLE
 0x0500024

	)

498 
	#STAMP_COUNTER_BIT_95_64
 0x0500018

	)

500 
	#STAMP_COUNTER_BIT_63_32
 0x050001c

	)

502 
	#STAMP_COUNTER_BIT_31_0
 0x0500020

	)

504 
	#PHY_RST_BIT_POS
 15

	)

505 
	#PHY_LOOPBACK_BIT_POS
 14

	)

506 
	#PHY_SPEED_SEL_LO_BIT_POS
 13

	)

507 
	#PHY_AUTONEG_ENABLE_BIT_POS
 12

	)

508 
	#PHY_PWR_DOWN_BIT_POS
 11

	)

509 
	#PHY_ISOLATE_BIT_POS
 10

	)

510 
	#PHY_RESTART_AUTONEG_BIT_POS
 9

	)

511 
	#PHY_DUPLEX_MODE_BIT_POS
 8

	)

512 
	#PHY_COLLISION_TEST_BIT_POS
 7

	)

513 
	#PHY_SPEED_SEL_HI_BIT_POS
 6

	)

514 
	#PHY_UNIDIR_ENABLE_BIT_POS
 5

	)

516 
	#PHY_100BASE_T4_BIT_POS
 15

	)

517 
	#PHY_100BASE_X_FULL_DPLX_BIT_POS
 14

	)

518 
	#PHY_100BASE_X_HALF_DPLX_BIT_POS
 13

	)

519 
	#PHY_10MBPS_FULL_DPLX_BIT_POS
 12

	)

520 
	#PHY_10MBPS_HALF_DPLX_BIT_POS
 11

	)

521 
	#PHY_100BASE_T2_FULL_DPLX_BIT_POS
 10

	)

522 
	#PHY_100BASE_T2_HALF_DPLX_BIT_POS
 9

	)

523 
	#PHY_EXTENDED_STATUS_BIT_POS
 8

	)

524 
	#PHY_UNIDIR_ABILITY_BIT_POS
 7

	)

525 
	#PHY_MF_PREAMBLE_SPRSN_BIT_POS
 6

	)

526 
	#PHY_AUTONEG_COMPLETE_BIT_POS
 5

	)

527 
	#PHY_REMOTE_FAULT_BIT_POS
 4

	)

528 
	#PHY_AUTONEG_ABILITY_BIT_POS
 3

	)

529 
	#PHY_LINK_STATUS_BIT_POS
 2

	)

530 
	#PHY_JABBER_DETECT_BIT_POS
 1

	)

531 
	#PHY_EXTENDED_CAPABILITY_BIT_POS
 0

	)

533 
	#CLK_TEST_TICKS_REG
 0x0880000

	)

534 
	#SERIAL_TEST_CONTROL_0_REG
 0x08c0000

	)

535 
	#SERIAL_TEST_STATUS_0_REG
 0x08c0004

	)

536 
	#SERIAL_TEST_NUM_FRAMES_SENT_0_LO_REG
 0x08c0008

	)

537 
	#SERIAL_TEST_NUM_FRAMES_RCVD_0_LO_REG
 0x08c000c

	)

538 
	#SERIAL_TEST_NUM_FRAMES_SENT_0_HI_REG
 0x08c0010

	)

539 
	#SERIAL_TEST_NUM_FRAMES_RCVD_0_HI_REG
 0x08c0014

	)

540 
	#SERIAL_TEST_CONTROL_1_REG
 0x08c0018

	)

541 
	#SERIAL_TEST_STATUS_1_REG
 0x08c001c

	)

542 
	#SERIAL_TEST_NUM_FRAMES_SENT_1_LO_REG
 0x08c0020

	)

543 
	#SERIAL_TEST_NUM_FRAMES_RCVD_1_LO_REG
 0x08c0024

	)

544 
	#SERIAL_TEST_NUM_FRAMES_SENT_1_HI_REG
 0x08c0028

	)

545 
	#SERIAL_TEST_NUM_FRAMES_RCVD_1_HI_REG
 0x08c002c

	)

547 
	#SERIAL_TEST_CTRL_REG
 0x08c0030

	)

548 
	#SERIAL_TEST_STAT_REG
 0x08c0034

	)

550 
	#SRAM_LSB_1_BASE_ADDR
 0x1000000

	)

551 
	#SRAM_LSB_2_BASE_ADDR
 0x1800000

	)

553 
	#SRAM_MSB_SRAM1_RD_REG
 0x0940000

	)

554 
	#SRAM_MSB_SRAM1_WR_REG
 0x0940004

	)

555 
	#SRAM_MSB_SRAM2_RD_REG
 0x0940008

	)

556 
	#SRAM_MSB_SRAM2_WR_REG
 0x094000c

	)

558 
	#SRAM_TEST_ERR_CNT_REG
 0x0900000

	)

559 
	#SRAM_TEST_ITER_NUM_REG
 0x0900004

	)

560 
	#SRAM_TEST_BAD_RUNS_REG
 0x0900008

	)

561 
	#SRAM_TEST_GOOD_RUNS_REG
 0x090000c

	)

562 
	#SRAM_TEST_STATUS_REG
 0x0900010

	)

563 
	#SRAM_TEST_EN_REG
 0x0900014

	)

564 
	#SRAM_TEST_CTRL_REG
 0x0900018

	)

565 
	#SRAM_TEST_RAND_SEED_1_REG
 0x090001c

	)

566 
	#SRAM_TEST_RAND_SEED_2_REG
 0x0900020

	)

568 
	#SRAM_TEST_LOG_OFFSET
 0x0000020

	)

570 
	#SRAM_TEST_LOG_ADDR_REG
 0x0920000

	)

571 
	#SRAM_TEST_LOG_EXP_DATA_HI_REG
 0x0920004

	)

572 
	#SRAM_TEST_LOG_EXP_DATA_LO_REG
 0x0920008

	)

573 
	#SRAM_TEST_LOG_RD_DATA_HI_REG
 0x092000c

	)

574 
	#SRAM_TEST_LOG_RD_DATA_LO_REG
 0x0920010

	)

576 
	#DRAM_TEST_ERR_CNT_REG
 0x0980000

	)

577 
	#DRAM_TEST_ITER_NUM_REG
 0x0980004

	)

578 
	#DRAM_TEST_BAD_RUNS_REG
 0x0980008

	)

579 
	#DRAM_TEST_GOOD_RUNS_REG
 0x098000c

	)

580 
	#DRAM_TEST_STATUS_REG
 0x0980010

	)

581 
	#DRAM_TEST_EN_REG
 0x0980014

	)

582 
	#DRAM_TEST_CTRL_REG
 0x0980018

	)

583 
	#DRAM_TEST_RAND_SEED_REG
 0x098001c

	)

585 
	#DRAM_TEST_LOG_OFFSET
 0x0000020

	)

587 
	#DRAM_TEST_LOG_ADDR_REG
 0x09a0000

	)

588 
	#DRAM_TEST_LOG_EXP_DATA_HI_REG
 0x09a0004

	)

589 
	#DRAM_TEST_LOG_EXP_DATA_LO_REG
 0x09a0008

	)

590 
	#DRAM_TEST_LOG_RD_DATA_HI_REG
 0x09a000c

	)

591 
	#DRAM_TEST_LOG_RD_DATA_LO_REG
 0x09a0010

	)

593 
	#PHY_TEST_PORT_OFFSET
 0x0008000

	)

595 
	#PHY_TEST_STATUS_REG
 0x09c0000

	)

596 
	#PHY_TEST_CTRL_REG
 0x09c0004

	)

597 
	#PHY_TEST_SIZE_REG
 0x09c0008

	)

598 
	#PHY_TEST_PATTERN_REG
 0x09c000c

	)

599 
	#PHY_TEST_INIT_SEQ_NO_REG
 0x09c0010

	)

601 
	#PHY_TEST_PHY_0_TX_STATUS_REG
 0x09e0000

	)

602 
	#PHY_TEST_PHY_0_TX_ITER_CNT_REG
 0x09e0004

	)

603 
	#PHY_TEST_PHY_0_TX_PKT_CNT_REG
 0x09e0008

	)

604 
	#PHY_TEST_PHY_0_TX_SEQ_NO_REG
 0x09e000c

	)

605 
	#PHY_TEST_PHY_0_TX_RAND_SEED_REG
 0x09e0010

	)

606 
	#PHY_TEST_PHY_0_RX_STATUS_REG
 0x09e2000

	)

607 
	#PHY_TEST_PHY_0_RX_GOOD_PKT_CNT_REG
 0x09e2004

	)

608 
	#PHY_TEST_PHY_0_RX_ERR_PKT_CNT_REG
 0x09e2008

	)

609 
	#PHY_TEST_PHY_0_RX_SEQ_NO_REG
 0x09e200c

	)

610 
	#PHY_TEST_PHY_0_RX_CTRL_REG
 0x09e2010

	)

611 
	#PHY_TEST_PHY_0_RX_LOG_STATUS_REG
 0x09e4000

	)

612 
	#PHY_TEST_PHY_0_RX_LOG_EXP_DATA_REG
 0x09e4004

	)

613 
	#PHY_TEST_PHY_0_RX_LOG_RX_DATA_REG
 0x09e4008

	)

614 
	#PHY_TEST_PHY_0_RX_LOG_CTRL_REG
 0x09e400c

	)

616 
	#PHY_TEST_PHY_1_TX_STATUS_REG
 0x09e8000

	)

617 
	#PHY_TEST_PHY_1_TX_ITER_CNT_REG
 0x09e8004

	)

618 
	#PHY_TEST_PHY_1_TX_PKT_CNT_REG
 0x09e8008

	)

619 
	#PHY_TEST_PHY_1_TX_SEQ_NO_REG
 0x09e800c

	)

620 
	#PHY_TEST_PHY_1_TX_RAND_SEED_REG
 0x09e8010

	)

621 
	#PHY_TEST_PHY_1_RX_STATUS_REG
 0x09ó000

	)

622 
	#PHY_TEST_PHY_1_RX_GOOD_PKT_CNT_REG
 0x09ó004

	)

623 
	#PHY_TEST_PHY_1_RX_ERR_PKT_CNT_REG
 0x09ó008

	)

624 
	#PHY_TEST_PHY_1_RX_SEQ_NO_REG
 0x09ó00c

	)

625 
	#PHY_TEST_PHY_1_RX_CTRL_REG
 0x09ó010

	)

626 
	#PHY_TEST_PHY_1_RX_LOG_STATUS_REG
 0x09ec000

	)

627 
	#PHY_TEST_PHY_1_RX_LOG_EXP_DATA_REG
 0x09ec004

	)

628 
	#PHY_TEST_PHY_1_RX_LOG_RX_DATA_REG
 0x09ec008

	)

629 
	#PHY_TEST_PHY_1_RX_LOG_CTRL_REG
 0x09ec00c

	)

631 
	#PHY_TEST_PHY_2_TX_STATUS_REG
 0x09f0000

	)

632 
	#PHY_TEST_PHY_2_TX_ITER_CNT_REG
 0x09f0004

	)

633 
	#PHY_TEST_PHY_2_TX_PKT_CNT_REG
 0x09f0008

	)

634 
	#PHY_TEST_PHY_2_TX_SEQ_NO_REG
 0x09f000c

	)

635 
	#PHY_TEST_PHY_2_TX_RAND_SEED_REG
 0x09f0010

	)

636 
	#PHY_TEST_PHY_2_RX_STATUS_REG
 0x09f2000

	)

637 
	#PHY_TEST_PHY_2_RX_GOOD_PKT_CNT_REG
 0x09f2004

	)

638 
	#PHY_TEST_PHY_2_RX_ERR_PKT_CNT_REG
 0x09f2008

	)

639 
	#PHY_TEST_PHY_2_RX_SEQ_NO_REG
 0x09f200c

	)

640 
	#PHY_TEST_PHY_2_RX_CTRL_REG
 0x09f2010

	)

641 
	#PHY_TEST_PHY_2_RX_LOG_STATUS_REG
 0x09f4000

	)

642 
	#PHY_TEST_PHY_2_RX_LOG_EXP_DATA_REG
 0x09f4004

	)

643 
	#PHY_TEST_PHY_2_RX_LOG_RX_DATA_REG
 0x09f4008

	)

644 
	#PHY_TEST_PHY_2_RX_LOG_CTRL_REG
 0x09f400c

	)

646 
	#PHY_TEST_PHY_3_TX_STATUS_REG
 0x09f8000

	)

647 
	#PHY_TEST_PHY_3_TX_ITER_CNT_REG
 0x09f8004

	)

648 
	#PHY_TEST_PHY_3_TX_PKT_CNT_REG
 0x09f8008

	)

649 
	#PHY_TEST_PHY_3_TX_SEQ_NO_REG
 0x09f800c

	)

650 
	#PHY_TEST_PHY_3_TX_RAND_SEED_REG
 0x09f8010

	)

651 
	#PHY_TEST_PHY_3_RX_STATUS_REG
 0x09Á000

	)

652 
	#PHY_TEST_PHY_3_RX_GOOD_PKT_CNT_REG
 0x09Á004

	)

653 
	#PHY_TEST_PHY_3_RX_ERR_PKT_CNT_REG
 0x09Á008

	)

654 
	#PHY_TEST_PHY_3_RX_SEQ_NO_REG
 0x09Á00c

	)

655 
	#PHY_TEST_PHY_3_RX_CTRL_REG
 0x09Á010

	)

656 
	#PHY_TEST_PHY_3_RX_LOG_STATUS_REG
 0x09fc000

	)

657 
	#PHY_TEST_PHY_3_RX_LOG_EXP_DATA_REG
 0x09fc004

	)

658 
	#PHY_TEST_PHY_3_RX_LOG_RX_DATA_REG
 0x09fc008

	)

659 
	#PHY_TEST_PHY_3_RX_LOG_CTRL_REG
 0x09fc00c

	)

661 
	#REG_FILE_BASE_ADDR_REG
 0x0800000

	)

663 
	#SRAM_BASE_ADDR
 0x1000000

	)

664 
	#DRAM_BASE_ADDR
 0x4000000

	)

666 
	#IN_ARB_NUM_PKTS_SENT_REG
 0x2000200

	)

667 
	#IN_ARB_LAST_PKT_WORD_0_LO_REG
 0x2000204

	)

668 
	#IN_ARB_LAST_PKT_WORD_0_HI_REG
 0x2000208

	)

669 
	#IN_ARB_LAST_PKT_CTRL_0_REG
 0x200020c

	)

670 
	#IN_ARB_LAST_PKT_WORD_1_LO_REG
 0x2000210

	)

671 
	#IN_ARB_LAST_PKT_WORD_1_HI_REG
 0x2000214

	)

672 
	#IN_ARB_LAST_PKT_CTRL_1_REG
 0x2000218

	)

673 
	#IN_ARB_STATE_REG
 0x200021c

	)

675 
	#SWITCH_OP_LUT_PORTS_MAC_HI_REG
 0x2000100

	)

676 
	#SWITCH_OP_LUT_MAC_LO_REG
 0x2000104

	)

677 
	#SWITCH_OP_LUT_NUM_HITS_REG
 0x2000108

	)

678 
	#SWITCH_OP_LUT_NUM_MISSES_REG
 0x200010c

	)

679 
	#SWITCH_OP_LUT_MAC_LUT_RD_ADDR_REG
 0x2000110

	)

680 
	#SWITCH_OP_LUT_MAC_LUT_WR_ADDR_REG
 0x2000114

	)

682 
	#ROUTER_RT_SIZE
 32

	)

683 
	#ROUTER_ARP_SIZE
 32

	)

684 
	#ROUTER_DST_IP_FILTER_TABLE_DEPTH
 32

	)

686 
	#ROUTER_OP_LUT_ARP_MAC_HI_REG
 0x2000100

	)

687 
	#ROUTER_OP_LUT_ARP_MAC_LO_REG
 0x2000104

	)

688 
	#ROUTER_OP_LUT_ARP_NEXT_HOP_IP_REG
 0x2000108

	)

689 
	#ROUTER_OP_LUT_ARP_LUT_RD_ADDR_REG
 0x200010c

	)

690 
	#ROUTER_OP_LUT_ARP_LUT_WR_ADDR_REG
 0x2000110

	)

691 
	#ROUTER_OP_LUT_RT_IP_REG
 0x2000114

	)

692 
	#ROUTER_OP_LUT_RT_MASK_REG
 0x2000118

	)

693 
	#ROUTER_OP_LUT_RT_NEXT_HOP_IP_REG
 0x200011c

	)

694 
	#ROUTER_OP_LUT_RT_OUTPUT_PORT_REG
 0x2000120

	)

695 
	#ROUTER_OP_LUT_RT_LUT_RD_ADDR_REG
 0x2000124

	)

696 
	#ROUTER_OP_LUT_RT_LUT_WR_ADDR_REG
 0x2000128

	)

697 
	#ROUTER_OP_LUT_MAC_0_HI_REG
 0x200012c

	)

698 
	#ROUTER_OP_LUT_MAC_0_LO_REG
 0x2000130

	)

699 
	#ROUTER_OP_LUT_MAC_1_HI_REG
 0x2000134

	)

700 
	#ROUTER_OP_LUT_MAC_1_LO_REG
 0x2000138

	)

701 
	#ROUTER_OP_LUT_MAC_2_HI_REG
 0x200013c

	)

702 
	#ROUTER_OP_LUT_MAC_2_LO_REG
 0x2000140

	)

703 
	#ROUTER_OP_LUT_MAC_3_HI_REG
 0x2000144

	)

704 
	#ROUTER_OP_LUT_MAC_3_LO_REG
 0x2000148

	)

705 
	#ROUTER_OP_LUT_DST_IP_FILTER_IP_REG
 0x200014c

	)

706 
	#ROUTER_OP_LUT_DST_IP_FILTER_RD_ADDR_REG
 0x2000150

	)

707 
	#ROUTER_OP_LUT_DST_IP_FILTER_WR_ADDR_REG
 0x2000154

	)

709 
	#ROUTER_OP_LUT_ARP_NUM_MISSES_REG
 0x2000180

	)

710 
	#ROUTER_OP_LUT_LPM_NUM_MISSES_REG
 0x2000184

	)

711 
	#ROUTER_OP_LUT_NUM_CPU_PKTS_SENT_REG
 0x2000188

	)

712 
	#ROUTER_OP_LUT_NUM_BAD_OPTS_VER_REG
 0x200018c

	)

713 
	#ROUTER_OP_LUT_NUM_BAD_CHKSUMS_REG
 0x2000190

	)

714 
	#ROUTER_OP_LUT_NUM_BAD_TTLS_REG
 0x2000194

	)

715 
	#ROUTER_OP_LUT_NUM_NON_IP_RCVD_REG
 0x2000198

	)

716 
	#ROUTER_OP_LUT_NUM_PKTS_FORWARDED_REG
 0x200019c

	)

717 
	#ROUTER_OP_LUT_NUM_WRONG_DEST_REG
 0x20001a0

	)

718 
	#ROUTER_OP_LUT_NUM_FILTERED_PKTS_REG
 0x20001a4

	)

720 
	#OQ_ENABLE_SEND_BIT_NUM
 0

	)

721 
	#OQ_INITIALIZE_OQ_BIT_NUM
 1

	)

723 
	#OQ_NUM_WORDS_LEFT_REG_0
 0x2101000

	)

724 
	#OQ_NUM_PKT_BYTES_STORED_REG_0
 0x2101004

	)

725 
	#OQ_NUM_OVERHEAD_BYTES_STORED_REG_0
 0x2101008

	)

726 
	#OQ_NUM_PKTS_STORED_REG_0
 0x210100c

	)

727 
	#OQ_NUM_PKTS_DROPPED_REG_0
 0x2101010

	)

728 
	#OQ_NUM_PKT_BYTES_REMOVED_REG_0
 0x2101014

	)

729 
	#OQ_NUM_OVERHEAD_BYTES_REMOVED_REG_0
 0x2101018

	)

730 
	#OQ_NUM_PKTS_REMOVED_REG_0
 0x210101c

	)

731 
	#OQ_ADDRESS_HI_REG_0
 0x2101020

	)

732 
	#OQ_ADDRESS_LO_REG_0
 0x2101024

	)

733 
	#OQ_WR_ADDRESS_REG_0
 0x2101028

	)

734 
	#OQ_RD_ADDRESS_REG_0
 0x210102c

	)

735 
	#OQ_NUM_PKTS_IN_Q_REG_0
 0x2101030

	)

736 
	#OQ_MAX_PKTS_IN_Q_REG_0
 0x2101034

	)

737 
	#OQ_FULL_THRESH_REG_0
 0x2101040

	)

738 
	#OQ_NUM_WORDS_IN_Q_REG_0
 0x210103c

	)

739 
	#OQ_CONTROL_REG_0
 0x2101038

	)

741 
	#OQ_NUM_WORDS_LEFT_REG_1
 0x2101100

	)

742 
	#OQ_NUM_PKT_BYTES_STORED_REG_1
 0x2101104

	)

743 
	#OQ_NUM_OVERHEAD_BYTES_STORED_REG_1
 0x2101108

	)

744 
	#OQ_NUM_PKTS_STORED_REG_1
 0x210110c

	)

745 
	#OQ_NUM_PKTS_DROPPED_REG_1
 0x2101110

	)

746 
	#OQ_NUM_PKT_BYTES_REMOVED_REG_1
 0x2101114

	)

747 
	#OQ_NUM_OVERHEAD_BYTES_REMOVED_REG_1
 0x2101118

	)

748 
	#OQ_NUM_PKTS_REMOVED_REG_1
 0x210111c

	)

749 
	#OQ_ADDRESS_HI_REG_1
 0x2101120

	)

750 
	#OQ_ADDRESS_LO_REG_1
 0x2101124

	)

751 
	#OQ_WR_ADDRESS_REG_1
 0x2101128

	)

752 
	#OQ_RD_ADDRESS_REG_1
 0x210112c

	)

753 
	#OQ_NUM_PKTS_IN_Q_REG_1
 0x2101130

	)

754 
	#OQ_MAX_PKTS_IN_Q_REG_1
 0x2101134

	)

755 
	#OQ_FULL_THRESH_REG_1
 0x2101140

	)

756 
	#OQ_NUM_WORDS_IN_Q_REG_1
 0x210113c

	)

757 
	#OQ_CONTROL_REG_1
 0x2101138

	)

759 
	#OQ_NUM_WORDS_LEFT_REG_2
 0x2101200

	)

760 
	#OQ_NUM_PKT_BYTES_STORED_REG_2
 0x2101204

	)

761 
	#OQ_NUM_OVERHEAD_BYTES_STORED_REG_2
 0x2101208

	)

762 
	#OQ_NUM_PKTS_STORED_REG_2
 0x210120c

	)

763 
	#OQ_NUM_PKTS_DROPPED_REG_2
 0x2101210

	)

764 
	#OQ_NUM_PKT_BYTES_REMOVED_REG_2
 0x2101214

	)

765 
	#OQ_NUM_OVERHEAD_BYTES_REMOVED_REG_2
 0x2101218

	)

766 
	#OQ_NUM_PKTS_REMOVED_REG_2
 0x210121c

	)

767 
	#OQ_ADDRESS_HI_REG_2
 0x2101220

	)

768 
	#OQ_ADDRESS_LO_REG_2
 0x2101224

	)

769 
	#OQ_WR_ADDRESS_REG_2
 0x2101228

	)

770 
	#OQ_RD_ADDRESS_REG_2
 0x210122c

	)

771 
	#OQ_NUM_PKTS_IN_Q_REG_2
 0x2101230

	)

772 
	#OQ_MAX_PKTS_IN_Q_REG_2
 0x2101234

	)

773 
	#OQ_FULL_THRESH_REG_2
 0x2101240

	)

774 
	#OQ_NUM_WORDS_IN_Q_REG_2
 0x210123c

	)

775 
	#OQ_CONTROL_REG_2
 0x2101238

	)

777 
	#OQ_NUM_WORDS_LEFT_REG_3
 0x2101300

	)

778 
	#OQ_NUM_PKT_BYTES_STORED_REG_3
 0x2101304

	)

779 
	#OQ_NUM_OVERHEAD_BYTES_STORED_REG_3
 0x2101308

	)

780 
	#OQ_NUM_PKTS_STORED_REG_3
 0x210130c

	)

781 
	#OQ_NUM_PKTS_DROPPED_REG_3
 0x2101310

	)

782 
	#OQ_NUM_PKT_BYTES_REMOVED_REG_3
 0x2101314

	)

783 
	#OQ_NUM_OVERHEAD_BYTES_REMOVED_REG_3
 0x2101318

	)

784 
	#OQ_NUM_PKTS_REMOVED_REG_3
 0x210131c

	)

785 
	#OQ_ADDRESS_HI_REG_3
 0x2101320

	)

786 
	#OQ_ADDRESS_LO_REG_3
 0x2101324

	)

787 
	#OQ_WR_ADDRESS_REG_3
 0x2101328

	)

788 
	#OQ_RD_ADDRESS_REG_3
 0x210132c

	)

789 
	#OQ_NUM_PKTS_IN_Q_REG_3
 0x2101330

	)

790 
	#OQ_MAX_PKTS_IN_Q_REG_3
 0x2101334

	)

791 
	#OQ_FULL_THRESH_REG_3
 0x2101340

	)

792 
	#OQ_NUM_WORDS_IN_Q_REG_3
 0x210133c

	)

793 
	#OQ_CONTROL_REG_3
 0x2101338

	)

795 
	#OQ_NUM_WORDS_LEFT_REG_4
 0x2101400

	)

796 
	#OQ_NUM_PKT_BYTES_STORED_REG_4
 0x2101404

	)

797 
	#OQ_NUM_OVERHEAD_BYTES_STORED_REG_4
 0x2101408

	)

798 
	#OQ_NUM_PKTS_STORED_REG_4
 0x210140c

	)

799 
	#OQ_NUM_PKTS_DROPPED_REG_4
 0x2101410

	)

800 
	#OQ_NUM_PKT_BYTES_REMOVED_REG_4
 0x2101414

	)

801 
	#OQ_NUM_OVERHEAD_BYTES_REMOVED_REG_4
 0x2101418

	)

802 
	#OQ_NUM_PKTS_REMOVED_REG_4
 0x210141c

	)

803 
	#OQ_ADDRESS_HI_REG_4
 0x2101420

	)

804 
	#OQ_ADDRESS_LO_REG_4
 0x2101424

	)

805 
	#OQ_WR_ADDRESS_REG_4
 0x2101428

	)

806 
	#OQ_RD_ADDRESS_REG_4
 0x210142c

	)

807 
	#OQ_NUM_PKTS_IN_Q_REG_4
 0x2101430

	)

808 
	#OQ_MAX_PKTS_IN_Q_REG_4
 0x2101434

	)

809 
	#OQ_FULL_THRESH_REG_4
 0x2101440

	)

810 
	#OQ_NUM_WORDS_IN_Q_REG_4
 0x210143c

	)

811 
	#OQ_CONTROL_REG_4
 0x2101438

	)

813 
	#OQ_NUM_WORDS_LEFT_REG_5
 0x2101500

	)

814 
	#OQ_NUM_PKT_BYTES_STORED_REG_5
 0x2101504

	)

815 
	#OQ_NUM_OVERHEAD_BYTES_STORED_REG_5
 0x2101508

	)

816 
	#OQ_NUM_PKTS_STORED_REG_5
 0x210150c

	)

817 
	#OQ_NUM_PKTS_DROPPED_REG_5
 0x2101510

	)

818 
	#OQ_NUM_PKT_BYTES_REMOVED_REG_5
 0x2101514

	)

819 
	#OQ_NUM_OVERHEAD_BYTES_REMOVED_REG_5
 0x2101518

	)

820 
	#OQ_NUM_PKTS_REMOVED_REG_5
 0x210151c

	)

821 
	#OQ_ADDRESS_HI_REG_5
 0x2101520

	)

822 
	#OQ_ADDRESS_LO_REG_5
 0x2101524

	)

823 
	#OQ_WR_ADDRESS_REG_5
 0x2101528

	)

824 
	#OQ_RD_ADDRESS_REG_5
 0x210152c

	)

825 
	#OQ_NUM_PKTS_IN_Q_REG_5
 0x2101530

	)

826 
	#OQ_MAX_PKTS_IN_Q_REG_5
 0x2101534

	)

827 
	#OQ_FULL_THRESH_REG_5
 0x2101540

	)

828 
	#OQ_NUM_WORDS_IN_Q_REG_5
 0x210153c

	)

829 
	#OQ_CONTROL_REG_5
 0x2101538

	)

831 
	#OQ_NUM_WORDS_LEFT_REG_6
 0x2101600

	)

832 
	#OQ_NUM_PKT_BYTES_STORED_REG_6
 0x2101604

	)

833 
	#OQ_NUM_OVERHEAD_BYTES_STORED_REG_6
 0x2101608

	)

834 
	#OQ_NUM_PKTS_STORED_REG_6
 0x210160c

	)

835 
	#OQ_NUM_PKTS_DROPPED_REG_6
 0x2101610

	)

836 
	#OQ_NUM_PKT_BYTES_REMOVED_REG_6
 0x2101614

	)

837 
	#OQ_NUM_OVERHEAD_BYTES_REMOVED_REG_6
 0x2101618

	)

838 
	#OQ_NUM_PKTS_REMOVED_REG_6
 0x210161c

	)

839 
	#OQ_ADDRESS_HI_REG_6
 0x2101620

	)

840 
	#OQ_ADDRESS_LO_REG_6
 0x2101624

	)

841 
	#OQ_WR_ADDRESS_REG_6
 0x2101628

	)

842 
	#OQ_RD_ADDRESS_REG_6
 0x210162c

	)

843 
	#OQ_NUM_PKTS_IN_Q_REG_6
 0x2101630

	)

844 
	#OQ_MAX_PKTS_IN_Q_REG_6
 0x2101634

	)

845 
	#OQ_FULL_THRESH_REG_6
 0x2101640

	)

846 
	#OQ_NUM_WORDS_IN_Q_REG_6
 0x210163c

	)

847 
	#OQ_CONTROL_REG_6
 0x2101638

	)

849 
	#OQ_NUM_WORDS_LEFT_REG_7
 0x2101700

	)

850 
	#OQ_NUM_PKT_BYTES_STORED_REG_7
 0x2101704

	)

851 
	#OQ_NUM_OVERHEAD_BYTES_STORED_REG_7
 0x2101708

	)

852 
	#OQ_NUM_PKTS_STORED_REG_7
 0x210170c

	)

853 
	#OQ_NUM_PKTS_DROPPED_REG_7
 0x2101710

	)

854 
	#OQ_NUM_PKT_BYTES_REMOVED_REG_7
 0x2101714

	)

855 
	#OQ_NUM_OVERHEAD_BYTES_REMOVED_REG_7
 0x2101718

	)

856 
	#OQ_NUM_PKTS_REMOVED_REG_7
 0x210171c

	)

857 
	#OQ_ADDRESS_HI_REG_7
 0x2101720

	)

858 
	#OQ_ADDRESS_LO_REG_7
 0x2101724

	)

859 
	#OQ_WR_ADDRESS_REG_7
 0x2101728

	)

860 
	#OQ_RD_ADDRESS_REG_7
 0x210172c

	)

861 
	#OQ_NUM_PKTS_IN_Q_REG_7
 0x2101730

	)

862 
	#OQ_MAX_PKTS_IN_Q_REG_7
 0x2101734

	)

863 
	#OQ_FULL_THRESH_REG_7
 0x2101740

	)

864 
	#OQ_NUM_WORDS_IN_Q_REG_7
 0x210173c

	)

865 
	#OQ_CONTROL_REG_7
 0x2101738

	)

867 
	#DELAY_ENABLE_REG
 0x2000500

	)

868 
	#DELAY_1ST_WORD_HI_REG
 0x2000508

	)

869 
	#DELAY_1ST_WORD_LO_REG
 0x200050c

	)

870 
	#DELAY_LENGTH_REG
 0x2000504

	)

872 
	#RATE_LIMIT_ENABLE_REG
 0x2000400

	)

873 
	#RATE_LIMIT_SHIFT_REG
 0x2000404

	)

875 
	#EVT_CAP_ENABLE_CAPTURE_REG
 0x2000300

	)

876 
	#EVT_CAP_SEND_PKT_REG
 0x2000304

	)

877 
	#EVT_CAP_DST_MAC_HI_REG
 0x2000308

	)

878 
	#EVT_CAP_DST_MAC_LO_REG
 0x200030c

	)

879 
	#EVT_CAP_SRC_MAC_HI_REG
 0x2000310

	)

880 
	#EVT_CAP_SRC_MAC_LO_REG
 0x2000314

	)

881 
	#EVT_CAP_ETHERTYPE_REG
 0x2000318

	)

882 
	#EVT_CAP_IP_DST_REG
 0x200031c

	)

883 
	#EVT_CAP_IP_SRC_REG
 0x2000320

	)

884 
	#EVT_CAP_UDP_SRC_PORT_REG
 0x2000330

	)

885 
	#EVT_CAP_UDP_DST_PORT_REG
 0x2000334

	)

886 
	#EVT_CAP_OUTPUT_PORTS_REG
 0x2000338

	)

887 
	#EVT_CAP_RESET_TIMERS_REG
 0x200033c

	)

888 
	#EVT_CAP_MONITOR_MASK_REG
 0x2000324

	)

889 
	#EVT_CAP_TIMER_RESOLUTION_REG
 0x2000340

	)

890 
	#EVT_CAP_NUM_EVT_PKTS_SENT_REG
 0x2000344

	)

891 
	#EVT_CAP_NUM_EVTS_SENT_REG
 0x2000348

	)

892 
	#EVT_CAP_NUM_EVTS_DROPPED_REG
 0x200032c

	)

893 
	#EVT_CAP_SIGNAL_ID_MASK_REG
 0x2000328

	)

895 
	#BRAM_OQ_NUM_PKT_BYTES_RECEIVED_0_REG
 0x2000700

	)

896 
	#BRAM_OQ_NUM_PKTS_RECEIVED_0_REG
 0x2000704

	)

897 
	#BRAM_OQ_NUM_PKTS_DROPPED_0_REG
 0x2000708

	)

898 
	#BRAM_OQ_NUM_PKT_BYTES_RECEIVED_1_REG
 0x200070c

	)

899 
	#BRAM_OQ_NUM_PKTS_RECEIVED_1_REG
 0x2000710

	)

900 
	#BRAM_OQ_NUM_PKTS_DROPPED_1_REG
 0x2000714

	)

901 
	#BRAM_OQ_NUM_PKT_BYTES_RECEIVED_2_REG
 0x2000718

	)

902 
	#BRAM_OQ_NUM_PKTS_RECEIVED_2_REG
 0x200071c

	)

903 
	#BRAM_OQ_NUM_PKTS_DROPPED_2_REG
 0x2000720

	)

904 
	#BRAM_OQ_NUM_PKT_BYTES_RECEIVED_3_REG
 0x2000724

	)

905 
	#BRAM_OQ_NUM_PKTS_RECEIVED_3_REG
 0x2000728

	)

906 
	#BRAM_OQ_NUM_PKTS_DROPPED_3_REG
 0x200072c

	)

907 
	#BRAM_OQ_NUM_PKT_BYTES_RECEIVED_4_REG
 0x2000730

	)

908 
	#BRAM_OQ_NUM_PKTS_RECEIVED_4_REG
 0x2000734

	)

909 
	#BRAM_OQ_NUM_PKTS_DROPPED_4_REG
 0x2000738

	)

910 
	#BRAM_OQ_NUM_PKT_BYTES_RECEIVED_5_REG
 0x200073c

	)

911 
	#BRAM_OQ_NUM_PKTS_RECEIVED_5_REG
 0x2000740

	)

912 
	#BRAM_OQ_NUM_PKTS_DROPPED_5_REG
 0x2000744

	)

913 
	#BRAM_OQ_NUM_PKT_BYTES_RECEIVED_6_REG
 0x2000748

	)

914 
	#BRAM_OQ_NUM_PKTS_RECEIVED_6_REG
 0x200074c

	)

915 
	#BRAM_OQ_NUM_PKTS_DROPPED_6_REG
 0x2000750

	)

916 
	#BRAM_OQ_NUM_PKT_BYTES_RECEIVED_7_REG
 0x2000754

	)

917 
	#BRAM_OQ_NUM_PKTS_RECEIVED_7_REG
 0x2000758

	)

918 
	#BRAM_OQ_NUM_PKTS_DROPPED_7_REG
 0x200075c

	)

919 
	#BRAM_OQ_DISABLE_QUEUES_REG
 0x2000760

	)

920 
	#BRAM_OQ_NUM_WORDS_IN_QUEUE_0_REG
 0x2000764

	)

921 
	#BRAM_OQ_NUM_WORDS_IN_QUEUE_1_REG
 0x2000768

	)

922 
	#BRAM_OQ_NUM_WORDS_IN_QUEUE_2_REG
 0x200076c

	)

923 
	#BRAM_OQ_NUM_WORDS_IN_QUEUE_3_REG
 0x2000770

	)

924 
	#BRAM_OQ_NUM_WORDS_IN_QUEUE_4_REG
 0x2000774

	)

925 
	#BRAM_OQ_NUM_WORDS_IN_QUEUE_5_REG
 0x2000778

	)

926 
	#BRAM_OQ_NUM_WORDS_IN_QUEUE_6_REG
 0x200077c

	)

927 
	#BRAM_OQ_NUM_WORDS_IN_QUEUE_7_REG
 0x2000780

	)

	@lib/common/reg_defines_openflow_switch.h

2 
	#T0_OPENFLOW_WILDCARD_LOOKUP_ACTION_0_REG
 0x2001000

	)

3 
	#T0_OPENFLOW_WILDCARD_LOOKUP_ACTION_1_REG
 0x2001004

	)

4 
	#T0_OPENFLOW_WILDCARD_LOOKUP_ACTION_2_REG
 0x2001008

	)

5 
	#T0_OPENFLOW_WILDCARD_LOOKUP_ACTION_3_REG
 0x200100c

	)

6 
	#T0_OPENFLOW_WILDCARD_LOOKUP_ACTION_4_REG
 0x2001010

	)

7 
	#T0_OPENFLOW_WILDCARD_LOOKUP_ACTION_5_REG
 0x2001014

	)

8 
	#T0_OPENFLOW_WILDCARD_LOOKUP_ACTION_6_REG
 0x2001018

	)

9 
	#T0_OPENFLOW_WILDCARD_LOOKUP_ACTION_7_REG
 0x200101c

	)

10 
	#T0_OPENFLOW_WILDCARD_LOOKUP_ACTION_8_REG
 0x2001020

	)

11 
	#T0_OPENFLOW_WILDCARD_LOOKUP_ACTION_9_REG
 0x2001024

	)

12 
	#T0_OPENFLOW_WILDCARD_LOOKUP_CMP_MASK_0_REG
 0x2001028

	)

13 
	#T0_OPENFLOW_WILDCARD_LOOKUP_CMP_MASK_1_REG
 0x200102c

	)

14 
	#T0_OPENFLOW_WILDCARD_LOOKUP_CMP_0_REG
 0x2001030

	)

15 
	#T0_OPENFLOW_WILDCARD_LOOKUP_CMP_1_REG
 0x2001034

	)

16 
	#T0_OPENFLOW_WILDCARD_LOOKUP_READ_ADDR_REG
 0x2001038

	)

17 
	#T0_OPENFLOW_WILDCARD_LOOKUP_WRITE_ADDR_REG
 0x200103c

	)

19 
	#T1_OPENFLOW_WILDCARD_LOOKUP_ACTION_0_REG
 0x2002000

	)

20 
	#T1_OPENFLOW_WILDCARD_LOOKUP_ACTION_1_REG
 0x2002004

	)

21 
	#T1_OPENFLOW_WILDCARD_LOOKUP_ACTION_2_REG
 0x2002008

	)

22 
	#T1_OPENFLOW_WILDCARD_LOOKUP_ACTION_3_REG
 0x200200c

	)

23 
	#T1_OPENFLOW_WILDCARD_LOOKUP_ACTION_4_REG
 0x2002010

	)

24 
	#T1_OPENFLOW_WILDCARD_LOOKUP_ACTION_5_REG
 0x2002014

	)

25 
	#T1_OPENFLOW_WILDCARD_LOOKUP_ACTION_6_REG
 0x2002018

	)

26 
	#T1_OPENFLOW_WILDCARD_LOOKUP_ACTION_7_REG
 0x200201c

	)

27 
	#T1_OPENFLOW_WILDCARD_LOOKUP_ACTION_8_REG
 0x2002020

	)

28 
	#T1_OPENFLOW_WILDCARD_LOOKUP_ACTION_9_REG
 0x2002024

	)

29 
	#T1_OPENFLOW_WILDCARD_LOOKUP_CMP_MASK_0_REG
 0x2002028

	)

30 
	#T1_OPENFLOW_WILDCARD_LOOKUP_CMP_MASK_1_REG
 0x200202c

	)

31 
	#T1_OPENFLOW_WILDCARD_LOOKUP_CMP_0_REG
 0x2002030

	)

32 
	#T1_OPENFLOW_WILDCARD_LOOKUP_CMP_1_REG
 0x2002034

	)

33 
	#T1_OPENFLOW_WILDCARD_LOOKUP_READ_ADDR_REG
 0x2002038

	)

34 
	#T1_OPENFLOW_WILDCARD_LOOKUP_WRITE_ADDR_REG
 0x200203c

	)

37 
	#RATE_LIMIT_0_CTRL_REG
 0x2000100

	)

38 
	#RATE_LIMIT_0_TOKEN_INTERVAL_REG
 0x2000104

	)

39 
	#RATE_LIMIT_0_TOKEN_INC_REG
 0x2000108

	)

42 
	#RATE_LIMIT_1_CTRL_REG
 0x2000200

	)

43 
	#RATE_LIMIT_1_TOKEN_INTERVAL_REG
 0x2000204

	)

44 
	#RATE_LIMIT_1_TOKEN_INC_REG
 0x2000208

	)

46 
	#RATE_LIMIT_2_CTRL_REG
 0x2000300

	)

47 
	#RATE_LIMIT_2_TOKEN_INTERVAL_REG
 0x2000304

	)

48 
	#RATE_LIMIT_2_TOKEN_INC_REG
 0x2000308

	)

50 
	#RATE_LIMIT_3_CTRL_REG
 0x2000400

	)

51 
	#RATE_LIMIT_3_TOKEN_INTERVAL_REG
 0x2000404

	)

52 
	#RATE_LIMIT_3_TOKEN_INC_REG
 0x2000408

	)

55 
	#T0_OPENFLOW_LOOKUP_WILDCARD_MISSES_REG
 0x2000900

	)

56 
	#T0_OPENFLOW_LOOKUP_WILDCARD_HITS_REG
 0x2000904

	)

57 
	#T0_OPENFLOW_LOOKUP_EXACT_MISSES_REG
 0x2000908

	)

58 
	#T0_OPENFLOW_LOOKUP_EXACT_HITS_REG
 0x200090c

	)

59 
	#T0_OPENFLOW_LOOKUP_NUM_PKTS_DROPPED_0_REG
 0x2000910

	)

60 
	#T0_OPENFLOW_LOOKUP_NUM_PKTS_DROPPED_1_REG
 0x2000914

	)

61 
	#T0_OPENFLOW_LOOKUP_NUM_PKTS_DROPPED_2_REG
 0x2000918

	)

62 
	#T0_OPENFLOW_LOOKUP_NUM_PKTS_DROPPED_3_REG
 0x200091c

	)

63 
	#T0_OPENFLOW_LOOKUP_NUM_PKTS_DROPPED_4_REG
 0x2000920

	)

64 
	#T0_OPENFLOW_LOOKUP_NUM_PKTS_DROPPED_5_REG
 0x2000924

	)

65 
	#T0_OPENFLOW_LOOKUP_NUM_PKTS_DROPPED_6_REG
 0x2000928

	)

66 
	#T0_OPENFLOW_LOOKUP_NUM_PKTS_DROPPED_7_REG
 0x200092c

	)

67 
	#T0_OPENFLOW_LOOKUP_DUMY_SOFTWARE_0_REG
 0x2000930

	)

68 
	#T0_OPENFLOW_LOOKUP_DUMY_SOFTWARE_1_REG
 0x2000934

	)

69 
	#T0_OPENFLOW_LOOKUP_TIMER_REG
 0x2000938

	)

71 
	#T0_OPENFLOW_WILDCARD_LOOKUP_BYTES_HIT_0_REG
 0x2001040

	)

72 
	#T0_OPENFLOW_WILDCARD_LOOKUP_BYTES_HIT_1_REG
 0x2001044

	)

73 
	#T0_OPENFLOW_WILDCARD_LOOKUP_BYTES_HIT_2_REG
 0x2001048

	)

74 
	#T0_OPENFLOW_WILDCARD_LOOKUP_BYTES_HIT_3_REG
 0x200104c

	)

75 
	#T0_OPENFLOW_WILDCARD_LOOKUP_BYTES_HIT_4_REG
 0x2001050

	)

76 
	#T0_OPENFLOW_WILDCARD_LOOKUP_BYTES_HIT_5_REG
 0x2001054

	)

77 
	#T0_OPENFLOW_WILDCARD_LOOKUP_BYTES_HIT_6_REG
 0x2001058

	)

78 
	#T0_OPENFLOW_WILDCARD_LOOKUP_BYTES_HIT_7_REG
 0x200105c

	)

79 
	#T0_OPENFLOW_WILDCARD_LOOKUP_BYTES_HIT_8_REG
 0x2001060

	)

80 
	#T0_OPENFLOW_WILDCARD_LOOKUP_BYTES_HIT_9_REG
 0x2001064

	)

81 
	#T0_OPENFLOW_WILDCARD_LOOKUP_BYTES_HIT_10_REG
 0x2001068

	)

82 
	#T0_OPENFLOW_WILDCARD_LOOKUP_BYTES_HIT_11_REG
 0x200106c

	)

83 
	#T0_OPENFLOW_WILDCARD_LOOKUP_BYTES_HIT_12_REG
 0x2001070

	)

84 
	#T0_OPENFLOW_WILDCARD_LOOKUP_BYTES_HIT_13_REG
 0x2001074

	)

85 
	#T0_OPENFLOW_WILDCARD_LOOKUP_BYTES_HIT_14_REG
 0x2001078

	)

86 
	#T0_OPENFLOW_WILDCARD_LOOKUP_BYTES_HIT_15_REG
 0x200107c

	)

87 
	#T0_OPENFLOW_WILDCARD_LOOKUP_PKTS_HIT_0_REG
 0x2001080

	)

88 
	#T0_OPENFLOW_WILDCARD_LOOKUP_PKTS_HIT_1_REG
 0x2001084

	)

89 
	#T0_OPENFLOW_WILDCARD_LOOKUP_PKTS_HIT_2_REG
 0x2001088

	)

90 
	#T0_OPENFLOW_WILDCARD_LOOKUP_PKTS_HIT_3_REG
 0x200108c

	)

91 
	#T0_OPENFLOW_WILDCARD_LOOKUP_PKTS_HIT_4_REG
 0x2001090

	)

92 
	#T0_OPENFLOW_WILDCARD_LOOKUP_PKTS_HIT_5_REG
 0x2001094

	)

93 
	#T0_OPENFLOW_WILDCARD_LOOKUP_PKTS_HIT_6_REG
 0x2001098

	)

94 
	#T0_OPENFLOW_WILDCARD_LOOKUP_PKTS_HIT_7_REG
 0x200109c

	)

95 
	#T0_OPENFLOW_WILDCARD_LOOKUP_PKTS_HIT_8_REG
 0x20010a0

	)

96 
	#T0_OPENFLOW_WILDCARD_LOOKUP_PKTS_HIT_9_REG
 0x20010a4

	)

97 
	#T0_OPENFLOW_WILDCARD_LOOKUP_PKTS_HIT_10_REG
 0x20010a8

	)

98 
	#T0_OPENFLOW_WILDCARD_LOOKUP_PKTS_HIT_11_REG
 0x20010ac

	)

99 
	#T0_OPENFLOW_WILDCARD_LOOKUP_PKTS_HIT_12_REG
 0x20010b0

	)

100 
	#T0_OPENFLOW_WILDCARD_LOOKUP_PKTS_HIT_13_REG
 0x20010b4

	)

101 
	#T0_OPENFLOW_WILDCARD_LOOKUP_PKTS_HIT_14_REG
 0x20010b8

	)

102 
	#T0_OPENFLOW_WILDCARD_LOOKUP_PKTS_HIT_15_REG
 0x20010bc

	)

103 
	#T0_OPENFLOW_WILDCARD_LOOKUP_DUMMY_1_REG
 0x20010c0

	)

104 
	#T0_OPENFLOW_WILDCARD_LOOKUP_DUMMY_2_REG
 0x20010c4

	)

105 
	#T0_OPENFLOW_WILDCARD_LOOKUP_LAST_SEEN_TS_0_REG
 0x20010c8

	)

106 
	#T0_OPENFLOW_WILDCARD_LOOKUP_LAST_SEEN_TS_1_REG
 0x20010cc

	)

107 
	#T0_OPENFLOW_WILDCARD_LOOKUP_LAST_SEEN_TS_2_REG
 0x20010d0

	)

108 
	#T0_OPENFLOW_WILDCARD_LOOKUP_LAST_SEEN_TS_3_REG
 0x20010d4

	)

109 
	#T0_OPENFLOW_WILDCARD_LOOKUP_LAST_SEEN_TS_4_REG
 0x20010d8

	)

110 
	#T0_OPENFLOW_WILDCARD_LOOKUP_LAST_SEEN_TS_5_REG
 0x20010dc

	)

111 
	#T0_OPENFLOW_WILDCARD_LOOKUP_LAST_SEEN_TS_6_REG
 0x20010e0

	)

112 
	#T0_OPENFLOW_WILDCARD_LOOKUP_LAST_SEEN_TS_7_REG
 0x20010e4

	)

113 
	#T0_OPENFLOW_WILDCARD_LOOKUP_LAST_SEEN_TS_8_REG
 0x20010e8

	)

114 
	#T0_OPENFLOW_WILDCARD_LOOKUP_LAST_SEEN_TS_9_REG
 0x20010ec

	)

115 
	#T0_OPENFLOW_WILDCARD_LOOKUP_LAST_SEEN_TS_10_REG
 0x20010f0

	)

116 
	#T0_OPENFLOW_WILDCARD_LOOKUP_LAST_SEEN_TS_11_REG
 0x20010f4

	)

117 
	#T0_OPENFLOW_WILDCARD_LOOKUP_LAST_SEEN_TS_12_REG
 0x20010f8

	)

118 
	#T0_OPENFLOW_WILDCARD_LOOKUP_LAST_SEEN_TS_13_REG
 0x20010fc

	)

119 
	#T0_OPENFLOW_WILDCARD_LOOKUP_LAST_SEEN_TS_14_REG
 0x2001100

	)

120 
	#T0_OPENFLOW_WILDCARD_LOOKUP_LAST_SEEN_TS_15_REG
 0x2001104

	)

123 
	#T1_OPENFLOW_LOOKUP_WILDCARD_MISSES_REG
 0x2000a00

	)

124 
	#T1_OPENFLOW_LOOKUP_WILDCARD_HITS_REG
 0x2000a04

	)

125 
	#T1_OPENFLOW_LOOKUP_EXACT_MISSES_REG
 0x2000a08

	)

126 
	#T1_OPENFLOW_LOOKUP_EXACT_HITS_REG
 0x2000a0c

	)

127 
	#T1_OPENFLOW_LOOKUP_NUM_PKTS_DROPPED_0_REG
 0x2000a10

	)

128 
	#T1_OPENFLOW_LOOKUP_NUM_PKTS_DROPPED_1_REG
 0x2000a14

	)

129 
	#T1_OPENFLOW_LOOKUP_NUM_PKTS_DROPPED_2_REG
 0x2000a18

	)

130 
	#T1_OPENFLOW_LOOKUP_NUM_PKTS_DROPPED_3_REG
 0x2000a1c

	)

131 
	#T1_OPENFLOW_LOOKUP_NUM_PKTS_DROPPED_4_REG
 0x2000a20

	)

132 
	#T1_OPENFLOW_LOOKUP_NUM_PKTS_DROPPED_5_REG
 0x2000a24

	)

133 
	#T1_OPENFLOW_LOOKUP_NUM_PKTS_DROPPED_6_REG
 0x2000a28

	)

134 
	#T1_OPENFLOW_LOOKUP_NUM_PKTS_DROPPED_7_REG
 0x2000a2c

	)

135 
	#T1_OPENFLOW_LOOKUP_DUMY_SOFTWARE_0_REG
 0x2000a30

	)

136 
	#T1_OPENFLOW_LOOKUP_DUMY_SOFTWARE_1_REG
 0x2000a34

	)

137 
	#T1_OPENFLOW_LOOKUP_TIMER_REG
 0x2000a38

	)

139 
	#T1_OPENFLOW_WILDCARD_LOOKUP_BYTES_HIT_0_REG
 0x2002040

	)

140 
	#T1_OPENFLOW_WILDCARD_LOOKUP_BYTES_HIT_1_REG
 0x2002044

	)

141 
	#T1_OPENFLOW_WILDCARD_LOOKUP_BYTES_HIT_2_REG
 0x2002048

	)

142 
	#T1_OPENFLOW_WILDCARD_LOOKUP_BYTES_HIT_3_REG
 0x200204c

	)

143 
	#T1_OPENFLOW_WILDCARD_LOOKUP_BYTES_HIT_4_REG
 0x2002050

	)

144 
	#T1_OPENFLOW_WILDCARD_LOOKUP_BYTES_HIT_5_REG
 0x2002054

	)

145 
	#T1_OPENFLOW_WILDCARD_LOOKUP_BYTES_HIT_6_REG
 0x2002058

	)

146 
	#T1_OPENFLOW_WILDCARD_LOOKUP_BYTES_HIT_7_REG
 0x200205c

	)

147 
	#T1_OPENFLOW_WILDCARD_LOOKUP_BYTES_HIT_8_REG
 0x2002060

	)

148 
	#T1_OPENFLOW_WILDCARD_LOOKUP_BYTES_HIT_9_REG
 0x2002064

	)

149 
	#T1_OPENFLOW_WILDCARD_LOOKUP_BYTES_HIT_10_REG
 0x2002068

	)

150 
	#T1_OPENFLOW_WILDCARD_LOOKUP_BYTES_HIT_11_REG
 0x200206c

	)

151 
	#T1_OPENFLOW_WILDCARD_LOOKUP_BYTES_HIT_12_REG
 0x2002070

	)

152 
	#T1_OPENFLOW_WILDCARD_LOOKUP_BYTES_HIT_13_REG
 0x2002074

	)

153 
	#T1_OPENFLOW_WILDCARD_LOOKUP_BYTES_HIT_14_REG
 0x2002078

	)

154 
	#T1_OPENFLOW_WILDCARD_LOOKUP_BYTES_HIT_15_REG
 0x200207c

	)

155 
	#T1_OPENFLOW_WILDCARD_LOOKUP_PKTS_HIT_0_REG
 0x2002080

	)

156 
	#T1_OPENFLOW_WILDCARD_LOOKUP_PKTS_HIT_1_REG
 0x2002084

	)

157 
	#T1_OPENFLOW_WILDCARD_LOOKUP_PKTS_HIT_2_REG
 0x2002088

	)

158 
	#T1_OPENFLOW_WILDCARD_LOOKUP_PKTS_HIT_3_REG
 0x200208c

	)

159 
	#T1_OPENFLOW_WILDCARD_LOOKUP_PKTS_HIT_4_REG
 0x2002090

	)

160 
	#T1_OPENFLOW_WILDCARD_LOOKUP_PKTS_HIT_5_REG
 0x2002094

	)

161 
	#T1_OPENFLOW_WILDCARD_LOOKUP_PKTS_HIT_6_REG
 0x2002098

	)

162 
	#T1_OPENFLOW_WILDCARD_LOOKUP_PKTS_HIT_7_REG
 0x200209c

	)

163 
	#T1_OPENFLOW_WILDCARD_LOOKUP_PKTS_HIT_8_REG
 0x20020a0

	)

164 
	#T1_OPENFLOW_WILDCARD_LOOKUP_PKTS_HIT_9_REG
 0x20020a4

	)

165 
	#T1_OPENFLOW_WILDCARD_LOOKUP_PKTS_HIT_10_REG
 0x20020a8

	)

166 
	#T1_OPENFLOW_WILDCARD_LOOKUP_PKTS_HIT_11_REG
 0x20020ac

	)

167 
	#T1_OPENFLOW_WILDCARD_LOOKUP_PKTS_HIT_12_REG
 0x20020b0

	)

168 
	#T1_OPENFLOW_WILDCARD_LOOKUP_PKTS_HIT_13_REG
 0x20020b4

	)

169 
	#T1_OPENFLOW_WILDCARD_LOOKUP_PKTS_HIT_14_REG
 0x20020b8

	)

170 
	#T1_OPENFLOW_WILDCARD_LOOKUP_PKTS_HIT_15_REG
 0x20020bc

	)

171 
	#T1_OPENFLOW_WILDCARD_LOOKUP_DUMMY_1_REG
 0x20020c0

	)

172 
	#T1_OPENFLOW_WILDCARD_LOOKUP_DUMMY_2_REG
 0x20020c4

	)

173 
	#T1_OPENFLOW_WILDCARD_LOOKUP_LAST_SEEN_TS_0_REG
 0x20020c8

	)

174 
	#T1_OPENFLOW_WILDCARD_LOOKUP_LAST_SEEN_TS_1_REG
 0x20020cc

	)

175 
	#T1_OPENFLOW_WILDCARD_LOOKUP_LAST_SEEN_TS_2_REG
 0x20020d0

	)

176 
	#T1_OPENFLOW_WILDCARD_LOOKUP_LAST_SEEN_TS_3_REG
 0x20020d4

	)

177 
	#T1_OPENFLOW_WILDCARD_LOOKUP_LAST_SEEN_TS_4_REG
 0x20020d8

	)

178 
	#T1_OPENFLOW_WILDCARD_LOOKUP_LAST_SEEN_TS_5_REG
 0x20020dc

	)

179 
	#T1_OPENFLOW_WILDCARD_LOOKUP_LAST_SEEN_TS_6_REG
 0x20020e0

	)

180 
	#T1_OPENFLOW_WILDCARD_LOOKUP_LAST_SEEN_TS_7_REG
 0x20020e4

	)

181 
	#T1_OPENFLOW_WILDCARD_LOOKUP_LAST_SEEN_TS_8_REG
 0x20020e8

	)

182 
	#T1_OPENFLOW_WILDCARD_LOOKUP_LAST_SEEN_TS_9_REG
 0x20020ec

	)

183 
	#T1_OPENFLOW_WILDCARD_LOOKUP_LAST_SEEN_TS_10_REG
 0x20020f0

	)

184 
	#T1_OPENFLOW_WILDCARD_LOOKUP_LAST_SEEN_TS_11_REG
 0x20020f4

	)

185 
	#T1_OPENFLOW_WILDCARD_LOOKUP_LAST_SEEN_TS_12_REG
 0x20020f8

	)

186 
	#T1_OPENFLOW_WILDCARD_LOOKUP_LAST_SEEN_TS_13_REG
 0x20020fc

	)

187 
	#T1_OPENFLOW_WILDCARD_LOOKUP_LAST_SEEN_TS_14_REG
 0x2002100

	)

188 
	#T1_OPENFLOW_WILDCARD_LOOKUP_LAST_SEEN_TS_15_REG
 0x2002104

	)

	@lib/common/util.c

35 
	~<°dio.h
>

36 
	~<°dlib.h
>

37 
	~<uni°d.h
>

38 
	~<öây≥s.h
>

39 
	~<°rög.h
>

41 
uöt8_t
 * 
	$∑r£ù
(*
°r
) {

42 
uöt8_t
 *
ªt
 = (uöt8_à*)
	`mÆloc
(4 * (uint8_t));

43 *
num
 = (*)
	`°πok
(
°r
, ".");

44 
ödex
 = 0;

45 
num
 !
NULL
) {

46 
ªt
[
ödex
++] = 
	`©oi
(
num
);

47 
num
 = (*)
	`°πok
(
NULL
, ".");

49  
ªt
;

50 
	}
}

52 
uöt8_t
 * 
	$∑r£mac
(*
°r
) {

53 
uöt8_t
 *
ªt
 = (uöt8_à*)
	`mÆloc
(6 * ());

54 *
num
 = (*)
	`°πok
(
°r
, ":");

55 
ödex
 = 0;

56 
num
 !
NULL
) {

57 
i
;

58 
	`ssˇnf
(
num
, "%x", &
i
);

59 
ªt
[
ödex
++] = 
i
;

60 
num
 = (*)
	`°πok
(
NULL
, ":");

62  
ªt
;

63 
	}
}

65 
uöt16_t
 
	$cksm
(
Àngth
, 
uöt32_t
 
buf
[]) {

66 
uöt32_t
 
sum
 = 0;

67 
öd
 = 14;

69 
max
 = 
öd
 + (
buf
[4] >> 16);

71 
öd
 < 
max
) {

72 
i
 = 
öd
 / 4;

73 
shi·
 = !(
öd
 % 4);

74 
uöt32_t
 
vÆ
 = 
buf
[
i
];

75 i‡(
shi·
Ë
vÆ
 >>= 16;

76 
vÆ
 &= 0xffff;

77 
sum
 +
vÆ
;

78 
öd
 += 2;

81 
sum
 >> 16)

82 
sum
 = (sum & 0xffff) + (sum >> 16);

84 
sum
 = ~sum;

86  ((
uöt16_t
)
sum
);

87 
	}
}

	@lib/common/util.h

35 #i‚de‡
_UTIL_H


36 
	#_UTIL_H
 1

	)

38 
	#PATHLEN
 80

	)

40 
uöt8_t
 *
∑r£ù
(*
°r
);

41 
uöt8_t
 *
∑r£mac
(*
°r
);

42 
uöt16_t
 
cksm
(uöt16_à
Àngth
, 
uöt32_t
 
buf
[]);

	@lib/reg_lib/client_test.c

41 
	~<°dio.h
>

42 
	~<°dlib.h
>

43 
	~<°rög.h
>

44 
	~<uni°d.h
>

46 
	~<sys/ty≥s.h
>

47 
	~<sys/°©.h
>

48 
	~<sys/sockë.h
>

50 
	~<√t/if.h
>

52 
	~<time.h
>

54 
	~"../comm⁄/ªg_deföes.h
"

55 
	~"../comm⁄/nf2utû.h
"

56 
	~"../comm⁄/nf2.h
"

58 
	#PATHLEN
 80

	)

60 
	#DEFAULT_IFACE
 "nf2c0"

	)

63 
nf2devi˚
 
	gnf2
;

64 
	gvîbo£
 = 0;

65 
	gf‹˚_˙ë
 = 0;

68 
ölöe
 
¥öt
 ();

69 
¥ötMAC
 (, );

70 
¥ötIP
 ();

72 
	$maö
(
¨gc
, **
¨gv
)

74 
vÆ
;

76 
nf2
.
devi˚_«me
 = 
DEFAULT_IFACE
;

78 i‡(
¨gc
 < 3) {

79 
	`¥ötf
("Usage: client_test <ip_addr> <port_num>\n");

80 
	`¥ötf
(" ip_addr isÅheáddressÅo connectÅo.\n");

81 
	`¥ötf
("Öort_num isÅheÖortÇumberÅo connectÅo.\n");

82 
	`exô
(0);

85 
nf2
.
£rvî_p‹t_num
 = 
	`°πﬁ
(
¨gv
[2], 
NULL
, 0);

87 i‡(
nf2
.
£rvî_p‹t_num
 < 1024 ||Çf2.server_port_num > 65535) {

88 
	`Ârötf
(
°dîr
, "Eº‹:Ö‹ànumbî ha†tÿbêbëwì¿1024ánd 65535. Saw %s.\n", 
¨gv
[2]);

89 
	`exô
(1);

92 
	`°∫˝y
(
nf2
.
£rvî_ù_addr
, 
¨gv
[1], 
	`°æí
(argv[1]));

94 
	`¥ötf
("Checking iface\n");

96 i‡(
	`check_iÁ˚
(&
nf2
))

98 
	`exô
(1);

101 
	`¥ötf
("Opening descriptor.\n");

102 i‡(
	`›íDes¸ùt‹
(&
nf2
))

104 
	`exô
(1);

107 
	`¥ötf
("Printing.\n");

109 
vÆ
=0; val<10; val++){

110 
	`¥öt
(
vÆ
);

113 
	`¥ötf
("Closing descriptor.\n");

114 
	`˛o£Des¸ùt‹
(&
nf2
);

116 
	`¥ötf
("Done.\n");

118 
	}
}

120 
ölöe
 
	$¥öt
(
vÆ_ö
) {

121 
vÆ
, 
vÆ2
;

122 
i
;

124 
	`ªadReg
(&
nf2
, 
CPCI_REG_ID
, &
vÆ
);

125 
	`¥ötf
("CPCI_REG_ID: %08x\n", 
vÆ
);

127 
	`wrôeReg
(&
nf2
, 
CPCI_REG_DUMMY
, 
vÆ_ö
);

128 
	`ªadReg
(&
nf2
, 
CPCI_REG_DUMMY
, &
vÆ
);

129 
	`¥ötf
("CPCI_REG_DUMMY: %08x\n", 
vÆ
);

130 if(
vÆ
 !
vÆ_ö
) {

131 
	`Ârötf
(
°dîr
, "Eº‹: FaûedÅÿªad back. Ex≥˘ed %08x found %08x\n", 
vÆ_ö
, 
vÆ
);

133 
	}
}

	@lib/reg_lib/reg_proxy.c

41 
	~"ªg_¥oxy.h
"

43 
	$d¥öt_ªq
(
ªg_ªque°
 *
ªq
) {

44 
	`DPRINTF
("Åype : %s (%d)\n",

45 (
ªq
->
ty≥
 =
READ_REQ
) ? "read"

46 : (
ªq
->
ty≥
 =
WRITE_REQ
) ? "write"

47 : (
ªq
->
ty≥
 =
CHECK_REQ
) ? "check_iface"

48 : (
ªq
->
ty≥
 =
OPEN_REQ
) ? "open_iface"

49 : (
ªq
->
ty≥
 =
CLOSE_REQ
) ? "close_iface"

50 : "unknown", 
ªq
->
ty≥
);

51 
	`DPRINTF
(" devi˚_¿: %u\n", 
ªq
->
devi˚_num
);

52 
	`DPRINTF
("áddªs† : %08x\n", 
ªq
->
addªss
);

53 
	`DPRINTF
(" d©® : %08x (%u)\n", 
ªq
->
d©a
,Ñeq->data);

54 
	`DPRINTF
("Éº‹ : %u\n", 
ªq
->
îr‹
);

55 
	}
}

58 
ssize_t
 
	$ªadn
(
sockfd
, *
±r
, 
size_t
 
Àn
){

59 
size_t
 
∆e·
;

60 
ssize_t
 
ƒód
;

62 
	`as£π
(
sockfd
>=0);

63 
	`as£π
(
±r
!=
NULL
);

64 
	`as£π
(
Àn
>=0);

66 
∆e·
 = 
Àn
;

67 
∆e·
 > 0){

68 if–(
ƒód
 = 
	`ªad
(
sockfd
, 
±r
, 
∆e·
)) < 0) {

69 i‡(
î∫o
 =
EINTR
)

70 
ƒód
 = 0;

72 
	`≥º‹
("read");

77 i‡(
ƒód
 == 0)

80 
∆e·
 -
ƒód
;

81 
±r
 +
ƒód
;

83  (
Àn
 - 
∆e·
);

84 
	}
}

87 
ssize_t
 
	$wrôí
(
sockfd
, c⁄° *
±r
, 
size_t
 
Àn
) {

88 
size_t
 
∆e·
;

89 
ssize_t
 
nwrôãn
;

91 
	`as£π
(
sockfd
>=0);

92 
	`as£π
(
±r
!=
NULL
);

93 
	`as£π
(
Àn
>=0);

95 
∆e·
 = 
Àn
;

96 
∆e·
 > 0) {

97 i‡–(
nwrôãn
 = 
	`wrôe
(
sockfd
, 
±r
, 
∆e·
)) <= 0) {

98 i‡(
nwrôãn
 < 0 && 
î∫o
 =
EINTR
)

99 
nwrôãn
 = 0;

101 
	`≥º‹
("write");

106 
∆e·
 -
nwrôãn
;

107 
±r
 +
nwrôãn
;

109  (
Àn
);

110 
	}
}

	@lib/reg_lib/reg_proxy.h

41 #i‚de‡
REG_PROXY_H_


42 
	#REG_PROXY_H_


	)

44 
	~<°dio.h
>

45 
	~<°dlib.h
>

46 
	~<as£π.h
>

47 
	~<uni°d.h
>

48 
	~<°rög.h
>

49 
	~<sys/ty≥s.h
>

50 
	~<sys/sockë.h
>

51 
	~<√töë/ö.h
>

52 
	~<î∫o.h
>

53 
	~<sig«l.h
>

54 
	~<¨∑/öë.h
>

55 
	~<√tdb.h
>

56 
	~<°döt.h
>

57 
	~"../comm⁄/nf2.h
"

58 
	~"../comm⁄/nf2utû.h
"

60 
	#SERVER_IP_ADDR
 "192.168.0.254"

	)

61 
	#SERVER_PORT
 8888

	)

63 
	#READ_REQ
 1

	)

64 
	#WRITE_REQ
 0

	)

65 
	#CHECK_REQ
 2

	)

66 
	#OPEN_REQ
 3

	)

67 
	#CLOSE_REQ
 4

	)

69 
	sªg_ªque°
 {

70 
uöt8_t
 
	mty≥
;

71 
uöt8_t
 
	mdevi˚_num
;

72 
uöt32_t
 
	maddªss
;

73 
uöt32_t
 
	md©a
;

74 
öt8_t
 
	mîr‹
;

77 
	#SA
 
sockaddr


	)

81 #ifde‡
DEBUG


82 
	#DPRINTF
(
fmt
, 
¨gs
...) \

83 
	`¥ötf
("(fûe=%s,Üöe=%dË" 
fmt
, 
__FILE__
 , 
__LINE__
 , ##
¨gs
)

	)

85 
	#DPRINTFC
(
±r
, 
Àngth
) \

87 
i
; \

88 
	`¥ötf
("(fûe=%s,Üöe=%dË", 
__FILE__
 , 
__LINE__
 ); \

89 
i
=0; i<
Àngth
; i++) { \

90 
	`putch¨
(
±r
[
i
]); \

92 }

	)

94 
	#DPRINTF
(
fmt
, 
¨gs
...)

	)

95 
	#DPRINTFC
(
±r
, 
Àngth
)

	)

98 
d¥öt_ªq
(
ªg_ªque°
 *
ªq
);

99 
ssize_t
 
ªadn
(
sockfd
, *
±r
, 
size_t
 
Àn
);

100 
ssize_t
 
wrôí
(
sockfd
, c⁄° *
±r
, 
size_t
 
Àn
);

	@lib/reg_lib/reg_proxy_client.c

41 
	~"ªg_¥oxy.h
"

42 
	~"../comm⁄/ªg_deföes.h
"

43 
	~<°rög.h
>

45 
c⁄√˘RegSîvî
(
nf2devi˚
* 
nf2
);

46 
£ndReque°
(
sockë_to_£rvî
, 
ªg_ªque°
 *reg_request);

47 
disc⁄√˘RegSîvî
(
sockë_to_£rvî
);

49 
	$c⁄√˘RegSîvî
(
nf2devi˚
* 
nf2
){

50 
sockaddr_ö
 
£rvaddr
;

51 
sockë_to_£rvî
;

54 i‡–(
sockë_to_£rvî
 = 
	`sockë
(
PF_INET
, 
SOCK_STREAM
, 0)) < 0){

55 
	`≥º‹
("socket");

56 
	`DPRINTF
("");

60 
	`DPRINTF
("SockëÇumbî: %d\n", 
sockë_to_£rvî
);

63 
	`mem£t
(&
£rvaddr
, 0, (
SA
));

64 
£rvaddr
.
sö_Ámûy
 = 
AF_INET
;

65 
£rvaddr
.
sö_p‹t
 = 
	`ht⁄s
(
nf2
->
£rvî_p‹t_num
);

66 
	`öë_©⁄
(
nf2
->
£rvî_ù_addr
, &
£rvaddr
.
sö_addr
);

68 
	`DPRINTF
("C⁄√˘ögÅÿ%s:%u\n", 
SERVER_IP_ADDR
, 
SERVER_PORT
);

70 i‡–
	`c⁄√˘
(
sockë_to_£rvî
, (
SA
 *Ë&
£rvaddr
, (servaddr)) != 0) {

71 
	`≥º‹
("connect");

72 
	`DPRINTF
("connectÑeturnedÉrror\n");

73 
	`˛o£
(
sockë_to_£rvî
);

77  
sockë_to_£rvî
;

78 
	}
}

80 
	$£ndReque°
(
sockë_to_£rvî
, 
ªg_ªque°
 *reg_request) {

82 
	`DPRINTF
("SendingÅhe followingÑequest:\n");

83 
	`d¥öt_ªq
(
ªg_ªque°
);

85 if(
	`wrôí
(
sockë_to_£rvî
,

86 (c⁄° *Ë
ªg_ªque°
,

87  (
ªg_ªque°
)) < (reg_request)) {

88 
	`≥º‹
("write");

89 
	`DPRINTF
("Error on write\n");

93 if(
	`ªadn
(
sockë_to_£rvî
, (*Ë
ªg_ªque°
, (reg_request)) < (reg_request)) {

94 
	`≥º‹
("read");

95 
	`DPRINTF
("Error onÑead\n");

99 
	`DPRINTF
("ReceivedÅhe followingÑesponse:\n");

100 
	`d¥öt_ªq
(
ªg_ªque°
);

103 
	}
}

105 
	$disc⁄√˘RegSîvî
(
sockë_to_£rvî
) {

106 
	`˛o£
(
sockë_to_£rvî
);

107 
	}
}

112 
	$ªadReg
(
nf2devi˚
 *
nf2
, 
ªg
, *
vÆ
)

114 
ªg_ªque°
 
ªq
;

115 
ªq
.
addªss
 = 
ªg
;

116 
ªq
.
d©a
 = 0xBADDD065;

117 
ªq
.
devi˚_num
 = 
nf2
->
fd
;

118 
ªq
.
îr‹
 = 0;

119 
ªq
.
ty≥
 = 
READ_REQ
;

121 if(
	`£ndReque°
(
nf2
->
√t_iÁ˚
, &
ªq
) < 0) {

125 *
vÆ
 = 
ªq
.
d©a
;

126  
ªq
.
îr‹
;

127 
	}
}

132 
	$wrôeReg
(
nf2devi˚
 *
nf2
, 
ªg
, 
vÆ
)

134 
ªg_ªque°
 
ªq
;

135 
ªq
.
addªss
 = 
ªg
;

136 
ªq
.
d©a
 = 
vÆ
;

137 
ªq
.
devi˚_num
 = 
nf2
->
fd
;

138 
ªq
.
îr‹
 = 0;

139 
ªq
.
ty≥
 = 
WRITE_REQ
;

141 if(
	`£ndReque°
(
nf2
->
√t_iÁ˚
, &
ªq
) < 0) {

144  
ªq
.
îr‹
;

145 
	}
}

150 
	$check_iÁ˚
(
nf2devi˚
 *
nf2
)

152 
ªg_ªque°
 
ªq
;

153 
sockë_to_£rvî
;

156 if(
	`°∫Àn
(
nf2
->
devi˚_«me
, 10) > 7) {

157 
	`Ârötf
(
°dîr
, "I¡îÁ˚Çamêi†toÿl⁄g: %s\n", 
nf2
->
devi˚_«me
);

162 
ªq
.
devi˚_num
 = 
	`°πﬁ
(
nf2
->
devi˚_«me
 + 4, 
NULL
, 10);

163 if(
î∫o
 =
EINVAL
) {

164 
	`Ârötf
(
°dîr
, "Error: deviceÇumber is invalid.\n");

168 
ªq
.
addªss
 = 0;

169 
ªq
.
d©a
 = 0;

170 
ªq
.
îr‹
 = 0;

171 
ªq
.
ty≥
 = 
CHECK_REQ
;

173 
sockë_to_£rvî
 = 
	`c⁄√˘RegSîvî
(
nf2
);

174 if(
	`£ndReque°
(
sockë_to_£rvî
, &
ªq
) < 0) {

175 
	`DPRINTF
("sendRequest causedánÉrror.\n");

176 
	`disc⁄√˘RegSîvî
(
sockë_to_£rvî
);

180 if(
ªq
.
îr‹
 < 0 ||Ñeq.
d©a
 != 1) {

181 
	`DPRINTF
("Check failed.\n");

182 
	`disc⁄√˘RegSîvî
(
sockë_to_£rvî
);

186 
	`DPRINTF
("Check succeeded.\n");

187 
nf2
->
fd
 = 
ªq
.
devi˚_num
;

188 
	`disc⁄√˘RegSîvî
(
sockë_to_£rvî
);

191 
	}
}

196 
	$›íDes¸ùt‹
(
nf2devi˚
 *
nf2
)

198 
ªg_ªque°
 
ªq
;

199 
sockë_to_£rvî
;

201 
ªq
.
addªss
 = 0;

202 
ªq
.
d©a
 = 0;

203 
ªq
.
devi˚_num
 = 
nf2
->
fd
;

204 
ªq
.
îr‹
 = 0;

205 
ªq
.
ty≥
 = 
OPEN_REQ
;

207 
sockë_to_£rvî
 = 
	`c⁄√˘RegSîvî
(
nf2
);

208 if(
	`£ndReque°
(
sockë_to_£rvî
, &
ªq
) < 0) {

209 
	`DPRINTF
("sendRequest failed.\n");

210 
	`disc⁄√˘RegSîvî
(
sockë_to_£rvî
);

213 if(!
ªq
.
îr‹
) {

214 
nf2
->
fd
 = 
ªq
.
devi˚_num
;

215 
nf2
->
√t_iÁ˚
 = 
sockë_to_£rvî
;

217  
ªq
.
îr‹
;

218 
	}
}

223 
	$˛o£Des¸ùt‹
(
nf2devi˚
 *
nf2
)

225 
ªg_ªque°
 
ªq
;

226 
ªq
.
addªss
 = 0;

227 
ªq
.
d©a
 = 0;

228 
ªq
.
devi˚_num
 = 
nf2
->
fd
;

229 
ªq
.
îr‹
 = 0;

230 
ªq
.
ty≥
 = 
CLOSE_REQ
;

232 if(
	`£ndReque°
(
nf2
->
√t_iÁ˚
, &
ªq
) < 0) {

233 
	`DPRINTF
("sendRequest failed.\n");

236 
	`disc⁄√˘RegSîvî
(
nf2
->
√t_iÁ˚
);

237  
ªq
.
îr‹
;

238 
	}
}

	@lib/reg_lib/reg_proxy_server.c

42 
	~"ªg_¥oxy_£rvî.h
"

44 
	$maö
(
¨gc
, ** 
¨gv
) {

46 
li°íög_sockë
;

47 
sockë_to_˛õ¡
;

48 
yes_loˇl
;

49 
îr‹
;

50 
ö_p‹t_t
 
p‹t_num
;

51 
sockaddr_ö
 
loˇl_addr
;

52 
sockaddr_ö
 
˛õ¡_addr
;

53 
sockÀn_t
 
˛õ¡_Àn
;

54 
num_√tÂgas
;

55 
nf2devi˚
 *
nf2devi˚s
[10];

57 
yes_loˇl
=1;

59 
	`DPRINTF
("StartingÖroxy...\n");

61 i‡(
¨gc
 < 4) {

62 
	`¥ötf
("Usage:Ñeg_proxy_server <num_NetFPGAs> <ip_addr> <port_num>\n");

63 
	`¥ötf
("Çum_NetFPGAs isÅheÇumber ofÇetfpga card inÅhe system.\n");

64 
	`¥ötf
(" ip_addr isÅheáddressÅoáccept connections on.\n");

65 
	`¥ötf
("Öort_num isÅheÖortÇumberÅoáccept connections on.\n");

66 
	`exô
(0);

70 i‡(!
	`öë_©⁄
(
¨gv
[2], &
loˇl_addr
.
sö_addr
)) {

71 
	`≥º‹
("inet_aton");

72 
	`Ârötf
(
°dîr
, "Error: IPáddress specified is invalid.\n");

73 
	`exô
(1);

76 
p‹t_num
 = 
	`°πﬁ
(
¨gv
[3], 
NULL
, 0);

77 i‡(
î∫o
 =
EINVAL
 ||Éºnÿ=
ERANGE
 || 
p‹t_num
 < 1024 ||Öort_num > 65535) {

78 
	`Ârötf
(
°dîr
, "Eº‹:Ö‹ànumbî ha†tÿbêbëwì¿1024ánd 65535. Saw %s.\n", 
¨gv
[3]);

79 
	`exô
(1);

82 
num_√tÂgas
 = 
	`°πﬁ
(
¨gv
[1], 
NULL
, 0);

83 i‡(
num_√tÂgas
 < 0 ||Çum_netfpgas > 10) {

84 
	`Ârötf
(
°dîr
, "Eº‹: Numbî o‡NëFPGA†ha†tÿbêbëwì¿1ánd 10. Saw %s.\n", 
¨gv
[1]);

85 
	`exô
(1);

87 
	`DPRINTF
("Arg†havêbì¿∑r£d.Çum_√tÂgas=%d\n", 
num_√tÂgas
);

89 
	`›í_öãrÁ˚s
(
nf2devi˚s
, 
num_√tÂgas
);

90 
	`DPRINTF
("InterfacesÇow open.\n");

92 
	`DPRINTF
("Startingá connection...\n");

95 
	`mem£t
(&
loˇl_addr
, 0, (
SA
));

96 
loˇl_addr
.
sö_Ámûy
 = 
AF_INET
;

97 
loˇl_addr
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t_num
);

100 i‡–(
li°íög_sockë
 = 
	`sockë
(
PF_INET
, 
SOCK_STREAM
, 0)) < 0) {

101 
	`≥º‹
("socket");

102 
	`DPRINTF
();

103 
	`exô
(1);

107 i‡(
	`£tsock›t
(
li°íög_sockë
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
yes_loˇl
,

109 
	`≥º‹
("setsockopt");

110 
	`DPRINTF
();

111 
	`exô
(1);

115 i‡(
	`böd
(
li°íög_sockë
, (
SA
 *)&
loˇl_addr
, (SA)) < 0) {

116 
	`≥º‹
("bind");

117 
	`DPRINTF
("Exiting...\n");

118 
	`exô
(1);

121 
	`DPRINTF
("Sockë i†now boundÅÿp‹à%d\n", 
p‹t_num
);

124 i‡(
	`li°í
(
li°íög_sockë
, 10) < 0) {

125 
	`≥º‹
("listen");

126 
	`DPRINTF
();

127 
	`˛o£
(
li°íög_sockë
);

128 
	`exô
(1);

131 
	`DPRINTF
("NowÜisteningÅo connections\n");

135 
˛õ¡_Àn
=(
˛õ¡_addr
);

137 i‡–(
sockë_to_˛õ¡
 = 
	`ac˚±
(
li°íög_sockë
, (
SA
 *Ë&
˛õ¡_addr
,

138 &
˛õ¡_Àn
)) < 0) {

139 
	`DPRINTF
();

140 
	`≥º‹
("accept");

144 
	`DPRINTF
("Accepted connection from client");

148 i‡(
	`∑r£_ªque°
(
sockë_to_˛õ¡
, 
nf2devi˚s
, 
num_√tÂgas
) < 0) {

149 
	`DPRINTF
();

150 
	`Ârötf
(
°dîr
, "ErrorÖarsingÅheÑequest\n");

152 
	`˛o£
(
sockë_to_˛õ¡
);

156 
	}
}

160 
	$›í_öãrÁ˚s
(
nf2devi˚
 **
nf2devi˚s
, 
num_√tÂgas
) {

161 
i
;

163 
i
=0; i<
num_√tÂgas
; i++) {

165 
nf2devi˚s
[
i
] = (
nf2devi˚
 *Ë
	`mÆloc
((nf2device));

166 i‡(
nf2devi˚s
[
i
] =
NULL
) {

167 
	`Ârötf
(
°dîr
, "Eº‹: DÿnŸ havêíough mem‹yÅÿ›í %u i¡îÁ˚s.\n", 
num_√tÂgas
);

168 
	`˛o£_öãrÁ˚s
(
nf2devi˚s
, 
i
);

169 
	`exô
(1);

173 
nf2devi˚s
[
i
]->
devi˚_«me
 = (*Ë
	`mÆloc
(7);

174 i‡(
nf2devi˚s
[
i
] =
NULL
) {

175 
	`Ârötf
(
°dîr
, "Eº‹: DÿnŸ havêíough mem‹yÅÿ›í %u i¡îÁ˚s.\n", 
num_√tÂgas
);

176 
	`‰ì
(
nf2devi˚s
[
i
]);

177 
	`˛o£_öãrÁ˚s
(
nf2devi˚s
, 
i
);

178 
	`exô
(1);

182 
	`•rötf
(
nf2devi˚s
[
i
]->
devi˚_«me
, "%s%d", 
NF2C
, i*4);

184 i‡(
	`check_iÁ˚
(
nf2devi˚s
[
i
]Ë|| 
	`›íDes¸ùt‹
(nf2devices[i])) {

185 
	`Ârötf
(
°dîr
, "Eº‹: check_iÁ˚ o∏›íDes¸ùt‹ %s\n", 
nf2devi˚s
[
i
]->
devi˚_«me
);

186 
	`‰ì
(
nf2devi˚s
[
i
]->
devi˚_«me
);

187 
	`‰ì
(
nf2devi˚s
[
i
]);

188 
	`˛o£_öãrÁ˚s
(
nf2devi˚s
, 
i
);

189 
	`exô
(1);

192 
	}
}

195 
	$˛o£_öãrÁ˚s
(
nf2devi˚
 **
nf2devi˚s
, 
num_√tÂgas
) {

196 
i
;

198 
i
=0; i<
num_√tÂgas
; i++) {

199 
	`˛o£Des¸ùt‹
(
nf2devi˚s
[
i
]);

200 
	`‰ì
(
nf2devi˚s
[
i
]->
devi˚_«me
);

201 
	`‰ì
(
nf2devi˚s
[
i
]);

203 
	}
}

210 
	$∑r£_ªque°
(
sockë_to_˛õ¡
, 
nf2devi˚
 **
nf2devi˚s
,

211 
num_√tÂgas
) {

212 
ƒód
;

213 
ªg_ªque°
 
ªq
;

216  (
ƒód
=
	`ªadn
(
sockë_to_˛õ¡
, (*)&
ªq
,

217 (
ªg_ªque°
))) == (reg_request)) {

218 
	`DPRINTF
("ReceivedÑeg_request:\n");

219 
	`d¥öt_ªq
(&
ªq
);

222 i‡(
ªq
.
devi˚_num
 < 
num_√tÂgas
) {

223 
	`DPRINTF
("DeviceÇum checks out.\n");

224 i‡(
ªq
.
ty≥
 =
READ_REQ
) {

225 
	`DPRINTF
("ExecutingÑead.\n");

226 
	`ªadReg
(
nf2devi˚s
[
ªq
.
devi˚_num
],Ñeq.
addªss
, &ªq.
d©a
);

227 } i‡(
ªq
.
ty≥
 =
WRITE_REQ
) {

228 
	`DPRINTF
("Executing write.\n");

229 
	`wrôeReg
(
nf2devi˚s
[
ªq
.
devi˚_num
],Ñeq.
addªss
,Ñeq.
d©a
);

230 } i‡(
ªq
.
ty≥
 =
CHECK_REQ
) {

231 
	`DPRINTF
("Executing check.\n");

232 
ªq
.
d©a
 = 1;

233 } i‡(
ªq
.
ty≥
 =
OPEN_REQ
) {

234 
	`DPRINTF
("Executing open.\n");

235 
ªq
.
d©a
 = 1;

236 } i‡(
ªq
.
ty≥
 =
CLOSE_REQ
) {

237 
	`DPRINTF
("Executing close.\n");

238 
	`DPRINTF
("SendingÑesponse:\n");

239 
	`d¥öt_ªq
(&
ªq
);

240 i‡(
	`wrôí
(
sockë_to_˛õ¡
, (c⁄° *)&
ªq
,

241 (
ªg_ªque°
))

242 < (
ªg_ªque°
)) {

243 
	`Ârötf
(
°dîr
, "Error: couldÇot writeÅo client.\n");

248 
	`Ârötf
(
°dîr
, "Eº‹: Unknow¿ªque°Åy≥ %u.\n", 
ªq
.
ty≥
);

249 
ªq
.
îr‹
 = -1;

252 
	`DPRINTF
("DeviceÇumber bad.\n");

253 i‡(
ªq
.
ty≥
 =
CHECK_REQ
) {

254 
	`DPRINTF
("Executing check_req.\n");

255 
ªq
.
d©a
 = 0;

257 
	`DPRINTF
("ExecutingÉlse.\n");

258 
ªq
.
îr‹
 = -1;

263 
	`DPRINTF
("SendingÑesponse:\n");

264 
	`d¥öt_ªq
(&
ªq
);

265 i‡(
	`wrôí
(
sockë_to_˛õ¡
, (c⁄° *)&
ªq
,

266 (
ªg_ªque°
)) < (reg_request)) {

267 
	`Ârötf
(
°dîr
, "Error: couldÇot writeÅo client.\n");

272 i‡(
ƒód
 == 0) {

274 } i‡(
ƒód
 < 0) {

275 
	`Ârötf
(
°dîr
, "ErrorÑeadingÅheÑeg_request struct.\n");

277 } i‡(
ƒód
 < (
ªg_ªque°
)) {

278 
	`Ârötf
(
°dîr
, "Error: DidÇotÑead fullÑeg_request struct.\n");

281 
	}
}

	@lib/reg_lib/reg_proxy_server.h

41 #i‚de‡
REG_PROXY_SERVER_H_


42 
	#REG_PROXY_SERVER_H_


	)

44 
	~"ªg_¥oxy.h
"

46 
	#NF2C
 "nf2c"

	)

48 
›í_öãrÁ˚s
(
nf2devi˚
 **
nf2devi˚s
, 
num_√tÂgas
);

49 
˛o£_öãrÁ˚s
(
nf2devi˚
 **
nf2devi˚s
, 
num_√tÂgas
);

50 
∑r£_ªque°
 (
sockë_to_˛õ¡
, 
nf2devi˚
 **
nf2devi˚s
, 
num_√tÂgas
);

	@main.c

1 
	~"comm™ds.h
"

2 
	~"tˇm_Êow_íåy.h
"

7 
	$maö
(
¨gc
,* 
¨gv
[]){

9 *
fûe
 = 
¨gv
[1];

10 *
com
[
MAX_DEPTH
];

11 *
out
[
MAX_DEPTH
][10];

12 
löe_num
;

13 
FlowE¡ry
 
TabÀInf‹
[5];

15 
löe_num
 = 
	`RódComm™dFûe
(
com
,
MAX_DEPTH
,
fûe
);

16 
	`Tøns„rComm™ds
(
com
,
löe_num
,
out
);

17 
Comm™d
 * 
íåy
[
löe_num
];

18 
i
 = 0;

19 
	`InôAŒTˇmTabÀ
();

20 
i
 = 0;i<
löe_num
;i++){

21 
íåy
[
i
] = (
Comm™d
 *)
	`mÆloc
((Command));

22 
	`Inô
(
íåy
[
i
],
TabÀInf‹
);

23 
	`¥ötf
("íåy %d :\t",
i
);

24 
	`AddE¡ry
(
out
[
i
],
íåy
[i],
TabÀInf‹
);

29 
i
 = 0;i<
löe_num
;i++){

30 
	`A˘iv©eO≥øti⁄
(
íåy
[
i
]);

35 
	}
}

	@tcam_flow_entry.c

1 
	~"tˇm_Êow_íåy.h
"

3 
	$InôAŒTˇmTabÀ
(){

4 
nf2devi˚
 
nf2
;

6 
nf2
.
devi˚_«me
 = 
DEFAULT_IFACE
;

7 
	`¥ötf
("%s",
nf2
.
devi˚_«me
);

9 i‡(
	`check_iÁ˚
(&
nf2
))

11 
	`exô
(1);

13 i‡(
	`›íDes¸ùt‹
(&
nf2
))

15 
	`exô
(1);

17 
i
 = 0;

18 
uöt32_t
 
ph_addr
;

19 
uöt32_t
 
addr
 = 0x10;

20 
uöt32_t
 
öô_ªq
 = 0x20000000;

21 
i
 = 0;i<5;i++){

22 
ph_addr
 = 
TabÀAddr
[
i
];

23 
	`wrôeReg
(&
nf2
, 
ph_addr
 + 
addr
, 
öô_ªq
);

24 
	`¥ötf
("ovî: %d",
i
);

27 
	}
}

28 
	$A˘iv©eO≥øti⁄
(
Comm™d
 * 
íåy
){

29 
íåy
->
›
){

30 
n›
 : ;

31 
èbÀ_öô
 : 
	`InôTˇmFlowE¡ry
(
íåy
); ;

32 
èbÀ_add
 : 
	`AddTˇmFlowE¡ry
(
íåy
); ;

33 
èbÀ_dñ
 : 
	`DñTˇmFlowE¡ry
(
íåy
); ;

36 
	}
}

37 
	$InôTˇmFlowE¡ry
(
Comm™d
 * 
íåy
){

38 
nf2devi˚
 
nf2
;

40 
nf2
.
devi˚_«me
 = 
DEFAULT_IFACE
;

41 
	`¥ötf
("%s",
nf2
.
devi˚_«me
);

43 i‡(
	`check_iÁ˚
(&
nf2
))

45 
	`exô
(1);

47 i‡(
	`›íDes¸ùt‹
(&
nf2
))

49 
	`exô
(1);

51 
uöt32_t
 
ph_addr
 = 
TabÀAddr
[
íåy
->
id
];

52 
uöt32_t
 
addr
 = 0x10;

53 
uöt32_t
 
öô_ªq
 = 0x20000000;

54 
	`wrôeReg
(&
nf2
, 
ph_addr
 + 
addr
, 
öô_ªq
);

56 
	}
}

58 
	$AddTˇmFlowE¡ry
(
Comm™d
 * 
íåy
){

59 
nf2devi˚
 
nf2
;

61 
nf2
.
devi˚_«me
 = 
DEFAULT_IFACE
;

63 i‡(
	`check_iÁ˚
(&
nf2
))

65 
	`exô
(1);

67 i‡(
	`›íDes¸ùt‹
(&
nf2
))

69 
	`exô
(1);

71 
uöt32_t
 
ph_addr
 = 
TabÀAddr
[
íåy
->
id
];

72 
uöt32_t
 
ack_addr
 = 0x10;

73 
uöt32_t
 
ack_ª•_addr
 = 0x11;

74 
uöt32_t
 
vld_addr
 = 0x13;

75 
uöt32_t
 
key_addr
 = 0x14;

76 
uöt32_t
 
mask_addr
 = 0x24;

77 
uöt32_t
 
vÆue_addr
 = 0x34;

79 
uöt32_t
 
vld_ªq
 = 0x00000000;

80 
uöt32_t
 
ack_ªq
 = 0x10000000 + 
íåy
->
¥i‹ôy
;

81 
uöt32_t
 
ack_ª•
 = 0x00000001;

83 
	`wrôeReg
(&
nf2
, 
ph_addr
 + 
vld_addr
, 
vld_ªq
);

84 
i
 = 0;

86 
i
 = 0;i<
íåy
->
key_wrôe_num
;i++){

87 
	`wrôeReg
(&
nf2
, 
ph_addr
 + 
key_addr
, 
íåy
->
key
[
i
]);

88 
key_addr
 ++;

91 
i
 = 0;i<
íåy
->
mask_wrôe_num
;i++){

92 
	`wrôeReg
(&
nf2
, 
ph_addr
 + 
mask_addr
, 
íåy
->
mask
[
i
]);

93 
mask_addr
 ++;

96 
i
 = 0;i<
íåy
->
vÆue_wrôe_num
;i++){

97 
	`wrôeReg
(&
nf2
, 
ph_addr
 + 
vÆue_addr
, 
íåy
->
vÆue
[
i
]);

98 
vÆue_addr
 ++;

100 
vld_ªq
 = 0x00000001;

101 
	`wrôeReg
(&
nf2
, 
ph_addr
 + 
vld_addr
, 
vld_ªq
);

102 
	`wrôeReg
(&
nf2
, 
ph_addr
 + 
ack_addr
, 
ack_ªq
);

103 
	`wrôeReg
(&
nf2
, 
ph_addr
 + 
ack_ª•_addr
, 
ack_ª•
);

108 
	}
}

110 
	$DñTˇmFlowE¡ry
(
Comm™d
 * 
íåy
){

112 
	}
}

	@tcam_flow_entry.h

1 #i‚de‡
_TCAM_FLOW_ENTRY_


2 
	#_TCAM_FLOW_ENTRY_


	)

4 
	~<°dio.h
>

5 
	~<uni°d.h
>

6 
	~<sys/mm™.h
>

7 
	~<sys/ty≥s.h
>

8 
	~<sys/°©.h
>

9 
	~<f˙é.h
>

10 
	~<°dlib.h
>

11 
	~<°döt.h
>

13 
	~<°rög.h
>

14 
	~<√t/if.h
>

15 
	~"comm™ds.h
"

16 
	~"lib/comm⁄/nf2utû.h
"

18 
	#DEFAULT_IFACE
 "mem"

	)

19 
	#READ_TEST
 0x0000040

	)

20 
InôAŒTˇmTabÀ
();

21 
InôTˇmFlowE¡ry
(
Comm™d
 * 
íåy
);

22 
AddTˇmFlowE¡ry
(
Comm™d
 * 
íåy
);

23 
DñTˇmFlowE¡ry
(
Comm™d
 * 
íåy
);

	@/usr/include/arpa/inet.h

18 #i‚de‡
_ARPA_INET_H


19 
	#_ARPA_INET_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<√töë/ö.h
>

25 #i‚de‡
__sockÀn_t_deföed


26 
__sockÀn_t
 
	tsockÀn_t
;

27 
	#__sockÀn_t_deföed


	)

30 
__BEGIN_DECLS


34 
ö_addr_t
 
	$öë_addr
 (c⁄° *
__˝
Ë
__THROW
;

37 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

41 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

42 
__THROW
;

45 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

49 
ö_addr_t
 
	$öë_√tw‹k
 (c⁄° *
__˝
Ë
__THROW
;

53 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

58 
	$öë_±⁄
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

59 *
__ª°ri˘
 
__buf
Ë
__THROW
;

64 c⁄° *
	$öë_¡›
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

65 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

66 
__THROW
;

70 #ifde‡
__USE_MISC


73 
	$öë_©⁄
 (c⁄° *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

77 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

82 *
	$öë_√t_¡›
 (
__af
, c⁄° *
__˝
, 
__bôs
,

83 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

88 
	$öë_√t_±⁄
 (
__af
, c⁄° *
__˝
,

89 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

94 
	$öë_nßp_addr
 (c⁄° *
__˝
,

95 *
__buf
, 
__Àn
Ë
__THROW
;

99 *
	$öë_nßp_¡ﬂ
 (
__Àn
, c⁄° *
__˝
,

100 *
__buf
Ë
__THROW
;

103 
__END_DECLS


	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


88 
	#as£π
(
ex¥
) \

89 ((
ex¥
) \

90 ? 
	`__ASSERT_VOID_CAST
 (0) \

91 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

93 #ifdef 
__USE_GNU


94 
	#as£π_≥º‹
(
î∫um
) \

95 (!(
î∫um
) \

96 ? 
	`__ASSERT_VOID_CAST
 (0) \

97 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

105 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

106 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

108 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

109 
	#__ASSERT_FUNCTION
 
__func__


	)

111 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

118 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


120 #unde‡
°©ic_as£π


121 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

40 #i‚de‡
__mode_t_deföed


41 
__mode_t
 
	tmode_t
;

42 
	#__mode_t_deföed


	)

45 #i‚de‡
__off_t_deföed


46 #i‚de‡
__USE_FILE_OFFSET64


47 
__off_t
 
	toff_t
;

49 
__off64_t
 
	toff_t
;

51 
	#__off_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


55 
__off64_t
 
	toff64_t
;

56 
	#__off64_t_deföed


	)

59 #i‚de‡
__pid_t_deföed


60 
__pid_t
 
	tpid_t
;

61 
	#__pid_t_deföed


	)

65 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


66 
	#__√ed_time•ec


	)

67 
	~<time.h
>

68 
	~<bôs/°©.h
>

70 
	#S_IFMT
 
__S_IFMT


	)

71 
	#S_IFDIR
 
__S_IFDIR


	)

72 
	#S_IFCHR
 
__S_IFCHR


	)

73 
	#S_IFBLK
 
__S_IFBLK


	)

74 
	#S_IFREG
 
__S_IFREG


	)

75 #ifde‡
__S_IFIFO


76 
	#S_IFIFO
 
__S_IFIFO


	)

78 #ifde‡
__S_IFLNK


79 
	#S_IFLNK
 
__S_IFLNK


	)

81 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


82 
	#S_IFSOCK
 
__S_IFSOCK


	)

87 
	#S_ISUID
 
__S_ISUID


	)

88 
	#S_ISGID
 
__S_ISGID


	)

90 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


92 
	#S_ISVTX
 
__S_ISVTX


	)

95 
	#S_IRUSR
 
__S_IREAD


	)

96 
	#S_IWUSR
 
__S_IWRITE


	)

97 
	#S_IXUSR
 
__S_IEXEC


	)

99 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

101 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

102 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

103 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

105 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

107 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

108 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

109 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

111 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

114 #ifdef 
__USE_MISC


115 #i‚de‡
R_OK


118 
	#R_OK
 4

	)

119 
	#W_OK
 2

	)

120 
	#X_OK
 1

	)

121 
	#F_OK
 0

	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#SEEK_SET
 0

	)

128 
	#SEEK_CUR
 1

	)

129 
	#SEEK_END
 2

	)

137 
f˙é
 (
__fd
, 
__cmd
, ...);

145 #i‚de‡
__USE_FILE_OFFSET64


146 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

148 #ifde‡
__REDIRECT


149 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

150 
	`__n⁄nuŒ
 ((1));

152 
	#›í
 
›í64


	)

155 #ifde‡
__USE_LARGEFILE64


156 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

159 #ifde‡
__USE_ATFILE


169 #i‚de‡
__USE_FILE_OFFSET64


170 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

171 
	`__n⁄nuŒ
 ((2));

173 #ifde‡
__REDIRECT


174 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

175 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

177 
	#›í©
 
›í©64


	)

180 #ifde‡
__USE_LARGEFILE64


181 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

182 
	`__n⁄nuŒ
 ((2));

191 #i‚de‡
__USE_FILE_OFFSET64


192 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

194 #ifde‡
__REDIRECT


195 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

196 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

198 
	#¸ót
 
¸ót64


	)

201 #ifde‡
__USE_LARGEFILE64


202 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

205 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

206 && !
deföed
 
__USE_POSIX
))

215 
	#F_ULOCK
 0

	)

216 
	#F_LOCK
 1

	)

217 
	#F_TLOCK
 2

	)

218 
	#F_TEST
 3

	)

220 #i‚de‡
__USE_FILE_OFFSET64


221 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

223 #ifde‡
__REDIRECT


224 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

226 
	#lockf
 
lockf64


	)

229 #ifde‡
__USE_LARGEFILE64


230 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

234 #ifde‡
__USE_XOPEN2K


237 #i‚de‡
__USE_FILE_OFFSET64


238 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

239 
__advi£
Ë
__THROW
;

241 #ifde‡
__REDIRECT_NTH


242 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

243 
__off64_t
 
__Àn
, 
__advi£
),

244 
posix_Ádvi£64
);

246 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

249 #ifde‡
__USE_LARGEFILE64


250 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

251 
__advi£
Ë
__THROW
;

259 #i‚de‡
__USE_FILE_OFFSET64


260 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

262 #ifde‡
__REDIRECT


263 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

264 
__off64_t
 
__Àn
),

265 
posix_ÁŒoˇã64
);

267 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

270 #ifde‡
__USE_LARGEFILE64


271 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

277 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

278 && 
deföed
 
__va_¨g_∑ck_Àn


279 
	~<bôs/f˙é2.h
>

282 
__END_DECLS


	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 #ifde‡
__USE_EXTERN_INLINES


316 #i‡
__WORDSIZE
 == 64

318 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

319 **
__ª°ri˘
 
__íd±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

323 
__exã∫_ölöe
 
ötmax_t


324 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

325 
ba£
))

327  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

328 
	}
}

330 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 ** 
__ª°ri˘
 
__íd±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

335 
__exã∫_ölöe
 
uötmax_t


336 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

337 
ba£
))

339  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

343 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

347 
__exã∫_ölöe
 
ötmax_t


348 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

349 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

351  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

355 
__ª°ri˘
 
__≈å
,

356 
__gwch¨_t
 **

357 
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

361 
__exã∫_ölöe
 
uötmax_t


362 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

363 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

365  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

366 
	}
}

370 
__exãnsi⁄__


371 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

376 
__exã∫_ölöe
 
ötmax_t


377 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

378 
ba£
))

380  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

381 
	}
}

383 
__exãnsi⁄__


384 
	$__°πouŒ_öã∫Æ
 (const *

385 
__ª°ri˘
 
__≈å
,

387 
__ª°ri˘
 
__íd±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

392 
__exã∫_ölöe
 
uötmax_t


393 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

394 
ba£
))

396  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

397 
	}
}

399 
__exãnsi⁄__


400 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

405 
__exã∫_ölöe
 
ötmax_t


406 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

407 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

409  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

410 
	}
}

413 
__exãnsi⁄__


414 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

415 
__ª°ri˘
 
__≈å
,

416 
__gwch¨_t
 **

417 
__ª°ri˘
 
__íd±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

422 
__exã∫_ölöe
 
uötmax_t


423 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

424 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

426  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/linux/sockios.h

18 #i‚de‡
_LINUX_SOCKIOS_H


19 
	#_LINUX_SOCKIOS_H


	)

21 
	~<asm/sockios.h
>

24 
	#SIOCINQ
 
FIONREAD


	)

25 
	#SIOCOUTQ
 
TIOCOUTQ


	)

28 
	#SIOCADDRT
 0x890B

	)

29 
	#SIOCDELRT
 0x890C

	)

30 
	#SIOCRTMSG
 0x890D

	)

33 
	#SIOCGIFNAME
 0x8910

	)

34 
	#SIOCSIFLINK
 0x8911

	)

35 
	#SIOCGIFCONF
 0x8912

	)

36 
	#SIOCGIFFLAGS
 0x8913

	)

37 
	#SIOCSIFFLAGS
 0x8914

	)

38 
	#SIOCGIFADDR
 0x8915

	)

39 
	#SIOCSIFADDR
 0x8916

	)

40 
	#SIOCGIFDSTADDR
 0x8917

	)

41 
	#SIOCSIFDSTADDR
 0x8918

	)

42 
	#SIOCGIFBRDADDR
 0x8919

	)

43 
	#SIOCSIFBRDADDR
 0x891®

	)

44 
	#SIOCGIFNETMASK
 0x891b

	)

45 
	#SIOCSIFNETMASK
 0x891¯

	)

46 
	#SIOCGIFMETRIC
 0x891d

	)

47 
	#SIOCSIFMETRIC
 0x891ê

	)

48 
	#SIOCGIFMEM
 0x891‡

	)

49 
	#SIOCSIFMEM
 0x8920

	)

50 
	#SIOCGIFMTU
 0x8921

	)

51 
	#SIOCSIFMTU
 0x8922

	)

52 
	#SIOCSIFNAME
 0x8923

	)

53 
	#SIOCSIFHWADDR
 0x8924

	)

54 
	#SIOCGIFENCAP
 0x8925

	)

55 
	#SIOCSIFENCAP
 0x8926

	)

56 
	#SIOCGIFHWADDR
 0x8927

	)

57 
	#SIOCGIFSLAVE
 0x8929

	)

58 
	#SIOCSIFSLAVE
 0x8930

	)

59 
	#SIOCADDMULTI
 0x8931

	)

60 
	#SIOCDELMULTI
 0x8932

	)

61 
	#SIOCGIFINDEX
 0x8933

	)

62 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

63 
	#SIOCSIFPFLAGS
 0x8934

	)

64 
	#SIOCGIFPFLAGS
 0x8935

	)

65 
	#SIOCDIFADDR
 0x8936

	)

66 
	#SIOCSIFHWBROADCAST
 0x8937

	)

67 
	#SIOCGIFCOUNT
 0x8938

	)

69 
	#SIOCGIFBR
 0x8940

	)

70 
	#SIOCSIFBR
 0x8941

	)

72 
	#SIOCGIFTXQLEN
 0x8942

	)

73 
	#SIOCSIFTXQLEN
 0x8943

	)

78 
	#SIOCETHTOOL
 0x8946

	)

80 
	#SIOCGMIIPHY
 0x8947

	)

81 
	#SIOCGMIIREG
 0x8948

	)

82 
	#SIOCSMIIREG
 0x8949

	)

84 
	#SIOCWANDEV
 0x894A

	)

86 
	#SIOCOUTQNSD
 0x894B

	)

90 
	#SIOCDARP
 0x8953

	)

91 
	#SIOCGARP
 0x8954

	)

92 
	#SIOCSARP
 0x8955

	)

95 
	#SIOCDRARP
 0x8960

	)

96 
	#SIOCGRARP
 0x8961

	)

97 
	#SIOCSRARP
 0x8962

	)

101 
	#SIOCGIFMAP
 0x8970

	)

102 
	#SIOCSIFMAP
 0x8971

	)

106 
	#SIOCADDDLCI
 0x8980

	)

107 
	#SIOCDELDLCI
 0x8981

	)

109 
	#SIOCGIFVLAN
 0x8982

	)

110 
	#SIOCSIFVLAN
 0x8983

	)

114 
	#SIOCBONDENSLAVE
 0x8990

	)

115 
	#SIOCBONDRELEASE
 0x8991

	)

116 
	#SIOCBONDSETHWADDR
 0x8992

	)

117 
	#SIOCBONDSLAVEINFOQUERY
 0x8993

	)

118 
	#SIOCBONDINFOQUERY
 0x8994

	)

119 
	#SIOCBONDCHANGEACTIVE
 0x8995

	)

122 
	#SIOCBRADDBR
 0x89a0

	)

123 
	#SIOCBRDELBR
 0x89a1

	)

124 
	#SIOCBRADDIF
 0x89a2

	)

125 
	#SIOCBRDELIF
 0x89a3

	)

128 
	#SIOCSHWTSTAMP
 0x89b0

	)

129 
	#SIOCGHWTSTAMP
 0x89b1

	)

142 
	#SIOCDEVPRIVATE
 0x89F0

	)

148 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/net/if.h

19 #i‚de‡
_NET_IF_H


20 
	#_NET_IF_H
 1

	)

22 
	~<„©uªs.h
>

24 #ifde‡
__USE_MISC


25 
	~<sys/ty≥s.h
>

26 
	~<sys/sockë.h
>

31 
	#IF_NAMESIZE
 16

	)

33 
	sif_«meödex


35 
	mif_ödex
;

36 *
	mif_«me
;

40 #ifde‡
__USE_MISC


44 
	mIFF_UP
 = 0x1,

45 
	#IFF_UP
 
IFF_UP


	)

46 
	mIFF_BROADCAST
 = 0x2,

47 
	#IFF_BROADCAST
 
IFF_BROADCAST


	)

48 
	mIFF_DEBUG
 = 0x4,

49 
	#IFF_DEBUG
 
IFF_DEBUG


	)

50 
	mIFF_LOOPBACK
 = 0x8,

51 
	#IFF_LOOPBACK
 
IFF_LOOPBACK


	)

52 
	mIFF_POINTOPOINT
 = 0x10,

53 
	#IFF_POINTOPOINT
 
IFF_POINTOPOINT


	)

54 
	mIFF_NOTRAILERS
 = 0x20,

55 
	#IFF_NOTRAILERS
 
IFF_NOTRAILERS


	)

56 
	mIFF_RUNNING
 = 0x40,

57 
	#IFF_RUNNING
 
IFF_RUNNING


	)

58 
	mIFF_NOARP
 = 0x80,

59 
	#IFF_NOARP
 
IFF_NOARP


	)

60 
	mIFF_PROMISC
 = 0x100,

61 
	#IFF_PROMISC
 
IFF_PROMISC


	)

64 
	mIFF_ALLMULTI
 = 0x200,

65 
	#IFF_ALLMULTI
 
IFF_ALLMULTI


	)

67 
	mIFF_MASTER
 = 0x400,

68 
	#IFF_MASTER
 
IFF_MASTER


	)

69 
	mIFF_SLAVE
 = 0x800,

70 
	#IFF_SLAVE
 
IFF_SLAVE


	)

72 
	mIFF_MULTICAST
 = 0x1000,

73 
	#IFF_MULTICAST
 
IFF_MULTICAST


	)

75 
	mIFF_PORTSEL
 = 0x2000,

76 
	#IFF_PORTSEL
 
IFF_PORTSEL


	)

77 
	mIFF_AUTOMEDIA
 = 0x4000,

78 
	#IFF_AUTOMEDIA
 
IFF_AUTOMEDIA


	)

79 
	mIFF_DYNAMIC
 = 0x8000

80 
	#IFF_DYNAMIC
 
IFF_DYNAMIC


	)

88 
	siÁddr


90 
sockaddr
 
	miÁ_addr
;

93 
sockaddr
 
	mifu_brﬂdaddr
;

94 
sockaddr
 
	mifu_d°addr
;

95 } 
	miÁ_ifu
;

96 
iÁ˚
 *
	miÁ_iÂ
;

97 
iÁddr
 *
	miÁ_√xt
;

100 
	#iÁ_brﬂdaddr
 
iÁ_ifu
.
ifu_brﬂdaddr


	)

101 
	#iÁ_d°addr
 
iÁ_ifu
.
ifu_d°addr


	)

111 
	sifm≠


113 
	mmem_°¨t
;

114 
	mmem_íd
;

115 
	mba£_addr
;

116 
	múq
;

117 
	mdma
;

118 
	mp‹t
;

126 
	si‰eq


128 
	#IFHWADDRLEN
 6

	)

129 
	#IFNAMSIZ
 
IF_NAMESIZE


	)

132 
	mi‰n_«me
[
IFNAMSIZ
];

133 } 
	mi‰_i‰n
;

137 
sockaddr
 
	mi‰u_addr
;

138 
sockaddr
 
	mi‰u_d°addr
;

139 
sockaddr
 
	mi‰u_brﬂdaddr
;

140 
sockaddr
 
	mi‰u_√tmask
;

141 
sockaddr
 
	mi‰u_hwaddr
;

142 
	mi‰u_Êags
;

143 
	mi‰u_ivÆue
;

144 
	mi‰u_mtu
;

145 
ifm≠
 
	mi‰u_m≠
;

146 
	mi‰u_¶ave
[
IFNAMSIZ
];

147 
	mi‰u_√w«me
[
IFNAMSIZ
];

148 
__ˇddr_t
 
	mi‰u_d©a
;

149 } 
	mi‰_i‰u
;

151 
	#i‰_«me
 
i‰_i‰n
.
i‰n_«me


	)

152 
	#i‰_hwaddr
 
i‰_i‰u
.
i‰u_hwaddr


	)

153 
	#i‰_addr
 
i‰_i‰u
.
i‰u_addr


	)

154 
	#i‰_d°addr
 
i‰_i‰u
.
i‰u_d°addr


	)

155 
	#i‰_brﬂdaddr
 
i‰_i‰u
.
i‰u_brﬂdaddr


	)

156 
	#i‰_√tmask
 
i‰_i‰u
.
i‰u_√tmask


	)

157 
	#i‰_Êags
 
i‰_i‰u
.
i‰u_Êags


	)

158 
	#i‰_mëric
 
i‰_i‰u
.
i‰u_ivÆue


	)

159 
	#i‰_mtu
 
i‰_i‰u
.
i‰u_mtu


	)

160 
	#i‰_m≠
 
i‰_i‰u
.
i‰u_m≠


	)

161 
	#i‰_¶ave
 
i‰_i‰u
.
i‰u_¶ave


	)

162 
	#i‰_d©a
 
i‰_i‰u
.
i‰u_d©a


	)

163 
	#i‰_ifödex
 
i‰_i‰u
.
i‰u_ivÆue


	)

164 
	#i‰_b™dwidth
 
i‰_i‰u
.
i‰u_ivÆue


	)

165 
	#i‰_qÀn
 
i‰_i‰u
.
i‰u_ivÆue


	)

166 
	#i‰_√w«me
 
i‰_i‰u
.
i‰u_√w«me


	)

167 
	#_IOT_i‰eq
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),16,0,0)

	)

168 
	#_IOT_i‰eq_sh‹t
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),1,0,0)

	)

169 
	#_IOT_i‰eq_öt
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),1,0,0)

	)

176 
	sifc⁄f


178 
	mifc_Àn
;

181 
__ˇddr_t
 
	mifcu_buf
;

182 
i‰eq
 *
	mifcu_ªq
;

183 } 
	mifc_ifcu
;

185 
	#ifc_buf
 
ifc_ifcu
.
ifcu_buf


	)

186 
	#ifc_ªq
 
ifc_ifcu
.
ifcu_ªq


	)

187 
	#_IOT_ifc⁄f
 
	`_IOT
(
	`_IOTS
(
ifc⁄f
),1,0,0,0,0Ë

	)

190 
__BEGIN_DECLS


193 
	$if_«mëoödex
 (c⁄° *
__i‚ame
Ë
__THROW
;

194 *
	$if_ödext⁄ame
 (
__ifödex
, *
__i‚ame
Ë
__THROW
;

197 
if_«meödex
 *
	$if_«meödex
 (Ë
__THROW
;

200 
	$if_‰ì«meödex
 (
if_«meödex
 *
__±r
Ë
__THROW
;

202 
__END_DECLS


	@/usr/include/netdb.h

22 #i‚def 
_NETDB_H


23 
	#_NETDB_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<√töë/ö.h
>

28 
	~<°döt.h
>

29 #ifde‡
__USE_MISC


32 
	~<Ωc/√tdb.h
>

35 #ifde‡
__USE_GNU


36 
	#__√ed_sigevít_t


	)

37 
	~<bôs/sigöfo.h
>

38 
	#__√ed_time•ec


	)

39 
	~<time.h
>

42 
	~<bôs/√tdb.h
>

45 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

46 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

47 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

48 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

49 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

50 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

53 
	g__BEGIN_DECLS


55 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


58 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

61 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

65 
	#HOST_NOT_FOUND
 1

	)

66 
	#TRY_AGAIN
 2

	)

68 
	#NO_RECOVERY
 3

	)

70 
	#NO_DATA
 4

	)

73 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


74 
	#NETDB_INTERNAL
 -1

	)

75 
	#NETDB_SUCCESS
 0

	)

76 
	#NO_ADDRESS
 
NO_DATA


	)

79 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_XOPEN_EXTENDED


81 
	#IPPORT_RESERVED
 1024

	)

84 #ifde‡
__USE_GNU


86 
	#SCOPE_DELIMITER
 '%'

	)

89 #ifde‡
__USE_MISC


92 
	$hîr‹
 (c⁄° *
__°r
Ë
__THROW
;

95 c⁄° *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

100 
	sho°ít


102 *
h_«me
;

103 **
h_Æü£s
;

104 
h_addπy≥
;

105 
h_Àngth
;

106 **
h_addr_li°
;

107 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


108 
	#h_addr
 
h_addr_li°
[0]

	)

117 
	`£tho°ít
 (
__°ay_›í
);

123 
	`ídho°ít
 ();

130 
ho°ít
 *
	`gëho°ít
 ();

137 
ho°ít
 *
	`gëho°byaddr
 (c⁄° *
__addr
, 
__sockÀn_t
 
__Àn
,

138 
__ty≥
);

144 
ho°ít
 *
	`gëho°by«me
 (c⁄° *
__«me
);

146 #ifde‡
__USE_MISC


155 
ho°ít
 *
	`gëho°by«me2
 (c⁄° *
__«me
, 
__af
);

167 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

168 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

169 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

170 *
__ª°ri˘
 
__h_î∫›
);

172 
	`gëho°byaddr_r
 (c⁄° *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

173 
__ty≥
,

174 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

176 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

177 *
__ª°ri˘
 
__h_î∫›
);

179 
	`gëho°by«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

180 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

181 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

182 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

183 *
__ª°ri˘
 
__h_î∫›
);

185 
	`gëho°by«me2_r
 (c⁄° *
__ª°ri˘
 
__«me
, 
__af
,

186 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

187 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

188 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

189 *
__ª°ri˘
 
__h_î∫›
);

198 
	`£äëít
 (
__°ay_›í
);

204 
	`íd√ã¡
 ();

211 
√ã¡
 *
	`gë√ã¡
 ();

218 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

224 
√ã¡
 *
	`gë√tby«me
 (c⁄° *
__«me
);

226 #ifdef 
__USE_MISC


237 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

238 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

239 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

240 *
__ª°ri˘
 
__h_î∫›
);

242 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

243 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

244 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

245 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

246 *
__ª°ri˘
 
__h_î∫›
);

248 
	`gë√tby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

249 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

250 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

251 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

252 *
__ª°ri˘
 
__h_î∫›
);

257 
	s£rvít


259 *
s_«me
;

260 **
s_Æü£s
;

261 
s_p‹t
;

262 *
s_¥Ÿo
;

270 
	`£t£rvít
 (
__°ay_›í
);

276 
	`íd£rvít
 ();

283 
£rvít
 *
	`gë£rvít
 ();

290 
£rvít
 *
	`gë£rvby«me
 (c⁄° *
__«me
, c⁄° *
__¥Ÿo
);

297 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, c⁄° *
__¥Ÿo
);

300 #ifdef 
__USE_MISC


308 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

309 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

310 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

312 
	`gë£rvby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

313 c⁄° *
__ª°ri˘
 
__¥Ÿo
,

314 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

315 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

316 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

318 
	`gë£rvbyp‹t_r
 (
__p‹t
, c⁄° *
__ª°ri˘
 
__¥Ÿo
,

319 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

320 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

321 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

326 
	s¥Ÿ€¡


328 *
p_«me
;

329 **
p_Æü£s
;

330 
p_¥Ÿo
;

338 
	`£çrŸ€¡
 (
__°ay_›í
);

344 
	`íd¥Ÿ€¡
 ();

351 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

357 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (c⁄° *
__«me
);

363 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

366 #ifdef 
__USE_MISC


374 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

375 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

376 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

378 
	`gë¥Ÿoby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

379 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

380 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

381 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

383 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

384 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

385 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

386 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

395 
	`£äëgª¡
 (c⁄° *
__√tgroup
);

403 
	`íd√tgª¡
 ();

412 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

413 **
__ª°ri˘
 
__u£Ω
,

414 **
__ª°ri˘
 
__domaöp
);

423 
	`ö√tgr
 (c⁄° *
__√tgroup
, c⁄° *
__ho°
,

424 c⁄° *
__u£r
, c⁄° *
__domaö
);

432 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

433 **
__ª°ri˘
 
__u£Ω
,

434 **
__ª°ri˘
 
__domaöp
,

435 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

439 #ifde‡
__USE_BSD


451 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

452 c⁄° *
__ª°ri˘
 
__locu£r
,

453 c⁄° *
__ª°ri˘
 
__ªmu£r
,

454 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

463 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

464 c⁄° *
__ª°ri˘
 
__locu£r
,

465 c⁄° *
__ª°ri˘
 
__ªmu£r
,

466 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

467 
ß_Ámûy_t
 
__af
);

479 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

480 c⁄° *
__ª°ri˘
 
__«me
,

481 c⁄° *
__ª°ri˘
 
__∑ss
,

482 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

491 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

492 c⁄° *
__ª°ri˘
 
__«me
,

493 c⁄° *
__ª°ri˘
 
__∑ss
,

494 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

495 
ß_Ámûy_t
 
__af
);

505 
	`ru£rok
 (c⁄° *
__rho°
, 
__su£r
,

506 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

515 
	`ru£rok_af
 (c⁄° *
__rho°
, 
__su£r
,

516 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

517 
ß_Ámûy_t
 
__af
);

528 
	`úu£rok
 (
uöt32_t
 
__øddr
, 
__su£r
,

529 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

539 
	`úu£rok_af
 (c⁄° *
__øddr
, 
__su£r
,

540 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

541 
ß_Ámûy_t
 
__af
);

551 
	`ºesvp‹t
 (*
__Æp‹t
);

560 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

565 #ifdef 
__USE_POSIX


567 
	saddröfo


569 
ai_Êags
;

570 
ai_Ámûy
;

571 
ai_sockty≥
;

572 
ai_¥Ÿocﬁ
;

573 
sockÀn_t
 
ai_addæí
;

574 
sockaddr
 *
ai_addr
;

575 *
ai_ˇn⁄«me
;

576 
addröfo
 *
ai_√xt
;

579 #ifde‡
__USE_GNU


581 
	sgaicb


583 c⁄° *
¨_«me
;

584 c⁄° *
¨_£rvi˚
;

585 c⁄° 
addröfo
 *
¨_ªque°
;

586 
addröfo
 *
¨_ªsu…
;

588 
__ªtu∫
;

589 
__glibc_ª£rved
[5];

593 
	#GAI_WAIT
 0

	)

594 
	#GAI_NOWAIT
 1

	)

598 
	#AI_PASSIVE
 0x0001

	)

599 
	#AI_CANONNAME
 0x0002

	)

600 
	#AI_NUMERICHOST
 0x0004

	)

601 
	#AI_V4MAPPED
 0x0008

	)

602 
	#AI_ALL
 0x0010

	)

603 
	#AI_ADDRCONFIG
 0x0020

	)

605 #ifde‡
__USE_GNU


606 
	#AI_IDN
 0x0040

	)

609 
	#AI_CANONIDN
 0x0080

	)

610 
	#AI_IDN_ALLOW_UNASSIGNED
 0x0100

	)

612 
	#AI_IDN_USE_STD3_ASCII_RULES
 0x0200

	)

615 
	#AI_NUMERICSERV
 0x0400

	)

618 
	#EAI_BADFLAGS
 -1

	)

619 
	#EAI_NONAME
 -2

	)

620 
	#EAI_AGAIN
 -3

	)

621 
	#EAI_FAIL
 -4

	)

622 
	#EAI_FAMILY
 -6

	)

623 
	#EAI_SOCKTYPE
 -7

	)

624 
	#EAI_SERVICE
 -8

	)

625 
	#EAI_MEMORY
 -10

	)

626 
	#EAI_SYSTEM
 -11

	)

627 
	#EAI_OVERFLOW
 -12

	)

628 #ifde‡
__USE_GNU


629 
	#EAI_NODATA
 -5

	)

630 
	#EAI_ADDRFAMILY
 -9

	)

631 
	#EAI_INPROGRESS
 -100

	)

632 
	#EAI_CANCELED
 -101

	)

633 
	#EAI_NOTCANCELED
 -102

	)

634 
	#EAI_ALLDONE
 -103

	)

635 
	#EAI_INTR
 -104

	)

636 
	#EAI_IDN_ENCODE
 -105

	)

639 #ifde‡
__USE_MISC


640 
	#NI_MAXHOST
 1025

	)

641 
	#NI_MAXSERV
 32

	)

644 
	#NI_NUMERICHOST
 1

	)

645 
	#NI_NUMERICSERV
 2

	)

646 
	#NI_NOFQDN
 4

	)

647 
	#NI_NAMEREQD
 8

	)

648 
	#NI_DGRAM
 16

	)

649 #ifde‡
__USE_GNU


650 
	#NI_IDN
 32

	)

651 
	#NI_IDN_ALLOW_UNASSIGNED
 64

	)

653 
	#NI_IDN_USE_STD3_ASCII_RULES
 128

	)

662 
	`gëaddröfo
 (c⁄° *
__ª°ri˘
 
__«me
,

663 c⁄° *
__ª°ri˘
 
__£rvi˚
,

664 c⁄° 
addröfo
 *
__ª°ri˘
 
__ªq
,

665 
addröfo
 **
__ª°ri˘
 
__∑i
);

668 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

671 c⁄° *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

677 
	`gë«meöfo
 (c⁄° 
sockaddr
 *
__ª°ri˘
 
__ß
,

678 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

679 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

680 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

683 #ifde‡
__USE_GNU


692 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

693 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

703 
	`gai_su•íd
 (c⁄° 
gaicb
 *c⁄° 
__li°
[], 
__ít
,

704 c⁄° 
time•ec
 *
__timeout
);

707 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

710 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

713 
__END_DECLS


	@/usr/include/netinet/in.h

18 #i‚def 
_NETINET_IN_H


19 
	#_NETINET_IN_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<°döt.h
>

23 
	~<sys/sockë.h
>

24 
	~<bôs/ty≥s.h
>

27 
__BEGIN_DECLS


30 
uöt32_t
 
	tö_addr_t
;

31 
	sö_addr


33 
ö_addr_t
 
	ms_addr
;

37 
	~<bôs/ö.h
>

42 
	mIPPROTO_IP
 = 0,

43 
	#IPPROTO_IP
 
IPPROTO_IP


	)

44 
	mIPPROTO_ICMP
 = 1,

45 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

46 
	mIPPROTO_IGMP
 = 2,

47 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

48 
	mIPPROTO_IPIP
 = 4,

49 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

50 
	mIPPROTO_TCP
 = 6,

51 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

52 
	mIPPROTO_EGP
 = 8,

53 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

54 
	mIPPROTO_PUP
 = 12,

55 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

56 
	mIPPROTO_UDP
 = 17,

57 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

58 
	mIPPROTO_IDP
 = 22,

59 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

60 
	mIPPROTO_TP
 = 29,

61 
	#IPPROTO_TP
 
IPPROTO_TP


	)

62 
	mIPPROTO_DCCP
 = 33,

63 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

64 
	mIPPROTO_IPV6
 = 41,

65 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

66 
	mIPPROTO_RSVP
 = 46,

67 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

68 
	mIPPROTO_GRE
 = 47,

69 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

70 
	mIPPROTO_ESP
 = 50,

71 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

72 
	mIPPROTO_AH
 = 51,

73 
	#IPPROTO_AH
 
IPPROTO_AH


	)

74 
	mIPPROTO_MTP
 = 92,

75 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

76 
	mIPPROTO_BEETPH
 = 94,

77 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

78 
	mIPPROTO_ENCAP
 = 98,

79 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

80 
	mIPPROTO_PIM
 = 103,

81 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

82 
	mIPPROTO_COMP
 = 108,

83 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

84 
	mIPPROTO_SCTP
 = 132,

85 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

86 
	mIPPROTO_UDPLITE
 = 136,

87 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

88 
	mIPPROTO_RAW
 = 255,

89 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

90 
	mIPPROTO_MAX


96 #i‚de‡
__USE_KERNEL_IPV6_DEFS


99 
	mIPPROTO_HOPOPTS
 = 0,

100 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

101 
	mIPPROTO_ROUTING
 = 43,

102 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

103 
	mIPPROTO_FRAGMENT
 = 44,

104 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

105 
	mIPPROTO_ICMPV6
 = 58,

106 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

107 
	mIPPROTO_NONE
 = 59,

108 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

109 
	mIPPROTO_DSTOPTS
 = 60,

110 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

111 
	mIPPROTO_MH
 = 135

112 
	#IPPROTO_MH
 
IPPROTO_MH


	)

117 
uöt16_t
 
	tö_p‹t_t
;

122 
	mIPPORT_ECHO
 = 7,

123 
	mIPPORT_DISCARD
 = 9,

124 
	mIPPORT_SYSTAT
 = 11,

125 
	mIPPORT_DAYTIME
 = 13,

126 
	mIPPORT_NETSTAT
 = 15,

127 
	mIPPORT_FTP
 = 21,

128 
	mIPPORT_TELNET
 = 23,

129 
	mIPPORT_SMTP
 = 25,

130 
	mIPPORT_TIMESERVER
 = 37,

131 
	mIPPORT_NAMESERVER
 = 42,

132 
	mIPPORT_WHOIS
 = 43,

133 
	mIPPORT_MTP
 = 57,

135 
	mIPPORT_TFTP
 = 69,

136 
	mIPPORT_RJE
 = 77,

137 
	mIPPORT_FINGER
 = 79,

138 
	mIPPORT_TTYLINK
 = 87,

139 
	mIPPORT_SUPDUP
 = 95,

142 
	mIPPORT_EXECSERVER
 = 512,

143 
	mIPPORT_LOGINSERVER
 = 513,

144 
	mIPPORT_CMDSERVER
 = 514,

145 
	mIPPORT_EFSSERVER
 = 520,

148 
	mIPPORT_BIFFUDP
 = 512,

149 
	mIPPORT_WHOSERVER
 = 513,

150 
	mIPPORT_ROUTESERVER
 = 520,

153 
	mIPPORT_RESERVED
 = 1024,

156 
	mIPPORT_USERRESERVED
 = 5000

164 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

165 
	#IN_CLASSA_NET
 0xff000000

	)

166 
	#IN_CLASSA_NSHIFT
 24

	)

167 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

168 
	#IN_CLASSA_MAX
 128

	)

170 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

171 
	#IN_CLASSB_NET
 0xffff0000

	)

172 
	#IN_CLASSB_NSHIFT
 16

	)

173 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

174 
	#IN_CLASSB_MAX
 65536

	)

176 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

177 
	#IN_CLASSC_NET
 0xffffff00

	)

178 
	#IN_CLASSC_NSHIFT
 8

	)

179 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

181 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

182 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

184 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

185 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

188 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

190 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

192 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

195 
	#IN_LOOPBACKNET
 127

	)

197 #i‚de‡
INADDR_LOOPBACK


198 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

202 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

203 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

204 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

205 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

207 #i‚de‡
__USE_KERNEL_IPV6_DEFS


209 
	sö6_addr


213 
uöt8_t
 
	m__u6_addr8
[16];

214 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


215 
uöt16_t
 
	m__u6_addr16
[8];

216 
uöt32_t
 
	m__u6_addr32
[4];

218 } 
	m__ö6_u
;

219 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

220 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


221 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

222 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

227 c⁄° 
ö6_addr
 
ö6addr_™y
;

228 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

229 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

230 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

232 
	#INET_ADDRSTRLEN
 16

	)

233 
	#INET6_ADDRSTRLEN
 46

	)

237 
	ssockaddr_ö


239 
__SOCKADDR_COMMON
 (
sö_
);

240 
ö_p‹t_t
 
	msö_p‹t
;

241 
ö_addr
 
	msö_addr
;

244 
	msö_zîo
[ (
sockaddr
) -

245 
__SOCKADDR_COMMON_SIZE
 -

246  (
ö_p‹t_t
) -

247  (
ö_addr
)];

250 #i‚de‡
__USE_KERNEL_IPV6_DEFS


252 
	ssockaddr_ö6


254 
__SOCKADDR_COMMON
 (
sö6_
);

255 
ö_p‹t_t
 
	msö6_p‹t
;

256 
uöt32_t
 
	msö6_Êowöfo
;

257 
ö6_addr
 
	msö6_addr
;

258 
uöt32_t
 
	msö6_sc›e_id
;

262 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


264 
	sù_mªq


267 
ö_addr
 
	mimr_mu…üddr
;

270 
ö_addr
 
	mimr_öãrÁ˚
;

273 
	sù_mªq_sour˚


276 
ö_addr
 
	mimr_mu…üddr
;

279 
ö_addr
 
	mimr_öãrÁ˚
;

282 
ö_addr
 
	mimr_sour˚addr
;

286 #i‚de‡
__USE_KERNEL_IPV6_DEFS


288 
	sùv6_mªq


291 
ö6_addr
 
	mùv6mr_mu…üddr
;

294 
	mùv6mr_öãrÁ˚
;

298 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


300 
	sgroup_ªq


303 
uöt32_t
 
	mgr_öãrÁ˚
;

306 
sockaddr_°‹age
 
	mgr_group
;

309 
	sgroup_sour˚_ªq


312 
uöt32_t
 
	mg§_öãrÁ˚
;

315 
sockaddr_°‹age
 
	mg§_group
;

318 
sockaddr_°‹age
 
	mg§_sour˚
;

323 
	sù_msfûãr


326 
ö_addr
 
	mimsf_mu…üddr
;

329 
ö_addr
 
	mimsf_öãrÁ˚
;

332 
uöt32_t
 
	mimsf_fmode
;

335 
uöt32_t
 
	mimsf_num§c
;

337 
ö_addr
 
	mimsf_¶i°
[1];

340 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

341 -  (
ö_addr
) \

342 + (
num§c
Ë*  (
ö_addr
))

	)

344 
	sgroup_fûãr


347 
uöt32_t
 
	mgf_öãrÁ˚
;

350 
sockaddr_°‹age
 
	mgf_group
;

353 
uöt32_t
 
	mgf_fmode
;

356 
uöt32_t
 
	mgf_num§c
;

358 
sockaddr_°‹age
 
	mgf_¶i°
[1];

361 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

362 -  (
sockaddr_°‹age
) \

363 + ((
num§c
) \

364 *  (
sockaddr_°‹age
)))

	)

374 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

375 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

376 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

377 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

378 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

379 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

380 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

382 
	~<ídün.h
>

385 
	~<bôs/byãsw≠.h
>

387 #ifde‡
__OPTIMIZE__


391 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


394 
	#¡ohl
(
x
Ë(x)

	)

395 
	#¡ohs
(
x
Ë(x)

	)

396 
	#ht⁄l
(
x
Ë(x)

	)

397 
	#ht⁄s
(
x
Ë(x)

	)

399 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


400 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

401 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

402 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

403 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

408 #ifde‡
__GNUC__


409 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

410 (
__exãnsi⁄__
 \

411 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

412 
__a
->
s6_addr32
[0] == 0 \

413 && 
__a
->
s6_addr32
[1] == 0 \

414 && 
__a
->
s6_addr32
[2] == 0 \

415 && 
__a
->
s6_addr32
[3] =0; 
	}
}))

	)

417 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

418 (
__exãnsi⁄__
 \

419 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

420 
__a
->
s6_addr32
[0] == 0 \

421 && 
__a
->
s6_addr32
[1] == 0 \

422 && 
__a
->
s6_addr32
[2] == 0 \

423 && 
__a
->
s6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

425 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

426 (
__exãnsi⁄__
 \

427 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

428 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

430 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

431 (
__exãnsi⁄__
 \

432 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

433 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

435 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

436 (
__exãnsi⁄__
 \

437 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

438 
__a
->
s6_addr32
[0] == 0 \

439 && 
__a
->
s6_addr32
[1] == 0 \

440 && 
__a
->
s6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

442 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

443 (
__exãnsi⁄__
 \

444 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

445 
__a
->
s6_addr32
[0] == 0 \

446 && 
__a
->
s6_addr32
[1] == 0 \

447 && 
__a
->
s6_addr32
[2] == 0 \

448 && 
	`¡ohl
 (
__a
->
s6_addr32
[3]Ë> 1; }))

	)

450 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

451 (
__exãnsi⁄__
 \

452 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

453 c⁄° 
ö6_addr
 *
__b
 = (c⁄° ö6_add∏*Ë(
b
); \

454 
__a
->
s6_addr32
[0] =
__b
->s6_addr32[0] \

455 && 
__a
->
s6_addr32
[1] =
__b
->s6_addr32[1] \

456 && 
__a
->
s6_addr32
[2] =
__b
->s6_addr32[2] \

457 && 
__a
->
s6_addr32
[3] =
__b
->s6_addr32[3]; }))

	)

459 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

460 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

461 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

462 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

463 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =0)

	)

465 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

466 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

467 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

468 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

469 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

471 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

472 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

473 =
	`ht⁄l
 (0x„800000))

	)

475 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

476 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

477 =
	`ht⁄l
 (0x„c00000))

	)

479 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

480 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

481 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

482 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

484 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

485 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

486 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

487 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0) \

488 && (
	`¡ohl
 (((c⁄° 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

490 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

491 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] =((c⁄° uöt32_à*Ë(
b
))[0]) \

492 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] =((c⁄° uöt32_à*Ë(
b
))[1]) \

493 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =((c⁄° uöt32_à*Ë(
b
))[2]) \

494 && (((c⁄° 
uöt32_t
 *Ë(
a
))[3] =((c⁄° uöt32_à*Ë(
b
))[3]))

	)

497 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((c⁄° 
uöt8_t
 *Ë◊))[0] =0xff)

	)

499 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


501 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

504 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

505 
__THROW
;

509 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

510 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

511 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

513 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

514 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

515 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

517 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

518 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

519 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

521 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

522 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

523 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

525 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

526 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

527 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

530 #ifde‡
__USE_GNU


531 
cmsghdr
;

534 
	sö6_pktöfo


536 
ö6_addr
 
ùi6_addr
;

537 
ùi6_ifödex
;

541 
	sù6_mtuöfo


543 
sockaddr_ö6
 
ù6m_addr
;

544 
uöt32_t
 
ù6m_mtu
;

549 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

550 
__THROW
 
__©åibuã_dïªˇãd__
;

551 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

552 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

553 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

554 c⁄° 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

555 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

556 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

557 
__mu…x
, 
__∂usy
)

558 
__THROW
 
__©åibuã_dïªˇãd__
;

559 
	$öë6_›ti⁄_√xt
 (c⁄° 
cmsghdr
 *
__cmsg
,

560 
uöt8_t
 **
__çåp
)

561 
__THROW
 
__©åibuã_dïªˇãd__
;

562 
	$öë6_›ti⁄_föd
 (c⁄° 
cmsghdr
 *
__cmsg
,

563 
uöt8_t
 **
__çåp
, 
__ty≥
)

564 
__THROW
 
__©åibuã_dïªˇãd__
;

568 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

569 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

570 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

571 **
__d©abuÂ
Ë
__THROW
;

572 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

573 
__THROW
;

574 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

575 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

576 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

577 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

578 **
__d©abuÂ
Ë
__THROW
;

579 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

580 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

581 **
__d©abuÂ
Ë
__THROW
;

582 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

583 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

587 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

588 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

589 
__£gmíts
Ë
__THROW
;

590 
	$öë6_πh_add
 (*
__bp
, c⁄° 
ö6_addr
 *
__addr
Ë
__THROW
;

591 
	$öë6_πh_ªvî£
 (c⁄° *
__ö
, *
__out
Ë
__THROW
;

592 
	$öë6_πh_£gmíts
 (c⁄° *
__bp
Ë
__THROW
;

593 
ö6_addr
 *
	$öë6_πh_gëaddr
 (c⁄° *
__bp
, 
__ödex
)

594 
__THROW
;

600 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

601 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

602 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

603 
__THROW
;

606 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

607 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

608 
uöt32_t
 
__num§c
,

609 c⁄° 
ö_addr
 *
__¶i°
)

610 
__THROW
;

614 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

615 c⁄° 
sockaddr
 *
__group
,

616 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

617 
uöt32_t
 *
__num§c
,

618 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

621 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

622 c⁄° 
sockaddr
 *
__group
,

623 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

624 
uöt32_t
 
__num§c
,

625 c⁄° 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

628 
__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


24 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


25 
	#_SIGNAL_H


	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	~<bôs/sig£t.h
>

36 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


37 #i‚de‡
__sig_©omic_t_deföed


38 
	#__sig_©omic_t_deföed


	)

39 
__BEGIN_NAMESPACE_STD


40 
__sig_©omic_t
 
	tsig_©omic_t
;

41 
	g__END_NAMESPACE_STD


43 #unde‡
__√ed_sig_©omic_t


46 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

47 #i‚de‡
__sig£t_t_deföed


48 
	#__sig£t_t_deföed


	)

49 
__sig£t_t
 
	tsig£t_t
;

51 #unde‡
__√ed_sig£t_t


54 #ifde‡
_SIGNAL_H


56 
	~<bôs/ty≥s.h
>

57 
	~<bôs/signum.h
>

59 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


60 #i‚de‡
__pid_t_deföed


61 
__pid_t
 
	tpid_t
;

62 
	#__pid_t_deföed


	)

64 #ifde‡
__USE_XOPEN


66 #i‚de‡
__uid_t_deföed


67 
__uid_t
 
	tuid_t
;

68 
	#__uid_t_deföed


	)

72 #ifde‡
__USE_POSIX199309


74 
	#__√ed_time•ec


	)

75 
	~<time.h
>

78 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


80 
	~<bôs/sigöfo.h
>

85 (*
	t__sigh™dÀr_t
) ();

90 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

91 
__THROW
;

92 #ifde‡
__USE_GNU


93 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

94 
__THROW
;

100 
__BEGIN_NAMESPACE_STD


101 #ifde‡
__USE_BSD


102 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

103 
__THROW
;

106 #ifde‡
__REDIRECT_NTH


107 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

108 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

109 
__sysv_sig«l
);

111 
	#sig«l
 
__sysv_sig«l


	)

114 
__END_NAMESPACE_STD


116 #ifde‡
__USE_XOPEN


119 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

120 
__THROW
;

126 #ifde‡
__USE_POSIX


127 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

130 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


134 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

137 
__BEGIN_NAMESPACE_STD


139 
	$øi£
 (
__sig
Ë
__THROW
;

140 
__END_NAMESPACE_STD


142 #ifde‡
__USE_SVID


144 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

145 
__THROW
;

146 
	$gsig«l
 (
__sig
Ë
__THROW
;

149 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


151 
	`psig«l
 (
__sig
, c⁄° *
__s
);

154 #ifde‡
__USE_XOPEN2K


156 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

167 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

169 #ifde‡
__USE_XOPEN


170 #ifde‡
__GNUC__


171 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

174 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

179 #ifde‡
__USE_BSD


186 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

189 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

192 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

195 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 #ifde‡
__USE_MISC


200 
	#NSIG
 
_NSIG


	)

203 #ifde‡
__USE_GNU


204 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

208 #ifde‡
__USE_BSD


209 
__sigh™dÀr_t
 
	tsig_t
;

212 #ifde‡
__USE_POSIX


215 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

218 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

221 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

224 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

227 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

228 
__THROW
 
	`__n⁄nuŒ
 ((1));

230 #ifde‡
__USE_GNU


232 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

235 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

236 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

239 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

240 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

245 
	~<bôs/siga˘i⁄.h
>

248 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

249 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

256 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

259 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

260 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

263 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

270 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

271 
	`__n⁄nuŒ
 ((1, 2));

273 #ifde‡
__USE_POSIX199309


278 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

279 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

286 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

287 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

288 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

289 
	`__n⁄nuŒ
 ((1));

293 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

294 
__THROW
;

299 #ifde‡
__USE_BSD


303 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

304 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

307 
	ssigvec


309 
__sigh™dÀr_t
 
sv_h™dÀr
;

310 
sv_mask
;

312 
sv_Êags
;

313 
	#sv_⁄°ack
 
sv_Êags


	)

317 
	#SV_ONSTACK
 (1 << 0)

	)

318 
	#SV_INTERRUPT
 (1 << 1)

	)

319 
	#SV_RESETHAND
 (1 << 2)

	)

327 
	$sigvec
 (
__sig
, c⁄° 
sigvec
 *
__vec
,

328 
sigvec
 *
__ovec
Ë
__THROW
;

332 
	~<bôs/sigc⁄ãxt.h
>

335 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

340 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


341 
	#__√ed_size_t


	)

342 
	~<°ddef.h
>

347 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

349 
	~<bôs/sig°ack.h
>

350 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


352 
	~<sys/uc⁄ãxt.h
>

358 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

359 
__THROW
 
__©åibuã_dïªˇãd__
;

363 
	$sigÆt°ack
 (c⁄° 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

364 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

368 #ifde‡
__USE_XOPEN_EXTENDED


372 
	$sighﬁd
 (
__sig
Ë
__THROW
;

375 
	$sigªl£
 (
__sig
Ë
__THROW
;

378 
	$sigign‹e
 (
__sig
Ë
__THROW
;

381 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

384 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


387 
	~<bôs/±hªadty≥s.h
>

388 
	~<bôs/sigthªad.h
>

395 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

397 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

401 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 
	#SIZE_MAX
 (4294967295U)

	)

267 #i‚de‡
WCHAR_MIN


269 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

270 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

274 
	#WINT_MIN
 (0u)

	)

275 
	#WINT_MAX
 (4294967295u)

	)

278 
	#INT8_C
(
c
Ë
	)
c

279 
	#INT16_C
(
c
Ë
	)
c

280 
	#INT32_C
(
c
Ë
	)
c

281 #i‡
__WORDSIZE
 == 64

282 
	#INT64_C
(
c
Ë¯## 
L


	)

284 
	#INT64_C
(
c
Ë¯## 
LL


	)

288 
	#UINT8_C
(
c
Ë
	)
c

289 
	#UINT16_C
(
c
Ë
	)
c

290 
	#UINT32_C
(
c
Ë¯## 
U


	)

291 #i‡
__WORDSIZE
 == 64

292 
	#UINT64_C
(
c
Ë¯## 
UL


	)

294 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

298 #i‡
__WORDSIZE
 == 64

299 
	#INTMAX_C
(
c
Ë¯## 
L


	)

300 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

302 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

303 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_BSD


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

868 
deföed
 
__USE_MISC
)

873 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

879 
	`p˛o£
 (
FILE
 *
__°ªam
);

883 #ifdef 
__USE_POSIX


885 *
	$˘îmid
 (*
__s
Ë
__THROW
;

889 #ifde‡
__USE_XOPEN


891 *
	`cu£rid
 (*
__s
);

895 #ifdef 
__USE_GNU


896 
ob°ack
;

899 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

900 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

901 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

902 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

903 c⁄° *
__ª°ri˘
 
__f‹m©
,

904 
_G_va_li°
 
__¨gs
)

905 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

909 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


913 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

917 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

920 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

923 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


927 
	#__√ed_gë›t


	)

928 
	~<gë›t.h
>

933 #ifde‡
__USE_EXTERN_INLINES


934 
	~<bôs/°dio.h
>

936 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


937 
	~<bôs/°dio2.h
>

939 #ifde‡
__LDBL_COMPAT


940 
	~<bôs/°dio-ldbl.h
>

943 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_BSD


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_BSD


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__exãnsi⁄__
 
__a
;

423 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

424 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$î™d48_r
 (
__xsubi
[3],

426 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

427 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

433 
	$ƒ™d48_r
 (
__xsubi
[3],

434 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

442 
	$jønd48_r
 (
__xsubi
[3],

443 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

448 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$lc⁄g48_r
 (
__∑øm
[7],

455 
dønd48_d©a
 *
__buf„r
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

462 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


463 
	#__mÆloc_™d_ˇŒoc_deföed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

468 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

483 
	$‰ì
 (*
__±r
Ë
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$c‰ì
 (*
__±r
Ë
__THROW
;

491 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


492 
	~<Æloˇ.h
>

495 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

496 || 
deföed
 
__USE_BSD


498 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

501 #ifde‡
__USE_XOPEN2K


503 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

507 #ifde‡
__USE_ISOC11


509 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

510 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

521 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


523 #ifde‡
__˝lu•lus


524 "C++" 
	`©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


549 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

551 
__END_NAMESPACE_STD


553 #ifde‡
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

565 
__END_NAMESPACE_STD


567 #ifde‡
__USE_GNU


570 *
	$£cuª_gëív
 (c⁄° *
__«me
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


584 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 \

600 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
) (const *, const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

759 #ifde‡
__USE_EXTERN_INLINES


760 
	~<bôs/°dlib-b£¨ch.h
>

765 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

766 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

767 #ifde‡
__USE_GNU


768 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

769 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

770 
	`__n⁄nuŒ
 ((1, 4));

775 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

777 
__END_NAMESPACE_STD


779 #ifde‡
__USE_ISOC99


780 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

781 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

785 
__BEGIN_NAMESPACE_STD


789 
div_t
 
	$div
 (
__numî
, 
__díom
)

790 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

791 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

792 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

793 
__END_NAMESPACE_STD


795 #ifde‡
__USE_ISOC99


796 
__BEGIN_NAMESPACE_C99


797 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

798 
__díom
)

799 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

800 
__END_NAMESPACE_C99


804 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

805 || 
deföed
 
__USE_SVID


812 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

813 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

818 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

819 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

824 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

825 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

828 #ifde‡
__USE_MISC


830 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

831 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

832 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

833 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

834 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

835 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

836 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

837 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

842 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

843 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

844 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

846 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

847 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

853 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

854 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

855 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

856 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

860 
__BEGIN_NAMESPACE_STD


863 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

866 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

867 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

870 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

874 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

875 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

877 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

878 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

879 
__THROW
;

880 
__END_NAMESPACE_STD


883 #ifde‡
__USE_SVID


888 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

892 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


899 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

900 *c⁄° *
__ª°ri˘
 
__tokís
,

901 **
__ª°ri˘
 
__vÆuï
)

902 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

906 #ifde‡
__USE_XOPEN


908 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

914 #ifde‡
__USE_XOPEN2KXSI


916 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

919 #ifde‡
__USE_XOPEN


924 
	$gø¡±
 (
__fd
Ë
__THROW
;

928 
	$u∆ock±
 (
__fd
Ë
__THROW
;

933 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

936 #ifde‡
__USE_GNU


940 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

941 
__THROW
 
	`__n⁄nuŒ
 ((2));

944 
	`gë±
 ();

947 #ifde‡
__USE_BSD


951 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

952 
__THROW
 
	`__n⁄nuŒ
 ((1));

955 
	~<bôs/°dlib-Êﬂt.h
>

958 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


959 
	~<bôs/°dlib.h
>

961 #ifde‡
__LDBL_COMPAT


962 
	~<bôs/°dlib-ldbl.h
>

966 #unde‡
__√ed_mÆloc_™d_ˇŒoc


968 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

39 #i‡
deföed
 
__˝lu•lus
 && (__˝lu•lu†>199711L || 
__GNUC_PREREQ
 (4, 4))

40 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

44 
__BEGIN_NAMESPACE_STD


46 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

47 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

50 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

51 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

52 
__END_NAMESPACE_STD


57 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


58 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

59 
__c
, 
size_t
 
__n
)

60 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

64 
__BEGIN_NAMESPACE_STD


66 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

69 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

70 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

73 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


76 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

77 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

79 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #ifde‡
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


85  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


91  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

94 
	}
}

96 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

99 
__END_NAMESPACE_STD


101 #ifde‡
__USE_GNU


104 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


105 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

106 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

107 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

108 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

110 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

111 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

115 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


116 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

117 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

118 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

119 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

121 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

122 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

127 
__BEGIN_NAMESPACE_STD


129 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

132 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

133 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

137 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

138 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

141 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

144 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

151 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

154 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

155 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

156 
__THROW
 
	`__n⁄nuŒ
 ((2));

157 
__END_NAMESPACE_STD


159 #ifde‡
__USE_XOPEN2K8


163 
	~<xloˇÀ.h
>

166 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

169 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

170 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

173 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

174 || 
deföed
 
__USE_XOPEN2K8


176 *
	$°rdup
 (c⁄° *
__s
)

177 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_XOPEN2K8


184 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

185 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

188 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


190 
	#°rdu∑
(
s
) \

191 (
__exãnsi⁄__
 \

193 c⁄° *
__ﬁd
 = (
s
); \

194 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

195 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

196 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

197 
	}
}))

	)

200 
	#°∫du∑
(
s
, 
n
) \

201 (
__exãnsi⁄__
 \

203 c⁄° *
__ﬁd
 = (
s
); \

204 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

205 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

206 
__√w
[
__Àn
] = '\0'; \

207 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

208 }))

	)

211 
	g__BEGIN_NAMESPACE_STD


213 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


216 *
°rchr
 (*
__s
, 
__c
)

217 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

218 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

219 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

221 #ifde‡
__OPTIMIZE__


222 
__exã∫_Æways_ölöe
 *

223 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


225  
__buûtö_°rchr
 (
__s
, 
__c
);

228 
__exã∫_Æways_ölöe
 const *

229 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


231  
__buûtö_°rchr
 (
__s
, 
__c
);

236 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

237 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

240 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


243 *
	`°ºchr
 (*
__s
, 
__c
)

244 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

245 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

246 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

248 #ifde‡
__OPTIMIZE__


249 
__exã∫_Æways_ölöe
 *

250 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


252  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

255 
__exã∫_Æways_ölöe
 const *

256 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


258  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

261 
	}
}

263 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

264 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

266 
__END_NAMESPACE_STD


268 #ifde‡
__USE_GNU


271 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


272 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

273 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

274 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

275 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

278 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

282 
__BEGIN_NAMESPACE_STD


285 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

286 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

289 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

290 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


295 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

296 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

297 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

298 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

300 #ifde‡
__OPTIMIZE__


301 
__exã∫_Æways_ölöe
 *

302 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


304  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

307 
__exã∫_Æways_ölöe
 const *

308 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


310  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

313 
	}
}

315 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

316 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


322 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

323 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

324 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 const *

335 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 c⁄° *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

370 c⁄° *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (c⁄° *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 const *

482 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (c⁄° *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 const *

510 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (c⁄° *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

530 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

534 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

535 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

538 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

539 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

542 #ifdef 
__USE_GNU


545 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

546 
__loˇÀ_t
 
__loc
)

547 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

549 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

550 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

554 #ifdef 
__USE_BSD


557 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

558 c⁄° *
__ª°ri˘
 
__dñim
)

559 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

562 #ifdef 
__USE_XOPEN2K8


564 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

567 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

568 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

574 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

575 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

578 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

582 #ifdef 
__USE_GNU


584 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

585 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

588 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 #i‚de‡
ba£«me


598 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


599 "C++" *
	$ba£«me
 (*
__fûíame
)

600 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

601 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

604 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

610 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

611 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

612 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


632 
	~<bôs/°rög.h
>

635 
	~<bôs/°rög2.h
>

638 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


640 
	~<bôs/°rög3.h
>

644 
__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_SVID


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

71 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

75 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

79 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

83 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

86 #ifde‡
__USE_XOPEN2K8


87 
	#_XOPEN_VERSION
 700

	)

88 #ñi‡
deföed
 
__USE_XOPEN2K


89 
	#_XOPEN_VERSION
 600

	)

90 #ñi‡
deföed
 
__USE_UNIX98


91 
	#_XOPEN_VERSION
 500

	)

93 
	#_XOPEN_VERSION
 4

	)

97 
	#_XOPEN_XCU_VERSION
 4

	)

100 
	#_XOPEN_XPG2
 1

	)

101 
	#_XOPEN_XPG3
 1

	)

102 
	#_XOPEN_XPG4
 1

	)

105 
	#_XOPEN_UNIX
 1

	)

108 
	#_XOPEN_CRYPT
 1

	)

112 
	#_XOPEN_ENH_I18N
 1

	)

115 
	#_XOPEN_LEGACY
 1

	)

202 
	~<bôs/posix_›t.h
>

205 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


206 
	~<bôs/ívú⁄míts.h
>

210 
	#STDIN_FILENO
 0

	)

211 
	#STDOUT_FILENO
 1

	)

212 
	#STDERR_FILENO
 2

	)

217 
	~<bôs/ty≥s.h
>

219 #i‚def 
__ssize_t_deföed


220 
__ssize_t
 
	tssize_t
;

221 
	#__ssize_t_deföed


	)

224 
	#__√ed_size_t


	)

225 
	#__√ed_NULL


	)

226 
	~<°ddef.h
>

228 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


231 #i‚de‡
__gid_t_deföed


232 
__gid_t
 
	tgid_t
;

233 
	#__gid_t_deföed


	)

236 #i‚de‡
__uid_t_deföed


237 
__uid_t
 
	tuid_t
;

238 
	#__uid_t_deföed


	)

241 #i‚de‡
__off_t_deföed


242 #i‚de‡
__USE_FILE_OFFSET64


243 
__off_t
 
	toff_t
;

245 
__off64_t
 
	toff_t
;

247 
	#__off_t_deföed


	)

249 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


250 
__off64_t
 
	toff64_t
;

251 
	#__off64_t_deföed


	)

254 #i‚de‡
__u£c⁄ds_t_deföed


255 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

256 
	#__u£c⁄ds_t_deföed


	)

259 #i‚de‡
__pid_t_deföed


260 
__pid_t
 
	tpid_t
;

261 
	#__pid_t_deföed


	)

265 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


266 #i‚de‡
__öçå_t_deföed


267 
__öçå_t
 
	töçå_t
;

268 
	#__öçå_t_deföed


	)

272 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


273 #i‚de‡
__sockÀn_t_deföed


274 
__sockÀn_t
 
	tsockÀn_t
;

275 
	#__sockÀn_t_deföed


	)

281 
	#R_OK
 4

	)

282 
	#W_OK
 2

	)

283 
	#X_OK
 1

	)

284 
	#F_OK
 0

	)

287 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_GNU


292 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1));

300 #ifde‡
__USE_ATFILE


304 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

310 #i‚def 
_STDIO_H


311 
	#SEEK_SET
 0

	)

312 
	#SEEK_CUR
 1

	)

313 
	#SEEK_END
 2

	)

314 #ifde‡
__USE_GNU


315 
	#SEEK_DATA
 3

	)

316 
	#SEEK_HOLE
 4

	)

320 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


322 
	#L_SET
 
SEEK_SET


	)

323 
	#L_INCR
 
SEEK_CUR


	)

324 
	#L_XTND
 
SEEK_END


	)

333 #i‚de‡
__USE_FILE_OFFSET64


334 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

336 #ifde‡
__REDIRECT_NTH


337 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

338 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

339 
l£ek64
);

341 
	#l£ek
 
l£ek64


	)

344 #ifde‡
__USE_LARGEFILE64


345 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

346 
__THROW
;

353 
	`˛o£
 (
__fd
);

360 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

366 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

368 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


369 #i‚de‡
__USE_FILE_OFFSET64


376 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

377 
__off_t
 
__off£t
Ë
__wur
;

384 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

385 
__off_t
 
__off£t
Ë
__wur
;

387 #ifde‡
__REDIRECT


388 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

389 
__off64_t
 
__off£t
),

390 
¥ód64
Ë
__wur
;

391 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

392 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

393 
pwrôe64
Ë
__wur
;

395 
	#¥ód
 
¥ód64


	)

396 
	#pwrôe
 
pwrôe64


	)

400 #ifde‡
__USE_LARGEFILE64


404 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

405 
__off64_t
 
__off£t
Ë
__wur
;

408 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

409 
__off64_t
 
__off£t
Ë
__wur
;

417 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

419 #ifde‡
__USE_GNU


422 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

432 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

444 
	`¶ìp
 (
__£c⁄ds
);

446 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

447 || 
deföed
 
__USE_BSD


452 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

453 
__THROW
;

460 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

469 
	`∑u£
 ();

473 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

474 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

476 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


478 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

483 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

484 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

488 #ifde‡
__USE_ATFILE


491 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

492 
__gid_t
 
__group
, 
__Êag
)

493 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

497 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

499 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


501 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

511 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

513 #ifdef 
__USE_GNU


517 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

520 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

521 || 
deföed
 
__USE_BSD


525 *
	$gëwd
 (*
__buf
)

526 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

531 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

534 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

536 #ifde‡
__USE_GNU


539 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

543 **
__ívú⁄
;

544 #ifde‡
__USE_GNU


545 **
ívú⁄
;

551 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

552 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

554 #ifde‡
__USE_XOPEN2K8


557 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

558 
__THROW
 
	`__n⁄nuŒ
 ((2));

563 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

564 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

568 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

569 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

573 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

578 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

585 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 #ifde‡
__USE_GNU


590 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

591 *c⁄° 
__ívp
[])

592 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

596 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


598 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

603 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

609 
	~<bôs/c⁄‚ame.h
>

612 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

613 
__THROW
 
	`__n⁄nuŒ
 ((1));

616 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

619 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

621 #ifdef 
__USE_POSIX2


623 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

628 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

631 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

637 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

638 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


639 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

646 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

648 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


660 
	$£çgΩ
 (Ë
__THROW
;

667 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

669 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


671 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

675 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

678 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

681 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

689 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

691 #ifdef 
__USE_GNU


693 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

700 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

702 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


705 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

708 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


710 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

717 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

719 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


722 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

725 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


727 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

730 #ifde‡
__USE_GNU


733 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

734 
__THROW
;

738 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

739 
__THROW
;

743 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

744 
__THROW
 
__wur
;

748 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

749 
__THROW
 
__wur
;

756 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

758 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

759 || 
deföed
 
__USE_BSD


764 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

770 *
	$ây«me
 (
__fd
Ë
__THROW
;

774 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

775 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

779 
	$ißây
 (
__fd
Ë
__THROW
;

781 #i‡
deföed
 
__USE_BSD
 \

782 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

785 
	$ây¶Ÿ
 (Ë
__THROW
;

790 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

793 #ifde‡
__USE_ATFILE


796 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

797 c⁄° *
__to
, 
__Êags
)

798 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

801 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


803 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

804 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

809 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

810 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

811 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

814 #ifde‡
__USE_ATFILE


816 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

817 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

820 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

821 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

822 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

826 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

828 #ifde‡
__USE_ATFILE


830 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

831 
__THROW
 
	`__n⁄nuŒ
 ((2));

835 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

839 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

842 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

849 *
	`gëlogö
 ();

850 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


857 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

860 #ifdef 
__USE_BSD


862 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

866 #ifdef 
__USE_POSIX2


870 
	#__√ed_gë›t


	)

871 
	~<gë›t.h
>

875 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


879 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

883 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

886 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

887 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

891 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

897 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

898 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

899 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

900 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

906 
	$vh™gup
 (Ë
__THROW
;

909 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

917 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

918 
size_t
 
__off£t
, 
__sˇÀ
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1));

925 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

929 *
	$gëu£rshñl
 (Ë
__THROW
;

930 
	$ídu£rshñl
 (Ë
__THROW
;

931 
	$£tu£rshñl
 (Ë
__THROW
;

937 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

941 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

944 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

948 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

956 
	`fsync
 (
__fd
);

959 #ifde‡
__USE_GNU


962 
	$syncfs
 (
__fd
Ë
__THROW
;

966 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


969 
	`gëho°id
 ();

972 
	$sync
 (Ë
__THROW
;

975 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


978 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

983 
	$gëdèbÀsize
 (Ë
__THROW
;

989 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


992 #i‚de‡
__USE_FILE_OFFSET64


993 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

994 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

996 #ifde‡
__REDIRECT_NTH


997 
	`__REDIRECT_NTH
 (
åunˇã
,

998 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

999 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1001 
	#åunˇã
 
åunˇã64


	)

1004 #ifde‡
__USE_LARGEFILE64


1005 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1006 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1011 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_POSIX199309
 \

1012 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1015 #i‚de‡
__USE_FILE_OFFSET64


1016 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1018 #ifde‡
__REDIRECT_NTH


1019 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1020 
·runˇã64
Ë
__wur
;

1022 
	#·runˇã
 
·runˇã64


	)

1025 #ifde‡
__USE_LARGEFILE64


1026 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1032 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1033 || 
deföed
 
__USE_MISC


1037 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1043 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1047 #ifde‡
__USE_MISC


1058 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1063 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1075 
	#F_ULOCK
 0

	)

1076 
	#F_LOCK
 1

	)

1077 
	#F_TLOCK
 2

	)

1078 
	#F_TEST
 3

	)

1080 #i‚de‡
__USE_FILE_OFFSET64


1081 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1083 #ifde‡
__REDIRECT


1084 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1085 
lockf64
Ë
__wur
;

1087 
	#lockf
 
lockf64


	)

1090 #ifde‡
__USE_LARGEFILE64


1091 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1096 #ifde‡
__USE_GNU


1101 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1102 (
__exãnsi⁄__
 \

1103 ({ 
__ªsu…
; \

1104 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1105 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1106 
__ªsu…
; 
	}
}))

	)

1109 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1112 
fd©async
 (
__fûdes
);

1118 #ifdef 
__USE_XOPEN


1120 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1121 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1125 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1126 
__THROW
 
	`__n⁄nuŒ
 ((1));

1133 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1134 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1140 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1142 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1147 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1148 
	~<bôs/uni°d.h
>

1151 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_BSD


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_BSD
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

101 #unde‡
__USE_ISOC11


102 #unde‡
__USE_ISOC99


103 #unde‡
__USE_ISOC95


104 #unde‡
__USE_ISOCXX11


105 #unde‡
__USE_POSIX


106 #unde‡
__USE_POSIX2


107 #unde‡
__USE_POSIX199309


108 #unde‡
__USE_POSIX199506


109 #unde‡
__USE_XOPEN


110 #unde‡
__USE_XOPEN_EXTENDED


111 #unde‡
__USE_UNIX98


112 #unde‡
__USE_XOPEN2K


113 #unde‡
__USE_XOPEN2KXSI


114 #unde‡
__USE_XOPEN2K8


115 #unde‡
__USE_XOPEN2K8XSI


116 #unde‡
__USE_LARGEFILE


117 #unde‡
__USE_LARGEFILE64


118 #unde‡
__USE_FILE_OFFSET64


119 #unde‡
__USE_BSD


120 #unde‡
__USE_SVID


121 #unde‡
__USE_MISC


122 #unde‡
__USE_ATFILE


123 #unde‡
__USE_GNU


124 #unde‡
__USE_REENTRANT


125 #unde‡
__USE_FORTIFY_LEVEL


126 #unde‡
__KERNEL_STRICT_NAMES


130 #i‚de‡
_LOOSE_KERNEL_NAMES


131 
	#__KERNEL_STRICT_NAMES


	)

141 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


142 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

143 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

145 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

150 #ifde‡
_GNU_SOURCE


151 #unde‡
_ISOC95_SOURCE


152 
	#_ISOC95_SOURCE
 1

	)

153 #unde‡
_ISOC99_SOURCE


154 
	#_ISOC99_SOURCE
 1

	)

155 #unde‡
_ISOC11_SOURCE


156 
	#_ISOC11_SOURCE
 1

	)

157 #unde‡
_POSIX_SOURCE


158 
	#_POSIX_SOURCE
 1

	)

159 #unde‡
_POSIX_C_SOURCE


160 
	#_POSIX_C_SOURCE
 200809L

	)

161 #unde‡
_XOPEN_SOURCE


162 
	#_XOPEN_SOURCE
 700

	)

163 #unde‡
_XOPEN_SOURCE_EXTENDED


164 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

165 #unde‡
_LARGEFILE64_SOURCE


166 
	#_LARGEFILE64_SOURCE
 1

	)

167 #unde‡
_DEFAULT_SOURCE


168 
	#_DEFAULT_SOURCE
 1

	)

169 #unde‡
_BSD_SOURCE


170 
	#_BSD_SOURCE
 1

	)

171 #unde‡
_SVID_SOURCE


172 
	#_SVID_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

180 || (!
deföed
 
	g__STRICT_ANSI__
 \

181 && !
deföed
 
	g_ISOC99_SOURCE
 \

182 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

183 && !
deföed
 
	g_XOPEN_SOURCE
 \

184 && !
deföed
 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
))

185 #unde‡
_DEFAULT_SOURCE


186 
	#_DEFAULT_SOURCE
 1

	)

187 #unde‡
_BSD_SOURCE


188 
	#_BSD_SOURCE
 1

	)

189 #unde‡
_SVID_SOURCE


190 
	#_SVID_SOURCE
 1

	)

194 #i‡(
deföed
 
_ISOC11_SOURCE
 \

195 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

196 
	#__USE_ISOC11
 1

	)

200 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

201 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

202 
	#__USE_ISOC99
 1

	)

206 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

207 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

208 
	#__USE_ISOC95
 1

	)

215 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

216 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

217 
	#__USE_ISOCXX11
 1

	)

223 #ifde‡
_DEFAULT_SOURCE


224 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


225 
	#__USE_POSIX_IMPLICITLY
 1

	)

227 #unde‡
_POSIX_SOURCE


228 
	#_POSIX_SOURCE
 1

	)

229 #unde‡
_POSIX_C_SOURCE


230 
	#_POSIX_C_SOURCE
 200809L

	)

232 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

233 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

234 
	#_POSIX_SOURCE
 1

	)

235 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

236 
	#_POSIX_C_SOURCE
 2

	)

237 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

238 
	#_POSIX_C_SOURCE
 199506L

	)

239 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

240 
	#_POSIX_C_SOURCE
 200112L

	)

242 
	#_POSIX_C_SOURCE
 200809L

	)

244 
	#__USE_POSIX_IMPLICITLY
 1

	)

247 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


248 
	#__USE_POSIX
 1

	)

251 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


252 
	#__USE_POSIX2
 1

	)

255 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

256 
	#__USE_POSIX199309
 1

	)

259 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

260 
	#__USE_POSIX199506
 1

	)

263 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

264 
	#__USE_XOPEN2K
 1

	)

265 #unde‡
__USE_ISOC95


266 
	#__USE_ISOC95
 1

	)

267 #unde‡
__USE_ISOC99


268 
	#__USE_ISOC99
 1

	)

271 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

272 
	#__USE_XOPEN2K8
 1

	)

273 #unde‡
_ATFILE_SOURCE


274 
	#_ATFILE_SOURCE
 1

	)

277 #ifdef 
_XOPEN_SOURCE


278 
	#__USE_XOPEN
 1

	)

279 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

280 
	#__USE_XOPEN_EXTENDED
 1

	)

281 
	#__USE_UNIX98
 1

	)

282 #unde‡
_LARGEFILE_SOURCE


283 
	#_LARGEFILE_SOURCE
 1

	)

284 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

285 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

286 
	#__USE_XOPEN2K8
 1

	)

287 
	#__USE_XOPEN2K8XSI
 1

	)

289 
	#__USE_XOPEN2K
 1

	)

290 
	#__USE_XOPEN2KXSI
 1

	)

291 #unde‡
__USE_ISOC95


292 
	#__USE_ISOC95
 1

	)

293 #unde‡
__USE_ISOC99


294 
	#__USE_ISOC99
 1

	)

297 #ifde‡
_XOPEN_SOURCE_EXTENDED


298 
	#__USE_XOPEN_EXTENDED
 1

	)

303 #ifde‡
_LARGEFILE_SOURCE


304 
	#__USE_LARGEFILE
 1

	)

307 #ifde‡
_LARGEFILE64_SOURCE


308 
	#__USE_LARGEFILE64
 1

	)

311 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

312 
	#__USE_FILE_OFFSET64
 1

	)

315 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


316 
	#__USE_MISC
 1

	)

319 #ifdef 
_BSD_SOURCE


320 
	#__USE_BSD
 1

	)

323 #ifdef 
_SVID_SOURCE


324 
	#__USE_SVID
 1

	)

327 #ifdef 
_ATFILE_SOURCE


328 
	#__USE_ATFILE
 1

	)

331 #ifdef 
_GNU_SOURCE


332 
	#__USE_GNU
 1

	)

335 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


336 
	#__USE_REENTRANT
 1

	)

339 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

340 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

341 #i‡
_FORTIFY_SOURCE
 > 1

342 
	#__USE_FORTIFY_LEVEL
 2

	)

344 
	#__USE_FORTIFY_LEVEL
 1

	)

347 
	#__USE_FORTIFY_LEVEL
 0

	)

352 
	~<°dc-¥edef.h
>

360 #unde‡
__GNU_LIBRARY__


361 
	#__GNU_LIBRARY__
 6

	)

365 
	#__GLIBC__
 2

	)

366 
	#__GLIBC_MINOR__
 19

	)

368 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

369 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

372 #i‚de‡
__ASSEMBLER__


373 #i‚de‡
_SYS_CDEFS_H


374 
	~<sys/cdefs.h
>

379 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


380 
	#__USE_LARGEFILE
 1

	)

381 
	#__USE_LARGEFILE64
 1

	)

387 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

388 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

389 && 
deföed
 
	g__exã∫_ölöe


390 
	#__USE_EXTERN_INLINES
 1

	)

398 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


148 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

149 
	~<bôs/°dio-lock.h
>

154 
	t_IO_lock_t
;

160 
	s_IO_m¨kî
 {

161 
_IO_m¨kî
 *
	m_√xt
;

162 
_IO_FILE
 *
	m_sbuf
;

166 
	m_pos
;

168 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

169 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

170 
	mpublic
:

171 
°ªamm¨kî
(
°ªambuf
 *
sb
);

172 ~
°ªamm¨kî
();

173 
ßvög
(Ë{  
	m_•os
 == -2; }

174 
dñè
(
°ªamm¨kî
&);

175 
dñè
();

180 
	e__codecvt_ªsu…


182 
	m__codecvt_ok
,

183 
	m__codecvt_∑πül
,

184 
	m__codecvt_îr‹
,

185 
	m__codecvt_noc⁄v


188 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


191 
	s_IO_codecvt


193 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

194 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

195 
	m__mb°©e_t
 *,

196 c⁄° 
	mwch¨_t
 *,

197 c⁄° 
	mwch¨_t
 *,

198 c⁄° 
	mwch¨_t
 **, *,

200 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

201 
	m__mb°©e_t
 *, *,

203 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

204 
	m__mb°©e_t
 *,

206 c⁄° **, 
	mwch¨_t
 *,

207 
	mwch¨_t
 *, wchar_t **);

208 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

209 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

210 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

211 c⁄° *, c⁄° *, 
	m_IO_size_t
);

212 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

214 
_IO_ic⁄v_t
 
	m__cd_ö
;

215 
_IO_ic⁄v_t
 
	m__cd_out
;

219 
	s_IO_wide_d©a


221 
wch¨_t
 *
	m_IO_ªad_±r
;

222 
wch¨_t
 *
	m_IO_ªad_íd
;

223 
wch¨_t
 *
	m_IO_ªad_ba£
;

224 
wch¨_t
 *
	m_IO_wrôe_ba£
;

225 
wch¨_t
 *
	m_IO_wrôe_±r
;

226 
wch¨_t
 *
	m_IO_wrôe_íd
;

227 
wch¨_t
 *
	m_IO_buf_ba£
;

228 
wch¨_t
 *
	m_IO_buf_íd
;

230 
wch¨_t
 *
	m_IO_ßve_ba£
;

231 
wch¨_t
 *
	m_IO_backup_ba£
;

233 
wch¨_t
 *
	m_IO_ßve_íd
;

235 
__mb°©e_t
 
	m_IO_°©e
;

236 
__mb°©e_t
 
	m_IO_œ°_°©e
;

237 
_IO_codecvt
 
	m_codecvt
;

239 
wch¨_t
 
	m_sh‹tbuf
[1];

241 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

245 
	s_IO_FILE
 {

246 
	m_Êags
;

247 
	#_IO_fûe_Êags
 
_Êags


	)

251 * 
	m_IO_ªad_±r
;

252 * 
	m_IO_ªad_íd
;

253 * 
	m_IO_ªad_ba£
;

254 * 
	m_IO_wrôe_ba£
;

255 * 
	m_IO_wrôe_±r
;

256 * 
	m_IO_wrôe_íd
;

257 * 
	m_IO_buf_ba£
;

258 * 
	m_IO_buf_íd
;

260 *
	m_IO_ßve_ba£
;

261 *
	m_IO_backup_ba£
;

262 *
	m_IO_ßve_íd
;

264 
_IO_m¨kî
 *
	m_m¨kîs
;

266 
_IO_FILE
 *
	m_chaö
;

268 
	m_fûío
;

270 
	m_blksize
;

272 
	m_Êags2
;

274 
_IO_off_t
 
	m_ﬁd_off£t
;

276 
	#__HAVE_COLUMN


	)

278 
	m_cur_cﬁumn
;

279 sig√d 
	m_vèbÀ_off£t
;

280 
	m_sh‹tbuf
[1];

284 
_IO_lock_t
 *
	m_lock
;

285 #ifde‡
_IO_USE_OLD_IO_FILE


288 
	s_IO_FILE_com∂ëe


290 
_IO_FILE
 
	m_fûe
;

292 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

293 
_IO_off64_t
 
	m_off£t
;

294 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


296 
_IO_codecvt
 *
	m_codecvt
;

297 
_IO_wide_d©a
 *
	m_wide_d©a
;

298 
_IO_FILE
 *
	m_‰ìªs_li°
;

299 *
	m_‰ìªs_buf
;

300 
size_t
 
	m_‰ìªs_size
;

302 *
	m__∑d1
;

303 *
	m__∑d2
;

304 *
	m__∑d3
;

305 *
	m__∑d4
;

306 
size_t
 
	m__∑d5
;

308 
	m_mode
;

310 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

314 #i‚de‡
__˝lu•lus


315 
_IO_FILE
 
	t_IO_FILE
;

318 
	g_IO_FILE_∂us
;

320 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

321 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

322 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

323 #i‚de‡
_LIBC


324 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

325 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

326 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

328 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

329 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

330 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

338 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

346 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

347 
	tsize_t
 
	t__n
);

355 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

358 
	t__io_˛o£_‚
 (*
	t__cookõ
);

361 #ifde‡
_GNU_SOURCE


363 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

364 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

365 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

366 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

371 
__io_ªad_‚
 *
	mªad
;

372 
__io_wrôe_‚
 *
	mwrôe
;

373 
__io_£ek_‚
 *
	m£ek
;

374 
__io_˛o£_‚
 *
	m˛o£
;

375 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

376 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

378 
	g_IO_cookõ_fûe
;

381 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

382 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

386 #ifde‡
__˝lu•lus


390 
__undîÊow
 (
_IO_FILE
 *);

391 
__uÊow
 (
_IO_FILE
 *);

392 
__ovîÊow
 (
_IO_FILE
 *, );

393 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


394 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

395 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

396 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

399 #i‡ 
__GNUC__
 >= 3

400 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

402 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

405 
	#_IO_gëc_u∆ocked
(
_Â
) \

406 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

407 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

408 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

409 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

410 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

411 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

412 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

413 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

414 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

415 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

417 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


418 
	#_IO_gëwc_u∆ocked
(
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

422 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

423 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

424 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

425 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

426 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

427 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

428 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

431 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

432 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

434 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

435 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

436 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

437 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

439 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

442 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

443 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

445 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

446 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

447 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

449 #ifde‡
_IO_MTSAFE_IO


450 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

451 
	#_IO_Êockfûe
(
_Â
) \

452 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

453 
	#_IO_fu∆ockfûe
(
_Â
) \

454 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

456 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

457 
	#_IO_Êockfûe
(
_Â
Ë

	)

458 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

459 
	#_IO_·rylockfûe
(
_Â
Ë

	)

460 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

461 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

464 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

465 
_IO_va_li°
, *
__ª°ri˘
);

466 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

467 
_IO_va_li°
);

468 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

469 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

471 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

472 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

474 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

476 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


477 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

478 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

479 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

480 #i‡
__GNUC__
 >= 2

483 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


484 
	~<shlib-com∑t.h
>

485 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

486 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

487 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

488 c⁄° 
_IO_°dö_u£d
;

489 
wók_exã∫
 (
_IO_°dö_u£d
);

492 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


493 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

497 
	#_IO_fwide
(
__Â
, 
__mode
) \

498 ({ 
__ªsu…
 = (
__mode
); \

499 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

501 i‡((
__Â
)->
_mode
 == 0) \

503 (
__Â
)->
_mode
 = -1; \

504 
__ªsu…
 = (
__Â
)->
_mode
; \

506 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

507 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

509 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

510 
__ªsu…
; })

	)

513 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

514 
_IO_va_li°
, *
__ª°ri˘
);

515 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

516 
_IO_va_li°
);

517 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

518 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

521 #ifde‡
__LDBL_COMPAT


522 
	~<bôs/libio-ldbl.h
>

525 #ifde‡
__˝lu•lus


	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (c⁄° *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (c⁄° *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

54 
	#__STDC_ISO_10646__
 201103L

	)

57 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
) (*, const *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
) (const *, const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 c⁄° *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

150 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

151 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
;

155 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

158 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

159 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

160 
__THROW
;

163 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

164 
__THROW
 
__©åibuã_puª__
;

166 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

167 
__THROW
 
__©åibuã_puª__
;

168 
__END_NAMESPACE_STD


170 #ifde‡
__USE_XOPEN2K8


172 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

175 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

176 
size_t
 
__n
Ë
__THROW
;

180 
	~<xloˇÀ.h
>

182 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

183 
__loˇÀ_t
 
__loc
Ë
__THROW
;

185 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


192 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

196 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

197 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

198 
__END_NAMESPACE_STD


200 #ifde‡
__USE_XOPEN2K8


206 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

207 
__loˇÀ_t
 
__loc
Ë
__THROW
;

212 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

213 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

216 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

219 
__BEGIN_NAMESPACE_STD


221 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


222 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

223 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
__©åibuã_puª__
;

231 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


232 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

233 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
__©åibuã_puª__
;

240 
__END_NAMESPACE_STD


242 #ifde‡
__USE_GNU


245 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

246 
__THROW
 
__©åibuã_puª__
;

249 
__BEGIN_NAMESPACE_STD


252 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

253 
__THROW
 
__©åibuã_puª__
;

256 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

257 
__THROW
 
__©åibuã_puª__
;

259 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


260 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

262 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

263 c⁄° 
wch¨_t
 *
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

266 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

267 
__THROW
 
__©åibuã_puª__
;

270 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


271 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

273 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

274 c⁄° 
wch¨_t
 *
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

277 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

278 
__THROW
 
__©åibuã_puª__
;

282 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

283 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

284 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

287 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

288 
__END_NAMESPACE_STD


290 #ifde‡
__USE_XOPEN


292 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


293 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

295 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

296 c⁄° 
wch¨_t
 *
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

299 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

300 
__THROW
 
__©åibuã_puª__
;

304 #ifde‡
__USE_XOPEN2K8


306 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

307 
__THROW
 
__©åibuã_puª__
;

311 
__BEGIN_NAMESPACE_STD


313 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


314 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

316 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

317 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

320 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

321 
__THROW
 
__©åibuã_puª__
;

325 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

326 
__THROW
 
__©åibuã_puª__
;

329 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

330 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

334 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

335 
__THROW
;

338 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifde‡
__USE_GNU


344 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

345 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

346 
__THROW
;

350 
__BEGIN_NAMESPACE_STD


353 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

357 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

361 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

365 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

366 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

367 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

370 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

371 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

377 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

378 
__END_NAMESPACE_STD


380 #ifde‡
__USE_EXTERN_INLINES


386 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

387 
__exã∫_ölöe
 
wöt_t


388 
	`__NTH
 (
	$btowc
 (
__c
))

389 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

390 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

392 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

393 
__exã∫_ölöe
 

394 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

395 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

396 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

398 
__exã∫_ölöe
 
size_t


399 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

400 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

401 {  (
__ps
 !
NULL


402 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

405 
__BEGIN_NAMESPACE_STD


408 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

409 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

410 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

415 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

416 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
__END_NAMESPACE_STD


420 #ifdef 
__USE_XOPEN2K8


423 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

424 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

425 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

429 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

430 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

431 
size_t
 
__nwc
, size_à
__Àn
,

432 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

437 #ifde‡
__USE_XOPEN


439 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

443 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

447 
__BEGIN_NAMESPACE_STD


450 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

451 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

452 
__END_NAMESPACE_STD


454 #ifde‡
__USE_ISOC99


455 
__BEGIN_NAMESPACE_C99


457 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

460 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

461 
__END_NAMESPACE_C99


465 
__BEGIN_NAMESPACE_STD


468 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

469 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

473 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

474 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

475 
__THROW
;

476 
__END_NAMESPACE_STD


478 #ifde‡
__USE_ISOC99


479 
__BEGIN_NAMESPACE_C99


482 
__exãnsi⁄__


483 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

484 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

485 
__THROW
;

489 
__exãnsi⁄__


490 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

491 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

492 
__ba£
Ë
__THROW
;

493 
__END_NAMESPACE_C99


496 #ifde‡
__USE_GNU


499 
__exãnsi⁄__


500 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

501 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

502 
__THROW
;

506 
__exãnsi⁄__


507 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

508 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

509 
__ba£
Ë
__THROW
;

512 #ifde‡
__USE_GNU


526 
	~<xloˇÀ.h
>

530 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

531 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

532 
__loˇÀ_t
 
__loc
Ë
__THROW
;

534 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

535 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

536 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

538 
__exãnsi⁄__


539 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

540 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

541 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

543 
__exãnsi⁄__


544 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

545 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

546 
__ba£
, 
__loˇÀ_t
 
__loc
)

547 
__THROW
;

549 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

550 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
;

553 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

554 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

555 
__THROW
;

557 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

558 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

559 
__loˇÀ_t
 
__loc
Ë
__THROW
;

563 #ifde‡
__USE_XOPEN2K8


566 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

567 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

571 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

572 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

573 
__THROW
;

580 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

583 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


584 
__BEGIN_NAMESPACE_STD


587 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

594 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

595 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

605 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

606 
__THROW
 ;

612 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

613 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

614 
__gnuc_va_li°
 
__¨g
)

620 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

621 
__gnuc_va_li°
 
__¨g
)

625 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

626 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

627 
__gnuc_va_li°
 
__¨g
)

628 
__THROW
 ;

635 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

636 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

646 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

647 
__THROW
 ;

649 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

650 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

651 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

652 #ifde‡
__REDIRECT


656 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

657 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_fwsˇnf
)

660 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_wsˇnf
)

663 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

664 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

665 ...), 
__isoc99_swsˇnf
)

668 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

669 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

670 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

671 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

673 
__THROW
;

674 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

675 
	#wsˇnf
 
__isoc99_wsˇnf


	)

676 
	#swsˇnf
 
__isoc99_swsˇnf


	)

680 
__END_NAMESPACE_STD


683 #ifde‡
__USE_ISOC99


684 
__BEGIN_NAMESPACE_C99


689 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

690 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

691 
__gnuc_va_li°
 
__¨g
)

697 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

698 
__gnuc_va_li°
 
__¨g
)

701 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

702 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

703 
__gnuc_va_li°
 
__¨g
)

704 
__THROW
 ;

706 #i‡!
deföed
 
__USE_GNU
 \

707 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

708 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

709 #ifde‡
__REDIRECT


710 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

711 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

714 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

717 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

718 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

719 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

722 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

723 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
);

727 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

728 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

730 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

731 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

732 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

736 
__END_NAMESPACE_C99


740 
__BEGIN_NAMESPACE_STD


745 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

746 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

752 
wöt_t
 
	`gëwch¨
 ();

759 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

760 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

766 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

774 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

775 
__FILE
 *
__ª°ri˘
 
__°ªam
);

781 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

782 
__FILE
 *
__ª°ri˘
 
__°ªam
);

789 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

790 
__END_NAMESPACE_STD


793 #ifde‡
__USE_GNU


801 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

802 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

810 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

818 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

827 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

828 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

837 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

838 
__FILE
 *
__ª°ri˘
 
__°ªam
);

846 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

847 
__FILE
 *
__ª°ri˘
 
__°ªam
);

851 
__BEGIN_NAMESPACE_C99


855 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

856 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

857 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

858 
__END_NAMESPACE_C99


860 #ifde‡
__USE_GNU


861 
	~<xloˇÀ.h
>

865 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

866 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

867 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

868 
__loˇÀ_t
 
__loc
Ë
__THROW
;

877 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


878 
	#__√ed_iswxxx


	)

879 
	~<w˘y≥.h
>

883 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


884 
	~<bôs/wch¨2.h
>

887 #ifde‡
__LDBL_COMPAT


888 
	~<bôs/wch¨-ldbl.h
>

891 
__END_DECLS


899 #unde‡
__√ed_mb°©e_t


900 #unde‡
__√ed_wöt_t


	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@
1
.
1
/usr/include
50
1122
commands.c
commands.h
defination.h
lib/common/nf2.h
lib/common/nf2util.c
lib/common/nf2util.h
lib/common/nf2util_proxy_common.c
lib/common/nft_struct.h
lib/common/reg_defines.h
lib/common/reg_defines_openflow_switch.h
lib/common/util.c
lib/common/util.h
lib/reg_lib/client_test.c
lib/reg_lib/reg_proxy.c
lib/reg_lib/reg_proxy.h
lib/reg_lib/reg_proxy_client.c
lib/reg_lib/reg_proxy_server.c
lib/reg_lib/reg_proxy_server.h
main.c
tcam_flow_entry.c
tcam_flow_entry.h
/usr/include/arpa/inet.h
/usr/include/assert.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/inttypes.h
/usr/include/linux/sockios.h
/usr/include/net/if.h
/usr/include/netdb.h
/usr/include/netinet/in.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/rpc/netdb.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/ctype.h
/usr/include/stdc-predef.h
/usr/include/gconv.h
/usr/include/wchar.h
/usr/include/wctype.h
